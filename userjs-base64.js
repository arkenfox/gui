// 20230917 v117 user.js as base64 from main repo
// place this in a file named "userjs-base64.js"
const userjsbase64="LyoqKioqKgoqICAgIG5hbWU6IGFya2VuZm94IHVzZXIuanMKKiAgICBkYXRlOiAxNyBTZXB0ZW1iZXIgMjAyMwoqIHZlcnNpb246IDExNwoqICAgICB1cmw6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcmtlbmZveC91c2VyLmpzCiogbGljZW5zZTogTUlUOiBodHRwczovL2dpdGh1Yi5jb20vYXJrZW5mb3gvdXNlci5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dAoKKiBSRUFETUU6CgogIDEuIENvbnNpZGVyIHVzaW5nIFRvciBCcm93c2VyIGlmIGl0IG1lZXRzIHlvdXIgbmVlZHMgb3IgZml0cyB5b3VyIHRocmVhdCBtb2RlbAogICAgICAgKiBodHRwczovLzIwMTkud3d3LnRvcnByb2plY3Qub3JnL2Fib3V0L3RvcnVzZXJzLmh0bWwKICAyLiBSZWFkIHRoZSBlbnRpcmUgd2lraQogICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vYXJrZW5mb3gvdXNlci5qcy93aWtpCiAgMy4gSWYgeW91IHNraXBwZWQgc3RlcCAyLCByZXR1cm4gdG8gc3RlcCAyCiAgNC4gTWFrZSBjaGFuZ2VzIGluIGEgdXNlci1vdmVycmlkZXMuanMKICAgICAgICogVGhlcmUgYXJlIG9mdGVuIHRyYWRlLW9mZnMgYW5kIGNvbmZsaWN0cyBiZXR3ZWVuIHNlY3VyaXR5IHZzIHByaXZhY3kgdnMgYW50aS10cmFja2luZwogICAgICAgICBhbmQgdGhlc2UgbmVlZCB0byBiZSBiYWxhbmNlZCBhZ2FpbnN0IGZ1bmN0aW9uYWxpdHkgJiBjb252ZW5pZW5jZSAmIGJyZWFrYWdlCiAgICAgICAqIFNvbWUgc2l0ZSBicmVha2FnZSBhbmQgdW5pbnRlbmRlZCBjb25zZXF1ZW5jZXMgd2lsbCBoYXBwZW4uIEV2ZXJ5b25lJ3MgZXhwZXJpZW5jZSB3aWxsIGRpZmZlcgogICAgICAgICBlLmcuIHNvbWUgdXNlciBkYXRhIGlzIGVyYXNlZCBvbiBleGl0IChzZWN0aW9uIDI4MDApLCBjaGFuZ2UgdGhpcyB0byBzdWl0IHlvdXIgbmVlZHMKICAgICAgICogV2hpbGUgbm90IDEwMCUgZGVmaW5pdGl2ZSwgc2VhcmNoIGZvciAiW1NFVFVQIiB0YWdzCiAgNS4gU29tZSB0YWcgaW5mbwogICAgICAgW1NFVFVQLVNFQ1VSSVRZXSBpdCdzIG9uZSBpdGVtLCByZWFkIGl0CiAgICAgICAgICAgIFtTRVRVUC1XRUJdIGNhbiBjYXVzZSBzb21lIHdlYnNpdGVzIHRvIGJyZWFrCiAgICAgICAgIFtTRVRVUC1DSFJPTUVdIGNoYW5nZXMgaG93IEZpcmVmb3ggaXRzZWxmIGJlaGF2ZXMgKGkuZS4gbm90IGRpcmVjdGx5IHdlYnNpdGUgcmVsYXRlZCkKICA2LiBPdmVycmlkZSBSZWNpcGVzOiBodHRwczovL2dpdGh1Yi5jb20vYXJrZW5mb3gvdXNlci5qcy9pc3N1ZXMvMTA4MAoKKiBSRUxFQVNFUzogaHR0cHM6Ly9naXRodWIuY29tL2Fya2VuZm94L3VzZXIuanMvcmVsZWFzZXMKCiAgKiBJdCBpcyBiZXN0IHRvIHVzZSB0aGUgYXJrZW5mb3ggcmVsZWFzZSB0aGF0IGlzIG9wdGltaXplZCBmb3IgYW5kIG1hdGNoZXMgeW91ciBGaXJlZm94IHZlcnNpb24KICAqIEVWRVJZT05FOiBlYWNoIHJlbGVhc2UKICAgIC0gcnVuIHByZWZzQ2xlYW5lciB0byByZXNldCBwcmVmcyBtYWRlIGluYWN0aXZlLCBpbmNsdWRpbmcgZGVwcmVjYXRlZCAoOTk5OXMpCiAgICBFU1IxMDIKICAgIC0gSWYgeW91IGFyZSBub3QgdXNpbmcgYXJrZW5mb3ggdjEwMi0xLi4uIChub3QgYSBkZWZpbml0aXZlIGxpc3QpCiAgICAgIC0gMjgxNTogY2xlYXJPblNodXRkb3duIGNvb2tpZXMgKyBvZmZsaW5lQXBwcyBzaG91bGQgYmUgZmFsc2UKICAgICAgLSA5OTk5OiBzd2l0Y2ggdGhlIGFwcHJvcHJpYXRlIGRlcHJlY2F0ZWQgc2VjdGlvbihzKSBiYWNrIG9uCiAgKiBFU1IxMTUKICAgIC0gdXNlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmtlbmZveC91c2VyLmpzL3JlbGVhc2VzL3RhZy8xMTUuMQoKKiBJTkRFWDoKCiAgMDEwMDogU1RBUlRVUAogIDAyMDA6IEdFT0xPQ0FUSU9OIC8gTEFOR1VBR0UgLyBMT0NBTEUKICAwMzAwOiBRVUlFVEVSIEZPWAogIDA0MDA6IFNBRkUgQlJPV1NJTkcKICAwNjAwOiBCTE9DSyBJTVBMSUNJVCBPVVRCT1VORAogIDA3MDA6IEROUyAvIERvSCAvIFBST1hZIC8gU09DS1MKICAwODAwOiBMT0NBVElPTiBCQVIgLyBTRUFSQ0ggQkFSIC8gU1VHR0VTVElPTlMgLyBISVNUT1JZIC8gRk9STVMKICAwOTAwOiBQQVNTV09SRFMKICAxMDAwOiBESVNLIEFWT0lEQU5DRQogIDEyMDA6IEhUVFBTIChTU0wvVExTIC8gT0NTUCAvIENFUlRTIC8gSFBLUCkKICAxNDAwOiBGT05UUwogIDE2MDA6IFJFRkVSRVJTCiAgMTcwMDogQ09OVEFJTkVSUwogIDIwMDA6IFBMVUdJTlMgLyBNRURJQSAvIFdFQlJUQwogIDI0MDA6IERPTSAoRE9DVU1FTlQgT0JKRUNUIE1PREVMKQogIDI2MDA6IE1JU0NFTExBTkVPVVMKICAyNzAwOiBFVFAgKEVOSEFOQ0VEIFRSQUNLSU5HIFBST1RFQ1RJT04pCiAgMjgwMDogU0hVVERPV04gJiBTQU5JVElaSU5HCiAgNDUwMDogUkZQIChSRVNJU1QgRklOR0VSUFJJTlRJTkcpCiAgNTAwMDogT1BUSU9OQUwgT1BTRUMKICA1NTAwOiBPUFRJT05BTCBIQVJERU5JTkcKICA2MDAwOiBET04nVCBUT1VDSAogIDcwMDA6IERPTidUIEJPVEhFUgogIDgwMDA6IERPTidUIEJPVEhFUjogRklOR0VSUFJJTlRJTkcKICA5MDAwOiBOT04tUFJPSkVDVCBSRUxBVEVECiAgOTk5OTogREVQUkVDQVRFRCAvIFJFTU9WRUQgLyBMRUdBQ1kgLyBSRU5BTUVECgoqKioqKiovCgovKiBTVEFSVDogaW50ZXJuYWwgY3VzdG9tIHByZWYgdG8gdGVzdCBmb3Igc3ludGF4IGVycm9ycwogKiBbTk9URV0gTm90IGFsbCBzeW50YXggZXJyb3JzIGNhdXNlIHBhcnNpbmcgdG8gYWJvcnQgaS5lLiByZWFjaGluZyB0aGUgbGFzdCBkZWJ1ZyBwcmVmCiAqIG5vIGxvbmdlciBuZWNlc3NhcmlseSBtZWFucyB0aGF0IGFsbCBwcmVmcyBoYXZlIGJlZW4gYXBwbGllZC4gQ2hlY2sgdGhlIGNvbnNvbGUgcmlnaHQKICogYWZ0ZXIgc3RhcnR1cCBmb3IgYW55IHdhcm5pbmdzL2Vycm9yIG1lc3NhZ2VzIHJlbGF0ZWQgdG8gbm9uLWFwcGxpZWQgcHJlZnMKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9ubmV0aGVyY290ZS8yMDE4LzAzLzA5L2EtbmV3LXByZWZlcmVuY2VzLXBhcnNlci1mb3ItZmlyZWZveC8gKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICJTVEFSVDogT2ggeWVzLCB0aGUgTm9yd2VnaWFuIEJsdWUuLi4gd2hhdCdzIHdyb25nIHdpdGggaXQ/Iik7CgovKiAwMDAwOiBkaXNhYmxlIGFib3V0OmNvbmZpZyB3YXJuaW5nICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmFib3V0Q29uZmlnLnNob3dXYXJuaW5nIiwgZmFsc2UpOwoKLyoqKiBbU0VDVElPTiAwMTAwXTogU1RBUlRVUCAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjAxMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgZGVhZCEiKTsKLyogMDEwMjogc2V0IHN0YXJ0dXAgcGFnZSBbU0VUVVAtQ0hST01FXQogKiAwPWJsYW5rLCAxPWhvbWUsIDI9bGFzdCB2aXNpdGVkIHBhZ2UsIDM9cmVzdW1lIHByZXZpb3VzIHNlc3Npb24KICogW05PVEVdIFNlc3Npb24gUmVzdG9yZSBpcyBjbGVhcmVkIHdpdGggaGlzdG9yeSAoMjgxMSksIGFuZCBub3QgdXNlZCBpbiBQcml2YXRlIEJyb3dzaW5nIG1vZGUKICogW1NFVFRJTkddIEdlbmVyYWw+U3RhcnR1cD5SZXN0b3JlIHByZXZpb3VzIHNlc3Npb24gKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc3RhcnR1cC5wYWdlIiwgMCk7Ci8qIDAxMDM6IHNldCBIT01FK05FV1dJTkRPVyBwYWdlCiAqIGFib3V0OmhvbWU9RmlyZWZveCBIb21lIChkZWZhdWx0LCBzZWUgMDEwNSksIGN1c3RvbSBVUkwsIGFib3V0OmJsYW5rCiAqIFtTRVRUSU5HXSBIb21lPk5ldyBXaW5kb3dzIGFuZCBUYWJzPkhvbWVwYWdlIGFuZCBuZXcgd2luZG93cyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zdGFydHVwLmhvbWVwYWdlIiwgImFib3V0OmJsYW5rIik7Ci8qIDAxMDQ6IHNldCBORVdUQUIgcGFnZQogKiB0cnVlPUZpcmVmb3ggSG9tZSAoZGVmYXVsdCwgc2VlIDAxMDUpLCBmYWxzZT1ibGFuayBwYWdlCiAqIFtTRVRUSU5HXSBIb21lPk5ldyBXaW5kb3dzIGFuZCBUYWJzPk5ldyB0YWJzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLm5ld3RhYnBhZ2UuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDEwNTogZGlzYWJsZSBzcG9uc29yZWQgY29udGVudCBvbiBGaXJlZm94IEhvbWUgKEFjdGl2aXR5IFN0cmVhbSkKICogW1NFVFRJTkddIEhvbWU+RmlyZWZveCBIb21lIENvbnRlbnQgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uc2hvd1Nwb25zb3JlZCIsIGZhbHNlKTsgLy8gW0ZGNTgrXSBQb2NrZXQgPiBTcG9uc29yZWQgU3Rvcmllcwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uc2hvd1Nwb25zb3JlZFRvcFNpdGVzIiwgZmFsc2UpOyAvLyBbRkY4MytdIFNwb25zb3JlZCBzaG9ydGN1dHMKLyogMDEwNjogY2xlYXIgZGVmYXVsdCB0b3BzaXRlcwogKiBbTk9URV0gVGhpcyBkb2VzIG5vdCBibG9jayB5b3UgZnJvbSBhZGRpbmcgeW91ciBvd24gKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZGVmYXVsdC5zaXRlcyIsICIiKTsKCi8qKiogW1NFQ1RJT04gMDIwMF06IEdFT0xPQ0FUSU9OIC8gTEFOR1VBR0UgLyBMT0NBTEUgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICIwMjAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGRlZmluaXRlbHkgZGVjZWFzZWQhIik7Ci8qIDAyMDE6IHVzZSBNb3ppbGxhIGdlb2xvY2F0aW9uIHNlcnZpY2UgaW5zdGVhZCBvZiBHb29nbGUgaWYgcGVybWlzc2lvbiBpcyBncmFudGVkIFtGRjc0K10KICogT3B0aW9uYWxseSBlbmFibGUgbG9nZ2luZyB0byB0aGUgY29uc29sZSAoZGVmYXVsdHMgdG8gZmFsc2UpICoqKi8KdXNlcl9wcmVmKCJnZW8ucHJvdmlkZXIubmV0d29yay51cmwiLCAiaHR0cHM6Ly9sb2NhdGlvbi5zZXJ2aWNlcy5tb3ppbGxhLmNvbS92MS9nZW9sb2NhdGU/a2V5PSVNT1pJTExBX0FQSV9LRVklIik7CiAgIC8vIHVzZXJfcHJlZigiZ2VvLnByb3ZpZGVyLm5ldHdvcmsubG9nZ2luZy5lbmFibGVkIiwgdHJ1ZSk7IC8vIFtISURERU4gUFJFRl0KLyogMDIwMjogZGlzYWJsZSB1c2luZyB0aGUgT1MncyBnZW9sb2NhdGlvbiBzZXJ2aWNlICoqKi8KdXNlcl9wcmVmKCJnZW8ucHJvdmlkZXIubXMtd2luZG93cy1sb2NhdGlvbiIsIGZhbHNlKTsgLy8gW1dJTkRPV1NdCnVzZXJfcHJlZigiZ2VvLnByb3ZpZGVyLnVzZV9jb3JlbG9jYXRpb24iLCBmYWxzZSk7IC8vIFtNQUNdCnVzZXJfcHJlZigiZ2VvLnByb3ZpZGVyLnVzZV9ncHNkIiwgZmFsc2UpOyAvLyBbTElOVVhdCnVzZXJfcHJlZigiZ2VvLnByb3ZpZGVyLnVzZV9nZW9jbHVlIiwgZmFsc2UpOyAvLyBbRkYxMDIrXSBbTElOVVhdCi8qIDAyMTA6IHNldCBwcmVmZXJyZWQgbGFuZ3VhZ2UgZm9yIGRpc3BsYXlpbmcgcGFnZXMKICogW1NFVFRJTkddIEdlbmVyYWw+TGFuZ3VhZ2UgYW5kIEFwcGVhcmFuY2U+TGFuZ3VhZ2U+Q2hvb3NlIHlvdXIgcHJlZmVycmVkIGxhbmd1YWdlLi4uCiAqIFtURVNUXSBodHRwczovL2FkZG9ucy5tb3ppbGxhLm9yZy9hYm91dCAqKiovCnVzZXJfcHJlZigiaW50bC5hY2NlcHRfbGFuZ3VhZ2VzIiwgImVuLVVTLCBlbiIpOwovKiAwMjExOiB1c2UgZW4tVVMgbG9jYWxlIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSBvciByZWdpb24gbG9jYWxlCiAqIFtTRVRVUC1XRUJdIE1heSBicmVhayBzb21lIGlucHV0IG1ldGhvZHMgZS5nIHhpbS9pYnVzIGZvciBDSksgbGFuZ3VhZ2VzIFsxXQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9idWdsaXN0LmNnaT9idWdfaWQ9ODY3NTAxLDE2Mjk2MzAgKioqLwp1c2VyX3ByZWYoImphdmFzY3JpcHQudXNlX3VzX2VuZ2xpc2hfbG9jYWxlIiwgdHJ1ZSk7IC8vIFtISURERU4gUFJFRl0KCi8qKiogW1NFQ1RJT04gMDMwMF06IFFVSUVURVIgRk9YICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMDMwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBub3QgcGluaW4nIGZvciB0aGUgZmpvcmRzISIpOwovKiogUkVDT01NRU5EQVRJT05TICoqKi8KLyogMDMyMDogZGlzYWJsZSByZWNvbW1lbmRhdGlvbiBwYW5lIGluIGFib3V0OmFkZG9ucyAodXNlcyBHb29nbGUgQW5hbHl0aWNzKSAqKiovCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5nZXRBZGRvbnMuc2hvd1BhbmUiLCBmYWxzZSk7IC8vIFtISURERU4gUFJFRl0KLyogMDMyMTogZGlzYWJsZSByZWNvbW1lbmRhdGlvbnMgaW4gYWJvdXQ6YWRkb25zJyBFeHRlbnNpb25zIGFuZCBUaGVtZXMgcGFuZXMgW0ZGNjgrXSAqKiovCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5odG1sYWJvdXRhZGRvbnMucmVjb21tZW5kYXRpb25zLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDAzMjI6IGRpc2FibGUgcGVyc29uYWxpemVkIEV4dGVuc2lvbiBSZWNvbW1lbmRhdGlvbnMgaW4gYWJvdXQ6YWRkb25zIGFuZCBBTU8gW0ZGNjUrXQogKiBbTk9URV0gVGhpcyBwcmVmIGhhcyBubyBlZmZlY3Qgd2hlbiBIZWFsdGggUmVwb3J0cyAoMDMzMSkgYXJlIGRpc2FibGVkCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+RmlyZWZveCBEYXRhIENvbGxlY3Rpb24gJiBVc2U+QWxsb3cgRmlyZWZveCB0byBtYWtlIHBlcnNvbmFsaXplZCBleHRlbnNpb24gcmVjb21tZW5kYXRpb25zCiAqIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvcGVyc29uYWxpemVkLWV4dGVuc2lvbi1yZWNvbW1lbmRhdGlvbnMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuZGlzY292ZXJ5LmVuYWJsZWQiLCBmYWxzZSk7CgovKiogVEVMRU1FVFJZICoqKi8KLyogMDMzMDogZGlzYWJsZSBuZXcgZGF0YSBzdWJtaXNzaW9uIFtGRjQxK10KICogSWYgZGlzYWJsZWQsIG5vIHBvbGljeSBpcyBzaG93biBvciB1cGxvYWQgdGFrZXMgcGxhY2UsIGV2ZXIKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTE5NTU1MiAqKiovCnVzZXJfcHJlZigiZGF0YXJlcG9ydGluZy5wb2xpY3kuZGF0YVN1Ym1pc3Npb25FbmFibGVkIiwgZmFsc2UpOwovKiAwMzMxOiBkaXNhYmxlIEhlYWx0aCBSZXBvcnRzCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+RmlyZWZveCBEYXRhIENvbGxlY3Rpb24gJiBVc2U+QWxsb3cgRmlyZWZveCB0byBzZW5kIHRlY2huaWNhbC4uLiBkYXRhICoqKi8KdXNlcl9wcmVmKCJkYXRhcmVwb3J0aW5nLmhlYWx0aHJlcG9ydC51cGxvYWRFbmFibGVkIiwgZmFsc2UpOwovKiAwMzMyOiBkaXNhYmxlIHRlbGVtZXRyeQogKiBUaGUgInVuaWZpZWQiIHByZWYgYWZmZWN0cyB0aGUgYmVoYXZpb3Igb2YgdGhlICJlbmFibGVkIiBwcmVmCiAqIC0gSWYgInVuaWZpZWQiIGlzIGZhbHNlIHRoZW4gImVuYWJsZWQiIGNvbnRyb2xzIHRoZSB0ZWxlbWV0cnkgbW9kdWxlCiAqIC0gSWYgInVuaWZpZWQiIGlzIHRydWUgdGhlbiAiZW5hYmxlZCIgb25seSBjb250cm9scyB3aGV0aGVyIHRvIHJlY29yZCBleHRlbmRlZCBkYXRhCiAqIFtOT1RFXSAidG9vbGtpdC50ZWxlbWV0cnkuZW5hYmxlZCIgaXMgbm93IExPQ0tFRCB0byByZWZsZWN0IHByZXJlbGVhc2UgKHRydWUpIG9yIHJlbGVhc2UgYnVpbGRzIChmYWxzZSkgWzJdCiAqIFsxXSBodHRwczovL2ZpcmVmb3gtc291cmNlLWRvY3MubW96aWxsYS5vcmcvdG9vbGtpdC9jb21wb25lbnRzL3RlbGVtZXRyeS90ZWxlbWV0cnkvaW50ZXJuYWxzL3ByZWZlcmVuY2VzLmh0bWwKICogWzJdIGh0dHBzOi8vbWVkaXVtLmNvbS9nZW9yZy1mcml0enNjaGUvZGF0YS1wcmVmZXJlbmNlLWNoYW5nZXMtaW4tZmlyZWZveC01OC0yZDVkZjljNDI4YjUgKioqLwp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LnVuaWZpZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkuZW5hYmxlZCIsIGZhbHNlKTsgLy8gc2VlIFtOT1RFXQp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LnNlcnZlciIsICJkYXRhOiwiKTsKdXNlcl9wcmVmKCJ0b29sa2l0LnRlbGVtZXRyeS5hcmNoaXZlLmVuYWJsZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkubmV3UHJvZmlsZVBpbmcuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNTUrXQp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LnNodXRkb3duUGluZ1NlbmRlci5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NStdCnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkudXBkYXRlUGluZy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NitdCnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkuYmhyUGluZy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NytdIEJhY2tncm91bmQgSGFuZyBSZXBvcnRlcgp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LmZpcnN0U2h1dGRvd25QaW5nLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjU3K10KLyogMDMzMzogZGlzYWJsZSBUZWxlbWV0cnkgQ292ZXJhZ2UKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9kYXRhLzIwMTgvMDgvMjAvZWZmZWN0aXZlbHktbWVhc3VyaW5nLXNlYXJjaC1pbi1maXJlZm94LyAqKiovCnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkuY292ZXJhZ2Uub3B0LW91dCIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCnVzZXJfcHJlZigidG9vbGtpdC5jb3ZlcmFnZS5vcHQtb3V0IiwgdHJ1ZSk7IC8vIFtGRjY0K10gW0hJRERFTiBQUkVGXQp1c2VyX3ByZWYoInRvb2xraXQuY292ZXJhZ2UuZW5kcG9pbnQuYmFzZSIsICIiKTsKLyogMDMzNDogZGlzYWJsZSBQaW5nQ2VudHJlIHRlbGVtZXRyeSAodXNlZCBpbiBzZXZlcmFsIFN5c3RlbSBBZGQtb25zKSBbRkY1NytdCiAqIERlZmVuc2UtaW4tZGVwdGg6IGN1cnJlbnRseSBjb3ZlcmVkIGJ5IDAzMzEgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIucGluZy1jZW50cmUudGVsZW1ldHJ5IiwgZmFsc2UpOwovKiAwMzM1OiBkaXNhYmxlIEZpcmVmb3ggSG9tZSAoQWN0aXZpdHkgU3RyZWFtKSB0ZWxlbWV0cnkgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZmVlZHMudGVsZW1ldHJ5IiwgZmFsc2UpOwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0udGVsZW1ldHJ5IiwgZmFsc2UpOwoKLyoqIFNUVURJRVMgKioqLwovKiAwMzQwOiBkaXNhYmxlIFN0dWRpZXMKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5GaXJlZm94IERhdGEgQ29sbGVjdGlvbiAmIFVzZT5BbGxvdyBGaXJlZm94IHRvIGluc3RhbGwgYW5kIHJ1biBzdHVkaWVzICoqKi8KdXNlcl9wcmVmKCJhcHAuc2hpZWxkLm9wdG91dHN0dWRpZXMuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDM0MTogZGlzYWJsZSBOb3JtYW5keS9TaGllbGQgW0ZGNjArXQogKiBTaGllbGQgaXMgYSB0ZWxlbWV0cnkgc3lzdGVtIHRoYXQgY2FuIHB1c2ggYW5kIHRlc3QgInJlY2lwZXMiCiAqIFsxXSBodHRwczovL21vemlsbGEuZ2l0aHViLmlvL25vcm1hbmR5LyAqKiovCnVzZXJfcHJlZigiYXBwLm5vcm1hbmR5LmVuYWJsZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigiYXBwLm5vcm1hbmR5LmFwaV91cmwiLCAiIik7CgovKiogQ1JBU0ggUkVQT1JUUyAqKiovCi8qIDAzNTA6IGRpc2FibGUgQ3Jhc2ggUmVwb3J0cyAqKiovCnVzZXJfcHJlZigiYnJlYWtwYWQucmVwb3J0VVJMIiwgIiIpOwp1c2VyX3ByZWYoImJyb3dzZXIudGFicy5jcmFzaFJlcG9ydGluZy5zZW5kUmVwb3J0IiwgZmFsc2UpOyAvLyBbRkY0NCtdCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5jcmFzaFJlcG9ydHMudW5zdWJtaXR0ZWRDaGVjay5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1MStdIFtERUZBVUxUOiBmYWxzZV0KLyogMDM1MTogZW5mb3JjZSBubyBzdWJtaXNzaW9uIG9mIGJhY2tsb2dnZWQgQ3Jhc2ggUmVwb3J0cyBbRkY1OCtdCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+RmlyZWZveCBEYXRhIENvbGxlY3Rpb24gJiBVc2U+QWxsb3cgRmlyZWZveCB0byBzZW5kIGJhY2tsb2dnZWQgY3Jhc2ggcmVwb3J0cyAgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuY3Jhc2hSZXBvcnRzLnVuc3VibWl0dGVkQ2hlY2suYXV0b1N1Ym1pdDIiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KCi8qKiBPVEhFUiAqKiovCi8qIDAzNjA6IGRpc2FibGUgQ2FwdGl2ZSBQb3J0YWwgZGV0ZWN0aW9uCiAqIFsxXSBodHRwczovL3d3dy5lZmYub3JnL2RlZXBsaW5rcy8yMDE3LzA4L2hvdy1jYXB0aXZlLXBvcnRhbHMtaW50ZXJmZXJlLXdpcmVsZXNzLXNlY3VyaXR5LWFuZC1wcml2YWN5ICoqKi8KdXNlcl9wcmVmKCJjYXB0aXZlZGV0ZWN0LmNhbm9uaWNhbFVSTCIsICIiKTsKdXNlcl9wcmVmKCJuZXR3b3JrLmNhcHRpdmUtcG9ydGFsLXNlcnZpY2UuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNTIrXQovKiAwMzYxOiBkaXNhYmxlIE5ldHdvcmsgQ29ubmVjdGl2aXR5IGNoZWNrcyBbRkY2NStdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE0NjA1MzcgKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuY29ubmVjdGl2aXR5LXNlcnZpY2UuZW5hYmxlZCIsIGZhbHNlKTsKCi8qKiogW1NFQ1RJT04gMDQwMF06IFNBRkUgQlJPV1NJTkcgKFNCKQogICBTQiBoYXMgdGFrZW4gbWFueSBzdGVwcyB0byBwcmVzZXJ2ZSBwcml2YWN5LiBJZiByZXF1aXJlZCwgYSBmdWxsIHVybCBpcyBuZXZlciBzZW50CiAgIHRvIEdvb2dsZSwgb25seSBhIHBhcnQtaGFzaCBvZiB0aGUgcHJlZml4LCBoaWRkZW4gd2l0aCBub2lzZSBvZiBvdGhlciByZWFsIHBhcnQtaGFzaGVzLgogICBGaXJlZm94IHRha2VzIG1lYXN1cmVzIHN1Y2ggYXMgc3RyaXBwaW5nIG91dCBpZGVudGlmeWluZyBwYXJhbWV0ZXJzIGFuZCBzaW5jZSBTQnY0IChGRjU3KykKICAgZG9lc24ndCBldmVuIHVzZSBjb29raWVzLiAoI1R1cm4gb24gYnJvd3Nlci5zYWZlYnJvd3NpbmcuZGVidWcgdG8gbW9uaXRvciB0aGlzIGFjdGl2aXR5KQoKICAgWzFdIGh0dHBzOi8vZmVlZGluZy5jbG91ZC5nZWVrLm56L3Bvc3RzL2hvdy1zYWZlLWJyb3dzaW5nLXdvcmtzLWluLWZpcmVmb3gvCiAgIFsyXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvU2VjdXJpdHkvU2FmZV9Ccm93c2luZwogICBbM10gaHR0cHM6Ly9zdXBwb3J0Lm1vemlsbGEub3JnL2tiL2hvdy1kb2VzLXBoaXNoaW5nLWFuZC1tYWx3YXJlLXByb3RlY3Rpb24td29yawogICBbNF0gaHR0cHM6Ly9lZHVjYXRlZGd1ZXNzd29yay5vcmcvcG9zdHMvc2FmZS1icm93c2luZy1wcml2YWN5LwoqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA0MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgcGFzc2VkIG9uISIpOwovKiAwNDAxOiBkaXNhYmxlIFNCIChTYWZlIEJyb3dzaW5nKQogKiBbV0FSTklOR10gRG8gdGhpcyBhdCB5b3VyIG93biByaXNrISBUaGVzZSBhcmUgdGhlIG1hc3RlciBzd2l0Y2hlcwogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PlNlY3VyaXR5Pi4uLiBCbG9jayBkYW5nZXJvdXMgYW5kIGRlY2VwdGl2ZSBjb250ZW50ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnNhZmVicm93c2luZy5tYWx3YXJlLmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zYWZlYnJvd3NpbmcucGhpc2hpbmcuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDQwMjogZGlzYWJsZSBTQiBjaGVja3MgZm9yIGRvd25sb2FkcyAoYm90aCBsb2NhbCBsb29rdXBzICsgcmVtb3RlKQogKiBUaGlzIGlzIHRoZSBtYXN0ZXIgc3dpdGNoIGZvciB0aGUgc2FmZWJyb3dzaW5nLmRvd25sb2FkcyogcHJlZnMgKDA0MDMsIDA0MDQpCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+U2VjdXJpdHk+Li4uICJCbG9jayBkYW5nZXJvdXMgZG93bmxvYWRzIiAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zYWZlYnJvd3NpbmcuZG93bmxvYWRzLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDA0MDM6IGRpc2FibGUgU0IgY2hlY2tzIGZvciBkb3dubG9hZHMgKHJlbW90ZSkKICogVG8gdmVyaWZ5IHRoZSBzYWZldHkgb2YgY2VydGFpbiBleGVjdXRhYmxlIGZpbGVzLCBGaXJlZm94IG1heSBzdWJtaXQgc29tZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUKICogZmlsZSwgaW5jbHVkaW5nIHRoZSBuYW1lLCBvcmlnaW4sIHNpemUgYW5kIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIG9mIHRoZSBjb250ZW50cywgdG8gdGhlIEdvb2dsZQogKiBTYWZlIEJyb3dzaW5nIHNlcnZpY2Ugd2hpY2ggaGVscHMgRmlyZWZveCBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgdGhlIGZpbGUgc2hvdWxkIGJlIGJsb2NrZWQKICogW1NFVFVQLVNFQ1VSSVRZXSBJZiB5b3UgZG8gbm90IHVuZGVyc3RhbmQgdGhpcywgb3IgeW91IHdhbnQgdGhpcyBwcm90ZWN0aW9uLCB0aGVuIG92ZXJyaWRlIHRoaXMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc2FmZWJyb3dzaW5nLmRvd25sb2Fkcy5yZW1vdGUuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnNhZmVicm93c2luZy5kb3dubG9hZHMucmVtb3RlLnVybCIsICIiKTsgLy8gRGVmZW5zZS1pbi1kZXB0aAovKiAwNDA0OiBkaXNhYmxlIFNCIGNoZWNrcyBmb3IgdW53YW50ZWQgc29mdHdhcmUKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5TZWN1cml0eT4uLi4gIldhcm4geW91IGFib3V0IHVud2FudGVkIGFuZCB1bmNvbW1vbiBzb2Z0d2FyZSIgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuc2FmZWJyb3dzaW5nLmRvd25sb2Fkcy5yZW1vdGUuYmxvY2tfcG90ZW50aWFsbHlfdW53YW50ZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zYWZlYnJvd3NpbmcuZG93bmxvYWRzLnJlbW90ZS5ibG9ja191bmNvbW1vbiIsIGZhbHNlKTsKLyogMDQwNTogZGlzYWJsZSAiaWdub3JlIHRoaXMgd2FybmluZyIgb24gU0Igd2FybmluZ3MgW0ZGNDUrXQogKiBJZiBjbGlja2VkLCBpdCBieXBhc3NlcyB0aGUgYmxvY2sgZm9yIHRoYXQgc2Vzc2lvbi4gVGhpcyBpcyBhIG1lYW5zIGZvciBhZG1pbnMgdG8gZW5mb3JjZSBTQgogKiBbVEVTVF0gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmtlbmZveC91c2VyLmpzL3dpa2kvQXBwZW5kaXgtQS1UZXN0LVNpdGVzIy1tb3ppbGxhCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzEyMjY0OTAgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuc2FmZWJyb3dzaW5nLmFsbG93T3ZlcnJpZGUiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDA2MDBdOiBCTE9DSyBJTVBMSUNJVCBPVVRCT1VORCBbbm90IGV4cGxpY2l0bHkgYXNrZWQgZm9yIC0gZS5nLiBjbGlja2VkIG9uXSAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA2MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3Mgbm8gbW9yZSEiKTsKLyogMDYwMTogZGlzYWJsZSBsaW5rIHByZWZldGNoaW5nCiAqIFsxXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0xpbmtfcHJlZmV0Y2hpbmdfRkFRICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLnByZWZldGNoLW5leHQiLCBmYWxzZSk7Ci8qIDA2MDI6IGRpc2FibGUgRE5TIHByZWZldGNoaW5nCiAqIFsxXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvWC1ETlMtUHJlZmV0Y2gtQ29udHJvbCAqKiovCnVzZXJfcHJlZigibmV0d29yay5kbnMuZGlzYWJsZVByZWZldGNoIiwgdHJ1ZSk7CiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5kbnMuZGlzYWJsZVByZWZldGNoRnJvbUhUVFBTIiwgdHJ1ZSk7IC8vIFtERUZBVUxUOiB0cnVlXQovKiAwNjAzOiBkaXNhYmxlIHByZWRpY3RvciAvIHByZWZldGNoaW5nICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLnByZWRpY3Rvci5lbmFibGVkIiwgZmFsc2UpOwp1c2VyX3ByZWYoIm5ldHdvcmsucHJlZGljdG9yLmVuYWJsZS1wcmVmZXRjaCIsIGZhbHNlKTsgLy8gW0ZGNDgrXSBbREVGQVVMVDogZmFsc2VdCi8qIDA2MDQ6IGRpc2FibGUgbGluay1tb3VzZW92ZXIgb3BlbmluZyBjb25uZWN0aW9uIHRvIGxpbmtlZCBzZXJ2ZXIKICogWzFdIGh0dHBzOi8vbmV3cy5zbGFzaGRvdC5vcmcvc3RvcnkvMTUvMDgvMTQvMjMyMTIwMi9ob3ctdG8tcXVhc2gtZmlyZWZveHMtc2lsZW50LXJlcXVlc3RzICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuc3BlY3VsYXRpdmUtcGFyYWxsZWwtbGltaXQiLCAwKTsKLyogMDYwNTogZGlzYWJsZSBtb3VzZWRvd24gc3BlY3VsYXRpdmUgY29ubmVjdGlvbnMgb24gYm9va21hcmtzIGFuZCBoaXN0b3J5IFtGRjk4K10gKioqLwp1c2VyX3ByZWYoImJyb3dzZXIucGxhY2VzLnNwZWN1bGF0aXZlQ29ubmVjdC5lbmFibGVkIiwgZmFsc2UpOwovKiAwNjEwOiBlbmZvcmNlIG5vICJIeXBlcmxpbmsgQXVkaXRpbmciIChjbGljayB0cmFja2luZykKICogWzFdIGh0dHBzOi8vd3d3LmJsZWVwaW5nY29tcHV0ZXIuY29tL25ld3Mvc29mdHdhcmUvbWFqb3ItYnJvd3NlcnMtdG8tcHJldmVudC1kaXNhYmxpbmctb2YtY2xpY2stdHJhY2tpbmctcHJpdmFjeS1yaXNrLyAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zZW5kX3BpbmdzIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCgovKioqIFtTRUNUSU9OIDA3MDBdOiBETlMgLyBEb0ggLyBQUk9YWSAvIFNPQ0tTICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMDcwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBnaXZlbiB1cCB0aGUgZ2hvc3QhIik7Ci8qIDA3MDI6IHNldCB0aGUgcHJveHkgc2VydmVyIHRvIGRvIGFueSBETlMgbG9va3VwcyB3aGVuIHVzaW5nIFNPQ0tTCiAqIGUuZy4gaW4gVG9yLCB0aGlzIHN0b3BzIHlvdXIgbG9jYWwgRE5TIHNlcnZlciBmcm9tIGtub3dpbmcgeW91ciBUb3IgZGVzdGluYXRpb24KICogYXMgYSByZW1vdGUgVG9yIG5vZGUgd2lsbCBoYW5kbGUgdGhlIEROUyByZXF1ZXN0CiAqIFsxXSBodHRwczovL3RyYWMudG9ycHJvamVjdC5vcmcvcHJvamVjdHMvdG9yL3dpa2kvZG9jL1RvcmlmeUhPV1RPL1dlYkJyb3dzZXJzICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLnByb3h5LnNvY2tzX3JlbW90ZV9kbnMiLCB0cnVlKTsKLyogMDcwMzogZGlzYWJsZSB1c2luZyBVTkMgKFVuaWZvcm0gTmFtaW5nIENvbnZlbnRpb24pIHBhdGhzIFtGRjYxK10KICogW1NFVFVQLUNIUk9NRV0gQ2FuIGJyZWFrIGV4dGVuc2lvbnMgZm9yIHByb2ZpbGVzIG9uIG5ldHdvcmsgc2hhcmVzCiAqIFsxXSBodHRwczovL2dpdGxhYi50b3Jwcm9qZWN0Lm9yZy90cG8vYXBwbGljYXRpb25zL3Rvci1icm93c2VyLy0vaXNzdWVzLzI2NDI0ICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLmZpbGUuZGlzYWJsZV91bmNfcGF0aHMiLCB0cnVlKTsgLy8gW0hJRERFTiBQUkVGXQovKiAwNzA0OiBkaXNhYmxlIEdJTyBhcyBhIHBvdGVudGlhbCBwcm94eSBieXBhc3MgdmVjdG9yCiAqIEd2ZnMvR0lPIGhhcyBhIHNldCBvZiBzdXBwb3J0ZWQgcHJvdG9jb2xzIGxpa2Ugb2JleCwgbmV0d29yaywgYXJjaGl2ZSwgY29tcHV0ZXIsCiAqIGRhdiwgY2RkYSwgZ3Bob3RvMiwgdHJhc2gsIGV0Yy4gQnkgZGVmYXVsdCBvbmx5IHNmdHAgaXMgYWNjZXB0ZWQgKEZGODcrKQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNDMzNTA3CiAqIFsyXSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HVmZzCiAqIFszXSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HSU9fKHNvZnR3YXJlKSAqKiovCnVzZXJfcHJlZigibmV0d29yay5naW8uc3VwcG9ydGVkLXByb3RvY29scyIsICIiKTsgLy8gW0hJRERFTiBQUkVGXQovKiAwNzA1OiBkaXNhYmxlIHByb3h5IGRpcmVjdCBmYWlsb3ZlciBmb3Igc3lzdGVtIHJlcXVlc3RzIFtGRjkxK10KICogW1dBUk5JTkddIERlZmF1bHQgdHJ1ZSBpcyBhIHNlY3VyaXR5IGZlYXR1cmUgYWdhaW5zdCBtYWxpY2lvdXMgZXh0ZW5zaW9ucyBbMV0KICogW1NFVFVQLUNIUk9NRV0gSWYgeW91IHVzZSBhIHByb3h5IGFuZCB5b3UgdHJ1c3QgeW91ciBleHRlbnNpb25zCiAqIFsxXSBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvc2VjdXJpdHkvMjAyMS8xMC8yNS9zZWN1cmluZy10aGUtcHJveHktYXBpLWZvci1maXJlZm94LWFkZC1vbnMvICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLnByb3h5LmZhaWxvdmVyX2RpcmVjdCIsIGZhbHNlKTsKLyogMDcwNjogZGlzYWJsZSBwcm94eSBieXBhc3MgZm9yIHN5c3RlbSByZXF1ZXN0IGZhaWx1cmVzIFtGRjk1K10KICogUmVtb3RlU2V0dGluZ3MsIFVwZGF0ZVNlcnZpY2UsIFRlbGVtZXRyeSBbMV0KICogW1dBUk5JTkddIElmIGZhbHNlLCB0aGlzIHdpbGwgYnJlYWsgdGhlIGZhbGxiYWNrIGZvciBzb21lIHNlY3VyaXR5IGZlYXR1cmVzCiAqIFtTRVRVUC1DSFJPTUVdIElmIHlvdSB1c2UgYSBwcm94eSBhbmQgeW91IHVuZGVyc3RhbmQgdGhlIHNlY3VyaXR5IGltcGFjdAogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9idWdsaXN0LmNnaT9idWdfaWQ9MTczMjc5MiwxNzMzOTk0LDE3MzM0ODEgKioqLwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsucHJveHkuYWxsb3dfYnlwYXNzIiwgZmFsc2UpOwovKiAwNzEwOiBlbmFibGUgRE5TLW92ZXItSFRUUFMgKERvSCkgW0ZGNjArXQogKiAwPWRlZmF1bHQsIDI9aW5jcmVhc2VkIChUUlIgKFRydXN0ZWQgUmVjdXJzaXZlIFJlc29sdmVyKSBmaXJzdCksIDM9bWF4IChUUlIgb25seSksIDU9b2ZmIChubyByb2xsb3V0KQogKiBzZWUgImRvaC1yb2xsb3V0LmhvbWUtcmVnaW9uIjogVVNBIDIwMTksIENhbmFkYSAyMDIxLCBSdXNzaWEvVWtyYWluZSAyMDIyIFszXQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkROUyBvdmVyIEhUVFBTCiAqIFsxXSBodHRwczovL2hhY2tzLm1vemlsbGEub3JnLzIwMTgvMDUvYS1jYXJ0b29uLWludHJvLXRvLWRucy1vdmVyLWh0dHBzLwogKiBbMl0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L0RPSC1yZXNvbHZlci1wb2xpY3kKICogWzNdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9lbi1VUy9rYi9maXJlZm94LWRucy1vdmVyLWh0dHBzCiAqIFs0XSBodHRwczovL3d3dy5lZmYub3JnL2RlZXBsaW5rcy8yMDIwLzEyL2Rucy1kb2gtYW5kLW9kb2gtb2gtbXkteWVhci1yZXZpZXctMjAyMCAqKiovCiAgIC8vIHVzZXJfcHJlZigibmV0d29yay50cnIubW9kZSIsIDMpOwovKiAwNzExOiBkaXNhYmxlIHNraXBwaW5nIERvSCB3aGVuIHBhcmVudGFsIGNvbnRyb2xzIGFyZSBlbmFibGVkIFtGRjcwK10gKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuZG5zLnNraXBUUlItd2hlbi1wYXJlbnRhbC1jb250cm9sLWVuYWJsZWQiLCBmYWxzZSk7Ci8qIDA3MTI6IHNldCBEb0ggcHJvdmlkZXIKICogVGhlIGN1c3RvbSB1cmkgaXMgdGhlIHZhbHVlIHNob3duIHdoZW4geW91ICJDaG9vc2UgcHJvdmlkZXI+Q3VzdG9tPiIKICogW05PVEVdIElmIHlvdSBVU0UgY3VzdG9tIHRoZW4gIm5ldHdvcmsudHJyLnVyaSIgc2hvdWxkIGJlIHNldCB0aGUgc2FtZQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkROUyBvdmVyIEhUVFBTPkluY3JlYXNlZC9NYXg+Q2hvb3NlIHByb3ZpZGVyICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLnRyci51cmkiLCAiaHR0cHM6Ly9leGFtcGxlLmRucyIpOwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsudHJyLmN1c3RvbV91cmkiLCAiaHR0cHM6Ly9leGFtcGxlLmRucyIpOwoKLyoqKiBbU0VDVElPTiAwODAwXTogTE9DQVRJT04gQkFSIC8gU0VBUkNIIEJBUiAvIFNVR0dFU1RJT05TIC8gSElTVE9SWSAvIEZPUk1TICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMDgwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBjZWFzZWQgdG8gYmUhIik7Ci8qIDA4MDI6IGRpc2FibGUgbG9jYXRpb24gYmFyIGRvbWFpbiBndWVzc2luZwogKiBkb21haW4gZ3Vlc3NpbmcgaW50ZXJjZXB0cyBETlMgImhvc3RuYW1lIG5vdCBmb3VuZCBlcnJvcnMiIGFuZCByZXNlbmRzIGEKICogcmVxdWVzdCAoZS5nLiBieSBhZGRpbmcgd3d3IG9yIC5jb20pLiBUaGlzIGlzIGluY29uc2lzdGVudCB1c2UgKGUuZy4gRlFETnMpLCBkb2VzIG5vdCB3b3JrCiAqIHZpYSBQcm94eSBTZXJ2ZXJzIChkaWZmZXJlbnQgZXJyb3IpLCBpcyBhIGZsYXdlZCB1c2Ugb2YgRE5TIChUTERzOiB3aHkgdHJlYXQgLmNvbQogKiBhcyB0aGUgNDExIGZvciBETlMgZXJyb3JzPyksIHByaXZhY3kgaXNzdWVzICh3aHkgY29ubmVjdCB0byBzaXRlcyB5b3UgZGlkbid0CiAqIGludGVuZCB0byksIGNhbiBsZWFrIHNlbnNpdGl2ZSBkYXRhIChlLmcuIHF1ZXJ5IHN0cmluZ3M6IGUuZy4gUHJpbmNldG9uIGF0dGFjayksCiAqIGFuZCBpcyBhIHNlY3VyaXR5IHJpc2sgKGUuZy4gY29tbW9uIHR5cG9zICYgbWFsaWNpb3VzIHNpdGVzIHNldCB1cCB0byBleHBsb2l0IHRoaXMpICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmZpeHVwLmFsdGVybmF0ZS5lbmFibGVkIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2UgRkYxMDQrXQovKiAwODA0OiBkaXNhYmxlIGxpdmUgc2VhcmNoIHN1Z2dlc3Rpb25zCiAqIFtOT1RFXSBCb3RoIG11c3QgYmUgdHJ1ZSBmb3IgdGhlIGxvY2F0aW9uIGJhciB0byB3b3JrCiAqIFtTRVRVUC1DSFJPTUVdIE92ZXJyaWRlIHRoZXNlIGlmIHlvdSB0cnVzdCBhbmQgdXNlIGEgcHJpdmFjeSByZXNwZWN0aW5nIHNlYXJjaCBlbmdpbmUKICogW1NFVFRJTkddIFNlYXJjaD5Qcm92aWRlIHNlYXJjaCBzdWdnZXN0aW9ucyB8IFNob3cgc2VhcmNoIHN1Z2dlc3Rpb25zIGluIGFkZHJlc3MgYmFyIHJlc3VsdHMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc2VhcmNoLnN1Z2dlc3QuZW5hYmxlZCIsIGZhbHNlKTsKdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LnNlYXJjaGVzIiwgZmFsc2UpOwovKiAwODA1OiBkaXNhYmxlIGxvY2F0aW9uIGJhciBtYWtpbmcgc3BlY3VsYXRpdmUgY29ubmVjdGlvbnMgW0ZGNTYrXQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xMzQ4Mjc1ICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zcGVjdWxhdGl2ZUNvbm5lY3QuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDgwNjogZGlzYWJsZSBsb2NhdGlvbiBiYXIgbGVha2luZyBzaW5nbGUgd29yZHMgdG8gYSBETlMgcHJvdmlkZXIgKiphZnRlciBzZWFyY2hpbmcqKiBbRkY3OCtdCiAqIDA9bmV2ZXIgcmVzb2x2ZSwgMT11c2UgaGV1cmlzdGljcywgMj1hbHdheXMgcmVzb2x2ZQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNjQyNjIzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5kbnNSZXNvbHZlU2luZ2xlV29yZHNBZnRlclNlYXJjaCIsIDApOyAvLyBbREVGQVVMVDogMCBGRjEwNCtdCi8qIDA4MDc6IGRpc2FibGUgbG9jYXRpb24gYmFyIGNvbnRleHR1YWwgc3VnZ2VzdGlvbnMgW0ZGOTIrXQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkFkZHJlc3MgQmFyPlN1Z2dlc3Rpb25zIGZyb20uLi4KICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9kYXRhLzIwMjEvMDkvMTUvZGF0YS1hbmQtZmlyZWZveC1zdWdnZXN0LyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc3VnZ2VzdC5xdWlja3N1Z2dlc3Qubm9uc3BvbnNvcmVkIiwgZmFsc2UpOyAvLyBbRkY5NStdCnVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc3VnZ2VzdC5xdWlja3N1Z2dlc3Quc3BvbnNvcmVkIiwgZmFsc2UpOwovKiAwODA4OiBkaXNhYmxlIHRhYi10by1zZWFyY2ggW0ZGODUrXQogKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIGV4Y2x1ZGUgb24gYSBwZXItZW5naW5lIGJhc2lzIGJ5IHVuY2hlY2tpbmcgdGhlbSBpbiBPcHRpb25zPlNlYXJjaAogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkFkZHJlc3MgQmFyPldoZW4gdXNpbmcgdGhlIGFkZHJlc3MgYmFyLCBzdWdnZXN0PlNlYXJjaCBlbmdpbmVzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LmVuZ2luZXMiLCBmYWxzZSk7Ci8qIDA4MTA6IGRpc2FibGUgc2VhcmNoIGFuZCBmb3JtIGhpc3RvcnkKICogW1NFVFVQLVdFQl0gQmUgYXdhcmUgdGhhdCBhdXRvY29tcGxldGUgZm9ybSBkYXRhIGNhbiBiZSByZWFkIGJ5IHRoaXJkIHBhcnRpZXMgWzFdWzJdCiAqIFtOT1RFXSBXZSBhbHNvIGNsZWFyIGZvcm1kYXRhIG9uIGV4aXQgKDI4MTEpCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+SGlzdG9yeT5DdXN0b20gU2V0dGluZ3M+UmVtZW1iZXIgc2VhcmNoIGFuZCBmb3JtIGhpc3RvcnkKICogWzFdIGh0dHBzOi8vYmxvZy5taW5kZWRzZWN1cml0eS5jb20vMjAxMS8xMC9hdXRvY29tcGxldGVhZ2Fpbi5odG1sCiAqIFsyXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzM4MTY4MSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5mb3JtZmlsbC5lbmFibGUiLCBmYWxzZSk7Ci8qIDA4MjA6IGRpc2FibGUgY29sb3Jpbmcgb2YgdmlzaXRlZCBsaW5rcwogKiBbU0VUVVAtSEFSREVOXSBCdWxrIHJhcGlkIGhpc3Rvcnkgc25pZmZpbmcgd2FzIG1pdGlnYXRlZCBpbiAyMDEwIFsxXVsyXS4gU2xvd2VyIGFuZCBtb3JlIGV4cGVuc2l2ZQogKiByZWRyYXcgdGltaW5nIGF0dGFja3Mgd2VyZSBsYXJnZWx5IG1pdGlnYXRlZCBpbiBGRjc3KyBbM10uIFVzaW5nIFJGUCAoNDUwMSkgZnVydGhlciBoYW1wZXJzIHRpbWluZwogKiBhdHRhY2tzLiBEb24ndCBmb3JnZXQgY2xlYXJpbmcgaGlzdG9yeSBvbiBleGl0ICgyODExKS4gSG93ZXZlciwgc29jaWFsIGVuZ2luZWVyaW5nIFsyI2xpbWl0c11bNF1bNV0KICogYW5kIGFkdmFuY2VkIHRhcmdldGVkIHRpbWluZyBhdHRhY2tzIGNvdWxkIHN0aWxsIHByb2R1Y2UgdXNhYmxlIHJlc3VsdHMKICogWzFdIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0NTUy9Qcml2YWN5X2FuZF90aGVfOnZpc2l0ZWRfc2VsZWN0b3IKICogWzJdIGh0dHBzOi8vZGJhcm9uLm9yZy9tb3ppbGxhL3Zpc2l0ZWQtcHJpdmFjeQogKiBbM10gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNjMyNzY1CiAqIFs0XSBodHRwczovL2VhcnRobG5nLmdpdGh1Yi5pby90ZXN0cGFnZXMvdmlzaXRlZF9saW5rcy5odG1sIChzZWUgZ2l0aHViIHdpa2kgQVBQRU5ESVggQSBvbiBob3cgdG8gdXNlKQogKiBbNV0gaHR0cHM6Ly9sY2FtdHVmLmJsb2dzcG90LmNvbS8yMDE2LzA4L2Nzcy1taXgtYmxlbmQtbW9kZS1pcy1iYWQtZm9yLWtlZXBpbmcuaHRtbCAqKiovCiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LmNzcy52aXNpdGVkX2xpbmtzX2VuYWJsZWQiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDA5MDBdOiBQQVNTV09SRFMKICAgWzFdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi91c2UtcHJpbWFyeS1wYXNzd29yZC1wcm90ZWN0LXN0b3JlZC1sb2dpbnMtYW5kLXBhcwoqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA5MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgZXhwaXJlZCEiKTsKLyogMDkwMzogZGlzYWJsZSBhdXRvLWZpbGxpbmcgdXNlcm5hbWUgJiBwYXNzd29yZCBmb3JtIGZpZWxkcwogKiBjYW4gbGVhayBpbiBjcm9zcy1zaXRlIGZvcm1zICphbmQqIGJlIHNwb29mZWQKICogW05PVEVdIFVzZXJuYW1lICYgcGFzc3dvcmQgaXMgc3RpbGwgYXZhaWxhYmxlIHdoZW4geW91IGVudGVyIHRoZSBmaWVsZAogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkxvZ2lucyBhbmQgUGFzc3dvcmRzPkF1dG9maWxsIGxvZ2lucyBhbmQgcGFzc3dvcmRzCiAqIFsxXSBodHRwczovL2ZyZWVkb20tdG8tdGlua2VyLmNvbS8yMDE3LzEyLzI3L25vLWJvdW5kYXJpZXMtZm9yLXVzZXItaWRlbnRpdGllcy13ZWItdHJhY2tlcnMtZXhwbG9pdC1icm93c2VyLWxvZ2luLW1hbmFnZXJzLwogKiBbMl0gaHR0cHM6Ly9ob21lcy5lc2F0Lmt1bGV1dmVuLmJlL35hc2Vub2wvbGVha3ktZm9ybXMvICoqKi8KdXNlcl9wcmVmKCJzaWdub24uYXV0b2ZpbGxGb3JtcyIsIGZhbHNlKTsKLyogMDkwNDogZGlzYWJsZSBmb3JtbGVzcyBsb2dpbiBjYXB0dXJlIGZvciBQYXNzd29yZCBNYW5hZ2VyIFtGRjUxK10gKioqLwp1c2VyX3ByZWYoInNpZ25vbi5mb3JtbGVzc0NhcHR1cmUuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDkwNTogbGltaXQgKG9yIGRpc2FibGUpIEhUVFAgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZGlhbG9ncyB0cmlnZ2VyZWQgYnkgc3ViLXJlc291cmNlcyBbRkY0MStdCiAqIGhhcmRlbnMgYWdhaW5zdCBwb3RlbnRpYWwgY3JlZGVudGlhbHMgcGhpc2hpbmcKICogMCA9IGRvbid0IGFsbG93IHN1Yi1yZXNvdXJjZXMgdG8gb3BlbiBIVFRQIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGRpYWxvZ3MKICogMSA9IGRvbid0IGFsbG93IGNyb3NzLW9yaWdpbiBzdWItcmVzb3VyY2VzIHRvIG9wZW4gSFRUUCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBkaWFsb2dzCiAqIDIgPSBhbGxvdyBzdWItcmVzb3VyY2VzIHRvIG9wZW4gSFRUUCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBkaWFsb2dzIChkZWZhdWx0KSAqKiovCnVzZXJfcHJlZigibmV0d29yay5hdXRoLnN1YnJlc291cmNlLWh0dHAtYXV0aC1hbGxvdyIsIDEpOwovKiAwOTA2OiBlbmZvcmNlIG5vIGF1dG9tYXRpYyBhdXRoZW50aWNhdGlvbiBvbiBNaWNyb3NvZnQgc2l0ZXMgW0ZGOTErXSBbV0lORE9XUyAxMCtdCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+TG9naW5zIGFuZCBQYXNzd29yZHM+QWxsb3cgV2luZG93cyBzaW5nbGUgc2lnbi1vbiBmb3IuLi4KICogWzFdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi93aW5kb3dzLXNzbyAqKiovCiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5odHRwLndpbmRvd3Mtc3NvLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KCi8qKiogW1NFQ1RJT04gMTAwMF06IERJU0sgQVZPSURBTkNFICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTAwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBnb25lIHRvIG1lZXQgJ2lzIG1ha2VyISIpOwovKiAxMDAxOiBkaXNhYmxlIGRpc2sgY2FjaGUKICogW1NFVFVQLUNIUk9NRV0gSWYgeW91IHRoaW5rIGRpc2sgY2FjaGUgaGVscHMgcGVyZiwgdGhlbiBmZWVsIGZyZWUgdG8gb3ZlcnJpZGUgdGhpcwogKiBbTk9URV0gV2UgYWxzbyBjbGVhciBjYWNoZSBvbiBleGl0ICgyODExKSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5jYWNoZS5kaXNrLmVuYWJsZSIsIGZhbHNlKTsKLyogMTAwMjogZGlzYWJsZSBtZWRpYSBjYWNoZSBmcm9tIHdyaXRpbmcgdG8gZGlzayBpbiBQcml2YXRlIEJyb3dzaW5nCiAqIFtOT1RFXSBNU0UgKE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zKSBhcmUgYWxyZWFkeSBzdG9yZWQgaW4tbWVtb3J5IGluIFBCICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnByaXZhdGVicm93c2luZy5mb3JjZU1lZGlhTWVtb3J5Q2FjaGUiLCB0cnVlKTsgLy8gW0ZGNzUrXQp1c2VyX3ByZWYoIm1lZGlhLm1lbW9yeV9jYWNoZV9tYXhfc2l6ZSIsIDY1NTM2KTsKLyogMTAwMzogZGlzYWJsZSBzdG9yaW5nIGV4dHJhIHNlc3Npb24gZGF0YSBbU0VUVVAtQ0hST01FXQogKiBkZWZpbmUgb24gd2hpY2ggc2l0ZXMgdG8gc2F2ZSBleHRyYSBzZXNzaW9uIGRhdGEgc3VjaCBhcyBmb3JtIGNvbnRlbnQsIGNvb2tpZXMgYW5kIFBPU1QgZGF0YQogKiAwPWV2ZXJ5d2hlcmUsIDE9dW5lbmNyeXB0ZWQgc2l0ZXMsIDI9bm93aGVyZSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zZXNzaW9uc3RvcmUucHJpdmFjeV9sZXZlbCIsIDIpOwovKiAxMDA1OiBkaXNhYmxlIGF1dG9tYXRpYyBGaXJlZm94IHN0YXJ0IGFuZCBzZXNzaW9uIHJlc3RvcmUgYWZ0ZXIgcmVib290IFtGRjYyK10gW1dJTkRPV1NdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzYwMzkwMyAqKiovCnVzZXJfcHJlZigidG9vbGtpdC53aW5SZWdpc3RlckFwcGxpY2F0aW9uUmVzdGFydCIsIGZhbHNlKTsKLyogMTAwNjogZGlzYWJsZSBmYXZpY29ucyBpbiBzaG9ydGN1dHMKICogVVJMIHNob3J0Y3V0cyB1c2UgYSBjYWNoZWQgcmFuZG9tbHkgbmFtZWQgLmljbyBmaWxlIHdoaWNoIGlzIHN0b3JlZCBpbiB5b3VyCiAqIHByb2ZpbGUvc2hvcnRjdXRDYWNoZSBkaXJlY3RvcnkuIFRoZSAuaWNvIHJlbWFpbnMgYWZ0ZXIgdGhlIHNob3J0Y3V0IGlzIGRlbGV0ZWQKICogSWYgc2V0IHRvIGZhbHNlIHRoZW4gdGhlIHNob3J0Y3V0cyB1c2UgYSBnZW5lcmljIEZpcmVmb3ggaWNvbiAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zaGVsbC5zaG9ydGN1dEZhdmljb25zIiwgZmFsc2UpOwoKLyoqKiBbU0VDVElPTiAxMjAwXTogSFRUUFMgKFNTTC9UTFMgLyBPQ1NQIC8gQ0VSVFMgLyBIUEtQKQogICBZb3VyIGNpcGhlciBhbmQgb3RoZXIgc2V0dGluZ3MgY2FuIGJlIHVzZWQgaW4gc2VydmVyIHNpZGUgZmluZ2VycHJpbnRpbmcKICAgW1RFU1RdIGh0dHBzOi8vd3d3LnNzbGxhYnMuY29tL3NzbHRlc3Qvdmlld015Q2xpZW50Lmh0bWwKICAgW1RFU1RdIGh0dHBzOi8vYnJvd3NlcmxlYWtzLmNvbS9zc2wKICAgW1RFU1RdIGh0dHBzOi8vamEzZXIuY29tLwogICBbMV0gaHR0cHM6Ly93d3cuc2VjdXJpdHlhcnR3b3JrLmVzLzIwMTcvMDIvMDIvdGxzLWNsaWVudC1maW5nZXJwcmludGluZy13aXRoLWJyby8KKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICIxMjAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGEgc3RpZmYhIik7Ci8qKiBTU0wgKFNlY3VyZSBTb2NrZXRzIExheWVyKSAvIFRMUyAoVHJhbnNwb3J0IExheWVyIFNlY3VyaXR5KSAqKiovCi8qIDEyMDE6IHJlcXVpcmUgc2FmZSBuZWdvdGlhdGlvbgogKiBCbG9ja3MgY29ubmVjdGlvbnMgdG8gc2VydmVycyB0aGF0IGRvbid0IHN1cHBvcnQgUkZDIDU3NDYgWzJdIGFzIHRoZXkncmUgcG90ZW50aWFsbHkgdnVsbmVyYWJsZSB0byBhCiAqIE1pVE0gYXR0YWNrIFszXS4gQSBzZXJ2ZXIgd2l0aG91dCBSRkMgNTc0NiBjYW4gYmUgc2FmZSBmcm9tIHRoZSBhdHRhY2sgaWYgaXQgZGlzYWJsZXMgcmVuZWdvdGlhdGlvbnMKICogYnV0IHRoZSBwcm9ibGVtIGlzIHRoYXQgdGhlIGJyb3dzZXIgY2FuJ3Qga25vdyB0aGF0LiBTZXR0aW5nIHRoaXMgcHJlZiB0byB0cnVlIGlzIHRoZSBvbmx5IHdheSBmb3IgdGhlCiAqIGJyb3dzZXIgdG8gZW5zdXJlIHRoZXJlIHdpbGwgYmUgbm8gdW5zYWZlIHJlbmVnb3RpYXRpb25zIG9uIHRoZSBjaGFubmVsIGJldHdlZW4gdGhlIGJyb3dzZXIgYW5kIHRoZSBzZXJ2ZXIKICogW1NFVFVQLVdFQl0gU1NMX0VSUk9SX1VOU0FGRV9ORUdPVElBVElPTjogaXMgaXQgd29ydGggb3ZlcnJpZGluZyB0aGlzIGZvciB0aGF0IG9uZSBzaXRlPwogKiBbU1RBVFNdIFNTTCBMYWJzIChGZWIgMjAyMykgcmVwb3J0cyBvdmVyIDk5LjMlIG9mIHRvcCBzaXRlcyBoYXZlIHNlY3VyZSByZW5lZ290aWF0aW9uIFs0XQogKiBbMV0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5OlJlbmVnb3RpYXRpb24KICogWzJdIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNTc0NgogKiBbM10gaHR0cHM6Ly9jdmUubWl0cmUub3JnL2NnaS1iaW4vY3ZlbmFtZS5jZ2k/bmFtZT1DVkUtMjAwOS0zNTU1CiAqIFs0XSBodHRwczovL3d3dy5zc2xsYWJzLmNvbS9zc2wtcHVsc2UvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wucmVxdWlyZV9zYWZlX25lZ290aWF0aW9uIiwgdHJ1ZSk7Ci8qIDEyMDY6IGRpc2FibGUgVExTMS4zIDAtUlRUIChyb3VuZC10cmlwIHRpbWUpIFtGRjUxK10KICogVGhpcyBkYXRhIGlzIG5vdCBmb3J3YXJkIHNlY3JldCwgYXMgaXQgaXMgZW5jcnlwdGVkIHNvbGVseSB1bmRlciBrZXlzIGRlcml2ZWQgdXNpbmcKICogdGhlIG9mZmVyZWQgUFNLLiBUaGVyZSBhcmUgbm8gZ3VhcmFudGVlcyBvZiBub24tcmVwbGF5IGJldHdlZW4gY29ubmVjdGlvbnMKICogWzFdIGh0dHBzOi8vZ2l0aHViLmNvbS90bHN3Zy90bHMxMy1zcGVjL2lzc3Vlcy8xMDAxCiAqIFsyXSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTAwMS5odG1sI25hbWUtcmVwbGF5LWF0dGFja3Mtd2l0aC0wLXJ0dAogKiBbM10gaHR0cHM6Ly9ibG9nLmNsb3VkZmxhcmUuY29tL3Rscy0xLTMtb3ZlcnZpZXctYW5kLXEtYW5kLWEvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS50bHMuZW5hYmxlXzBydHRfZGF0YSIsIGZhbHNlKTsKCi8qKiBPQ1NQIChPbmxpbmUgQ2VydGlmaWNhdGUgU3RhdHVzIFByb3RvY29sKQogICBbMV0gaHR0cHM6Ly9zY290dGhlbG1lLmNvLnVrL3Jldm9jYXRpb24taXMtYnJva2VuLwogICBbMl0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL3NlY3VyaXR5LzIwMTMvMDcvMjkvb2NzcC1zdGFwbGluZy1pbi1maXJlZm94LwoqKiovCi8qIDEyMTE6IGVuZm9yY2UgT0NTUCBmZXRjaGluZyB0byBjb25maXJtIGN1cnJlbnQgdmFsaWRpdHkgb2YgY2VydGlmaWNhdGVzCiAqIDA9ZGlzYWJsZWQsIDE9ZW5hYmxlZCAoZGVmYXVsdCksIDI9ZW5hYmxlZCBmb3IgRVYgY2VydGlmaWNhdGVzIG9ubHkKICogT0NTUCAobm9uLXN0YXBsZWQpIGxlYWtzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzaXRlcyB5b3UgdmlzaXQgdG8gdGhlIENBIChjZXJ0IGF1dGhvcml0eSkKICogSXQncyBhIHRyYWRlLW9mZiBiZXR3ZWVuIHNlY3VyaXR5IChjaGVja2luZykgYW5kIHByaXZhY3kgKGxlYWtpbmcgaW5mbyB0byB0aGUgQ0EpCiAqIFtOT1RFXSBUaGlzIHByZWYgb25seSBjb250cm9scyBPQ1NQIGZldGNoaW5nIGFuZCBkb2VzIG5vdCBhZmZlY3QgT0NTUCBzdGFwbGluZwogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PlNlY3VyaXR5PkNlcnRpZmljYXRlcz5RdWVyeSBPQ1NQIHJlc3BvbmRlciBzZXJ2ZXJzLi4uCiAqIFsxXSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PY3NwICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5PQ1NQLmVuYWJsZWQiLCAxKTsgLy8gW0RFRkFVTFQ6IDFdCi8qIDEyMTI6IHNldCBPQ1NQIGZldGNoIGZhaWx1cmVzIChub24tc3RhcGxlZCwgc2VlIDEyMTEpIHRvIGhhcmQtZmFpbAogKiBbU0VUVVAtV0VCXSBTRUNfRVJST1JfT0NTUF9TRVJWRVJfRVJST1IKICogV2hlbiBhIENBIGNhbm5vdCBiZSByZWFjaGVkIHRvIHZhbGlkYXRlIGEgY2VydCwgRmlyZWZveCBqdXN0IGNvbnRpbnVlcyB0aGUgY29ubmVjdGlvbiAoPXNvZnQtZmFpbCkKICogU2V0dGluZyB0aGlzIHByZWYgdG8gdHJ1ZSB0ZWxscyBGaXJlZm94IHRvIGluc3RlYWQgdGVybWluYXRlIHRoZSBjb25uZWN0aW9uICg9aGFyZC1mYWlsKQogKiBJdCBpcyBwb2ludGxlc3MgdG8gc29mdC1mYWlsIHdoZW4gYW4gT0NTUCBmZXRjaCBmYWlsczogeW91IGNhbm5vdCBjb25maXJtIGEgY2VydCBpcyBzdGlsbCB2YWxpZCAoaXQKICogY291bGQgaGF2ZSBiZWVuIHJldm9rZWQpIGFuZC9vciB5b3UgY291bGQgYmUgdW5kZXIgYXR0YWNrIChlLmcuIG1hbGljaW91cyBibG9ja2luZyBvZiBPQ1NQIHNlcnZlcnMpCiAqIFsxXSBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvc2VjdXJpdHkvMjAxMy8wNy8yOS9vY3NwLXN0YXBsaW5nLWluLWZpcmVmb3gvCiAqIFsyXSBodHRwczovL3d3dy5pbXBlcmlhbHZpb2xldC5vcmcvMjAxNC8wNC8xOS9yZXZjaGVja2luZy5odG1sICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5PQ1NQLnJlcXVpcmUiLCB0cnVlKTsKCi8qKiBDRVJUUyAvIEhQS1AgKEhUVFAgUHVibGljIEtleSBQaW5uaW5nKSAqKiovCi8qIDEyMjM6IGVuYWJsZSBzdHJpY3QgUEtQIChQdWJsaWMgS2V5IFBpbm5pbmcpCiAqIDA9ZGlzYWJsZWQsIDE9YWxsb3cgdXNlciBNaVRNIChkZWZhdWx0OyBzdWNoIGFzIHlvdXIgYW50aXZpcnVzKSwgMj1zdHJpY3QKICogW1NFVFVQLVdFQl0gTU9aSUxMQV9QS0lYX0VSUk9SX0tFWV9QSU5OSU5HX0ZBSUxVUkUgKioqLwp1c2VyX3ByZWYoInNlY3VyaXR5LmNlcnRfcGlubmluZy5lbmZvcmNlbWVudF9sZXZlbCIsIDIpOwovKiAxMjI0OiBlbmFibGUgQ1JMaXRlIFtGRjczK10KICogMCA9IGRpc2FibGVkCiAqIDEgPSBjb25zdWx0IENSTGl0ZSBidXQgb25seSBjb2xsZWN0IHRlbGVtZXRyeQogKiAyID0gY29uc3VsdCBDUkxpdGUgYW5kIGVuZm9yY2UgYm90aCAiUmV2b2tlZCIgYW5kICJOb3QgUmV2b2tlZCIgcmVzdWx0cwogKiAzID0gY29uc3VsdCBDUkxpdGUgYW5kIGVuZm9yY2UgIk5vdCBSZXZva2VkIiByZXN1bHRzLCBidXQgZGVmZXIgdG8gT0NTUCBmb3IgIlJldm9rZWQiIChGRjk5KywgZGVmYXVsdCBGRjEwMCspCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL2J1Z2xpc3QuY2dpP2J1Z19pZD0xNDI5ODAwLDE2NzA5ODUsMTc1MzA3MQogKiBbMl0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL3NlY3VyaXR5L3RhZy9jcmxpdGUvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5yZW1vdGVfc2V0dGluZ3MuY3JsaXRlX2ZpbHRlcnMuZW5hYmxlZCIsIHRydWUpOwp1c2VyX3ByZWYoInNlY3VyaXR5LnBraS5jcmxpdGVfbW9kZSIsIDIpOwoKLyoqIE1JWEVEIENPTlRFTlQgKioqLwovKiAxMjQxOiBkaXNhYmxlIGluc2VjdXJlIHBhc3NpdmUgY29udGVudCAoc3VjaCBhcyBpbWFnZXMpIG9uIGh0dHBzIHBhZ2VzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJzZWN1cml0eS5taXhlZF9jb250ZW50LmJsb2NrX2Rpc3BsYXlfY29udGVudCIsIHRydWUpOyAvLyBEZWZlbnNlLWluLWRlcHRoIChzZWUgMTI0NCkKLyogMTI0NDogZW5hYmxlIEhUVFBTLU9ubHkgbW9kZSBpbiBhbGwgd2luZG93cyBbRkY3NitdCiAqIFdoZW4gdGhlIHRvcC1sZXZlbCBpcyBIVFRQUywgaW5zZWN1cmUgc3VicmVzb3VyY2VzIGFyZSBhbHNvIHVwZ3JhZGVkIChzaWxlbnQgZmFpbCkKICogW1NFVFRJTkddIHRvIGFkZCBzaXRlIGV4Y2VwdGlvbnM6IFBhZGxvY2s+SFRUUFMtT25seSBtb2RlPk9uIChhZnRlciAiQ29udGludWUgdG8gSFRUUCBTaXRlIikKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5IVFRQUy1Pbmx5IE1vZGUgKGFuZCBtYW5hZ2UgZXhjZXB0aW9ucykKICogW1RFU1RdIGh0dHA6Ly9leGFtcGxlLmNvbSBbdXBncmFkZV0KICogW1RFU1RdIGh0dHA6Ly9odHRwZm9yZXZlci5jb20vIHwgaHR0cDovL2h0dHAucmlwIFtubyB1cGdyYWRlXSAqKiovCnVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZSIsIHRydWUpOyAvLyBbRkY3NitdCiAgIC8vIHVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZV9wYm0iLCB0cnVlKTsgLy8gW0ZGODArXQovKiAxMjQ1OiBlbmFibGUgSFRUUFMtT25seSBtb2RlIGZvciBsb2NhbCByZXNvdXJjZXMgW0ZGNzcrXSAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZS51cGdyYWRlX2xvY2FsIiwgdHJ1ZSk7Ci8qIDEyNDY6IGRpc2FibGUgSFRUUCBiYWNrZ3JvdW5kIHJlcXVlc3RzIFtGRjgyK10KICogV2hlbiBhdHRlbXB0aW5nIHRvIHVwZ3JhZGUsIGlmIHRoZSBzZXJ2ZXIgZG9lc24ndCByZXNwb25kIHdpdGhpbiAzIHNlY29uZHMsIEZpcmVmb3ggc2VuZHMKICogYSB0b3AtbGV2ZWwgSFRUUCByZXF1ZXN0IHdpdGhvdXQgcGF0aCBpbiBvcmRlciB0byBjaGVjayBpZiB0aGUgc2VydmVyIHN1cHBvcnRzIEhUVFBTIG9yIG5vdAogKiBUaGlzIGlzIGRvbmUgdG8gYXZvaWQgd2FpdGluZyBmb3IgYSB0aW1lb3V0IHdoaWNoIHRha2VzIDkwIHNlY29uZHMKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvYnVnbGlzdC5jZ2k/YnVnX2lkPTE2NDIzODcsMTY2MDk0NSAqKiovCnVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZV9zZW5kX2h0dHBfYmFja2dyb3VuZF9yZXF1ZXN0IiwgZmFsc2UpOwoKLyoqIFVJIChVc2VyIEludGVyZmFjZSkgKioqLwovKiAxMjcwOiBkaXNwbGF5IHdhcm5pbmcgb24gdGhlIHBhZGxvY2sgZm9yICJicm9rZW4gc2VjdXJpdHkiIChpZiAxMjAxIGlzIGZhbHNlKQogKiBCdWc6IHdhcm5pbmcgcGFkbG9jayBub3QgaW5kaWNhdGVkIGZvciBzdWJyZXNvdXJjZXMgb24gYSBzZWN1cmUgcGFnZSEgWzJdCiAqIFsxXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvU2VjdXJpdHk6UmVuZWdvdGlhdGlvbgogKiBbMl0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xMzUzNzA1ICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wudHJlYXRfdW5zYWZlX25lZ290aWF0aW9uX2FzX2Jyb2tlbiIsIHRydWUpOwovKiAxMjcyOiBkaXNwbGF5IGFkdmFuY2VkIGluZm9ybWF0aW9uIG9uIEluc2VjdXJlIENvbm5lY3Rpb24gd2FybmluZyBwYWdlcwogKiBvbmx5IHdvcmtzIHdoZW4gaXQncyBwb3NzaWJsZSB0byBhZGQgYW4gZXhjZXB0aW9uCiAqIGkuZS4gaXQgZG9lc24ndCB3b3JrIGZvciBIU1RTIGRpc2NyZXBhbmNpZXMgKGh0dHBzOi8vc3ViZG9tYWluLnByZWxvYWRlZC1oc3RzLmJhZHNzbC5jb20vKQogKiBbVEVTVF0gaHR0cHM6Ly9leHBpcmVkLmJhZHNzbC5jb20vICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnh1bC5lcnJvcl9wYWdlcy5leHBlcnRfYmFkX2NlcnQiLCB0cnVlKTsKCi8qKiogW1NFQ1RJT04gMTQwMF06IEZPTlRTICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTQwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBiZXJlZnQgb2YgbGlmZSEiKTsKLyogMTQwMjogbGltaXQgZm9udCB2aXNpYmlsaXR5IChXaW5kb3dzLCBNYWMsIHNvbWUgTGludXgpIFtGRjk0K10KICogVXNlcyBoYXJkY29kZWQgbGlzdHMgd2l0aCB0d28gcGFydHM6IGtCYXNlRm9udHMgKyBrTGFuZ1BhY2tGb250cyBbMV0sIGJ1bmRsZWQgZm9udHMgYXJlIGF1dG8tYWxsb3dlZAogKiBJbiBub3JtYWwgd2luZG93czogdXNlcyB0aGUgZmlyc3QgYXBwbGljYWJsZTogUkZQIG92ZXIgVFAgb3ZlciBTdGFuZGFyZAogKiBJbiBQcml2YXRlIEJyb3dzaW5nIHdpbmRvd3M6IHVzZXMgdGhlIG1vc3QgcmVzdHJpY3RpdmUgYmV0d2VlbiBub3JtYWwgYW5kIHByaXZhdGUKICogMT1vbmx5IGJhc2Ugc3lzdGVtIGZvbnRzLCAyPWFsc28gZm9udHMgZnJvbSBvcHRpb25hbCBsYW5ndWFnZSBwYWNrcywgMz1hbHNvIHVzZXItaW5zdGFsbGVkIGZvbnRzCiAqIFsxXSBodHRwczovL3NlYXJjaGZveC5vcmcvbW96aWxsYS1jZW50cmFsL3NlYXJjaD9wYXRoPVN0YW5kYXJkRm9udHMqLmluYyAqKiovCiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LmNzcy5mb250LXZpc2liaWxpdHkucHJpdmF0ZSIsIDEpOwogICAvLyB1c2VyX3ByZWYoImxheW91dC5jc3MuZm9udC12aXNpYmlsaXR5LnN0YW5kYXJkIiwgMSk7CiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LmNzcy5mb250LXZpc2liaWxpdHkudHJhY2tpbmdwcm90ZWN0aW9uIiwgMSk7CgovKioqIFtTRUNUSU9OIDE2MDBdOiBSRUZFUkVSUwogICAgICAgICAgICAgICAgICBmdWxsIFVSSTogaHR0cHM6Ly9leGFtcGxlLmNvbTo4ODg4L2Zvby9iYXIuaHRtbD9pZD0xMjM0CiAgICAgc2NoZW1lK2hvc3QrcG9ydCtwYXRoOiBodHRwczovL2V4YW1wbGUuY29tOjg4ODgvZm9vL2Jhci5odG1sCiAgICAgICAgICBzY2hlbWUraG9zdCtwb3J0OiBodHRwczovL2V4YW1wbGUuY29tOjg4ODgKICAgWzFdIGh0dHBzOi8vZmVlZGluZy5jbG91ZC5nZWVrLm56L3Bvc3RzL3R3ZWFraW5nLXJlZmVycmVyLWZvci1wcml2YWN5LWluLWZpcmVmb3gvCioqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTYwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QgcmVzdHMgaW4gcGVhY2UhIik7Ci8qIDE2MDI6IGNvbnRyb2wgdGhlIGFtb3VudCBvZiBjcm9zcy1vcmlnaW4gaW5mb3JtYXRpb24gdG8gc2VuZCBbRkY1MitdCiAqIDA9c2VuZCBmdWxsIFVSSSAoZGVmYXVsdCksIDE9c2NoZW1lK2hvc3QrcG9ydCtwYXRoLCAyPXNjaGVtZStob3N0K3BvcnQgKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5yZWZlcmVyLlhPcmlnaW5UcmltbWluZ1BvbGljeSIsIDIpOwoKLyoqKiBbU0VDVElPTiAxNzAwXTogQ09OVEFJTkVSUyAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjE3MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgYml0IHRoZSBkdXN0ISIpOwovKiAxNzAxOiBlbmFibGUgQ29udGFpbmVyIFRhYnMgYW5kIGl0cyBVSSBzZXR0aW5nIFtGRjUwK10KICogW1NFVFRJTkddIEdlbmVyYWw+VGFicz5FbmFibGUgQ29udGFpbmVyIFRhYnMKICogaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L0NvbnRleHR1YWxfSWRlbnRpdHlfUHJvamVjdC9Db250YWluZXJzICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LnVzZXJDb250ZXh0LmVuYWJsZWQiLCB0cnVlKTsKdXNlcl9wcmVmKCJwcml2YWN5LnVzZXJDb250ZXh0LnVpLmVuYWJsZWQiLCB0cnVlKTsKLyogMTcwMjogc2V0IGJlaGF2aW9yIG9uICIrIFRhYiIgYnV0dG9uIHRvIGRpc3BsYXkgY29udGFpbmVyIG1lbnUgb24gbGVmdCBjbGljayBbRkY3NCtdCiAqIFtOT1RFXSBUaGUgbWVudSBpcyBhbHdheXMgc2hvd24gb24gbG9uZyBwcmVzcyBhbmQgcmlnaHQgY2xpY2sKICogW1NFVFRJTkddIEdlbmVyYWw+VGFicz5FbmFibGUgQ29udGFpbmVyIFRhYnM+U2V0dGluZ3M+U2VsZWN0IGEgY29udGFpbmVyIGZvciBlYWNoIG5ldyB0YWIgKioqLwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kudXNlckNvbnRleHQubmV3VGFiQ29udGFpbmVyT25MZWZ0Q2xpY2suZW5hYmxlZCIsIHRydWUpOwoKLyoqKiBbU0VDVElPTiAyMDAwXTogUExVR0lOUyAvIE1FRElBIC8gV0VCUlRDICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMjAwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBzbnVmZmVkIGl0ISIpOwovKiAyMDAyOiBmb3JjZSBXZWJSVEMgaW5zaWRlIHRoZSBwcm94eSBbRkY3MCtdICoqKi8KdXNlcl9wcmVmKCJtZWRpYS5wZWVyY29ubmVjdGlvbi5pY2UucHJveHlfb25seV9pZl9iZWhpbmRfcHJveHkiLCB0cnVlKTsKLyogMjAwMzogZm9yY2UgYSBzaW5nbGUgbmV0d29yayBpbnRlcmZhY2UgZm9yIElDRSBjYW5kaWRhdGVzIGdlbmVyYXRpb24gW0ZGNDIrXQogKiBXaGVuIHVzaW5nIGEgc3lzdGVtLXdpZGUgcHJveHksIGl0IHVzZXMgdGhlIHByb3h5IGludGVyZmFjZQogKiBbMV0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1JUQ0ljZUNhbmRpZGF0ZQogKiBbMl0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL01lZGlhL1dlYlJUQy9Qcml2YWN5ICoqKi8KdXNlcl9wcmVmKCJtZWRpYS5wZWVyY29ubmVjdGlvbi5pY2UuZGVmYXVsdF9hZGRyZXNzX29ubHkiLCB0cnVlKTsKLyogMjAwNDogZm9yY2UgZXhjbHVzaW9uIG9mIHByaXZhdGUgSVBzIGZyb20gSUNFIGNhbmRpZGF0ZXMgW0ZGNTErXQogKiBbU0VUVVAtSEFSREVOXSBUaGlzIHdpbGwgcHJvdGVjdCB5b3VyIHByaXZhdGUgSVAgZXZlbiBpbiBUUlVTVEVEIHNjZW5hcmlvcyBhZnRlciB5b3UKICogZ3JhbnQgZGV2aWNlIGFjY2VzcywgYnV0IG9mdGVuIHJlc3VsdHMgaW4gYnJlYWthZ2Ugb24gdmlkZW8tY29uZmVyZW5jaW5nIHBsYXRmb3JtcyAqKiovCiAgIC8vIHVzZXJfcHJlZigibWVkaWEucGVlcmNvbm5lY3Rpb24uaWNlLm5vX2hvc3QiLCB0cnVlKTsKLyogMjAyMDogZGlzYWJsZSBHTVAgKEdlY2tvIE1lZGlhIFBsdWdpbnMpCiAqIFsxXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvR2Vja29NZWRpYVBsdWdpbnMgKioqLwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLmdtcC1wcm92aWRlci5lbmFibGVkIiwgZmFsc2UpOwoKLyoqKiBbU0VDVElPTiAyNDAwXTogRE9NIChET0NVTUVOVCBPQkpFQ1QgTU9ERUwpICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMjQwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBraWNrZWQgdGhlIGJ1Y2tldCEiKTsKLyogMjQwMjogcHJldmVudCBzY3JpcHRzIGZyb20gbW92aW5nIGFuZCByZXNpemluZyBvcGVuIHdpbmRvd3MgKioqLwp1c2VyX3ByZWYoImRvbS5kaXNhYmxlX3dpbmRvd19tb3ZlX3Jlc2l6ZSIsIHRydWUpOwoKLyoqKiBbU0VDVElPTiAyNjAwXTogTUlTQ0VMTEFORU9VUyAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjI2MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgcnVuIGRvd24gdGhlIGN1cnRhaW4hIik7Ci8qIDI2MDE6IHByZXZlbnQgYWNjZXNzaWJpbGl0eSBzZXJ2aWNlcyBmcm9tIGFjY2Vzc2luZyB5b3VyIGJyb3dzZXIgW1JFU1RBUlRdCiAqIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvYWNjZXNzaWJpbGl0eS1zZXJ2aWNlcyAqKiovCnVzZXJfcHJlZigiYWNjZXNzaWJpbGl0eS5mb3JjZV9kaXNhYmxlZCIsIDEpOwovKiAyNjAzOiByZW1vdmUgdGVtcCBmaWxlcyBvcGVuZWQgd2l0aCBhbiBleHRlcm5hbCBhcHBsaWNhdGlvbgogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8zMDI0MzMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuaGVscGVyQXBwcy5kZWxldGVUZW1wRmlsZU9uRXhpdCIsIHRydWUpOwovKiAyNjA2OiBkaXNhYmxlIFVJVG91ciBiYWNrZW5kIHNvIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0IGEgcmVtb3RlIHBhZ2UgY2FuIHVzZSBpdCAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci51aXRvdXIuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnVpdG91ci51cmwiLCAiIik7IC8vIERlZmVuc2UtaW4tZGVwdGgKLyogMjYwODogcmVzZXQgcmVtb3RlIGRlYnVnZ2luZyB0byBkaXNhYmxlZAogKiBbMV0gaHR0cHM6Ly9naXRsYWIudG9ycHJvamVjdC5vcmcvdHBvL2FwcGxpY2F0aW9ucy90b3ItYnJvd3Nlci8tL2lzc3Vlcy8xNjIyMiAqKiovCnVzZXJfcHJlZigiZGV2dG9vbHMuZGVidWdnZXIucmVtb3RlLWVuYWJsZWQiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KLyogMjYxNTogZGlzYWJsZSB3ZWJzaXRlcyBvdmVycmlkaW5nIEZpcmVmb3gncyBrZXlib2FyZCBzaG9ydGN1dHMgW0ZGNTgrXQogKiAwIChkZWZhdWx0KSBvciAxPWFsbG93LCAyPWJsb2NrCiAqIFtTRVRUSU5HXSB0byBhZGQgc2l0ZSBleGNlcHRpb25zOiBDdHJsK0k+UGVybWlzc2lvbnM+T3ZlcnJpZGUgS2V5Ym9hcmQgU2hvcnRjdXRzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5kZWZhdWx0LnNob3J0Y3V0cyIsIDIpOwovKiAyNjE2OiByZW1vdmUgc3BlY2lhbCBwZXJtaXNzaW9ucyBmb3IgY2VydGFpbiBtb3ppbGxhIGRvbWFpbnMgW0ZGMzUrXQogKiBbMV0gcmVzb3VyY2U6Ly9hcHAvZGVmYXVsdHMvcGVybWlzc2lvbnMgKioqLwp1c2VyX3ByZWYoInBlcm1pc3Npb25zLm1hbmFnZXIuZGVmYXVsdHNVcmwiLCAiIik7Ci8qIDI2MTc6IHJlbW92ZSB3ZWJjaGFubmVsIHdoaXRlbGlzdCAqKiovCnVzZXJfcHJlZigid2ViY2hhbm5lbC5hbGxvd09iamVjdC51cmxXaGl0ZWxpc3QiLCAiIik7Ci8qIDI2MTk6IHVzZSBQdW55Y29kZSBpbiBJbnRlcm5hdGlvbmFsaXplZCBEb21haW4gTmFtZXMgdG8gZWxpbWluYXRlIHBvc3NpYmxlIHNwb29maW5nCiAqIFtTRVRVUC1XRUJdIE1pZ2h0IGJlIHVuZGVzaXJhYmxlIGZvciBub24tbGF0aW4gYWxwaGFiZXQgdXNlcnMgc2luY2UgbGVnaXRpbWF0ZSBJRE4ncyBhcmUgYWxzbyBwdW55Y29kZWQKICogW1RFU1RdIGh0dHBzOi8vd3d3LnhuLS04MGFrNmFhOTJlLmNvbS8gKHd3dy5hcHBsZS5jb20pCiAqIFsxXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvSUROX0Rpc3BsYXlfQWxnb3JpdGhtCiAqIFsyXSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JRE5faG9tb2dyYXBoX2F0dGFjawogKiBbM10gaHR0cHM6Ly9jdmUubWl0cmUub3JnL2NnaS1iaW4vY3Zla2V5LmNnaT9rZXl3b3JkPXB1bnljb2RlK2ZpcmVmb3gKICogWzRdIGh0dHBzOi8vd3d3Lnh1ZG9uZ3ouY29tL2Jsb2cvMjAxNy9pZG4tcGhpc2hpbmcvICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLklETl9zaG93X3B1bnljb2RlIiwgdHJ1ZSk7Ci8qIDI2MjA6IGVuZm9yY2UgUERGSlMsIGRpc2FibGUgUERGSlMgc2NyaXB0aW5nCiAqIFRoaXMgc2V0dGluZyBjb250cm9scyBpZiB0aGUgb3B0aW9uICJEaXNwbGF5IGluIEZpcmVmb3giIGlzIGF2YWlsYWJsZSBpbiB0aGUgc2V0dGluZyBiZWxvdwogKiAgIGFuZCBieSBlZmZlY3QgY29udHJvbHMgd2hldGhlciBQREZzIGFyZSBoYW5kbGVkIGluLWJyb3dzZXIgb3IgZXh0ZXJuYWxseSAoIkFzayIgb3IgIk9wZW4gV2l0aCIpCiAqIFtXSFldIHBkZmpzIGlzIGxpZ2h0d2VpZ2h0LCBvcGVuIHNvdXJjZSwgYW5kIHNlY3VyZTogdGhlIGxhc3QgZXhwbG9pdCB3YXMgSnVuZSAyMDE1IFsxXQogKiAgIEl0IGRvZXNuJ3QgYnJlYWsgInN0YXRlIHNlcGFyYXRpb24iIG9mIGJyb3dzZXIgY29udGVudCAoYnkgbm90IHNoYXJpbmcgd2l0aCBPUywgaW5kZXBlbmRlbnQgYXBwcykuCiAqICAgSXQgbWFpbnRhaW5zIGRpc2sgYXZvaWRhbmNlIGFuZCBhcHBsaWNhdGlvbiBkYXRhIGlzb2xhdGlvbi4gSXQncyBjb252ZW5pZW50LiBZb3UgY2FuIHN0aWxsIHNhdmUgdG8gZGlzay4KICogW05PVEVdIEpTIGNhbiBzdGlsbCBmb3JjZSBhIHBkZiB0byBvcGVuIGluLWJyb3dzZXIgYnkgYnVuZGxpbmcgaXRzIG93biBjb2RlCiAqIFtTRVRVUC1DSFJPTUVdIFlvdSBtYXkgcHJlZmVyIGEgZGlmZmVyZW50IHBkZiByZWFkZXIgZm9yIHNlY3VyaXR5L3dvcmtmbG93IHJlYXNvbnMKICogW1NFVFRJTkddIEdlbmVyYWw+QXBwbGljYXRpb25zPlBvcnRhYmxlIERvY3VtZW50IEZvcm1hdCAoUERGKQogKiBbMV0gaHR0cHM6Ly9jdmUubWl0cmUub3JnL2NnaS1iaW4vY3Zla2V5LmNnaT9rZXl3b3JkPXBkZi5qcytmaXJlZm94ICoqKi8KdXNlcl9wcmVmKCJwZGZqcy5kaXNhYmxlZCIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQp1c2VyX3ByZWYoInBkZmpzLmVuYWJsZVNjcmlwdGluZyIsIGZhbHNlKTsgLy8gW0ZGODYrXQovKiAyNjIzOiBkaXNhYmxlIHBlcm1pc3Npb25zIGRlbGVnYXRpb24gW0ZGNzMrXQogKiBDdXJyZW50bHkgYXBwbGllcyB0byBjcm9zcy1vcmlnaW4gZ2VvbG9jYXRpb24sIGNhbWVyYSwgbWljIGFuZCBzY3JlZW4tc2hhcmluZwogKiBwZXJtaXNzaW9ucywgYW5kIGZ1bGxzY3JlZW4gcmVxdWVzdHMuIERpc2FibGluZyBkZWxlZ2F0aW9uIG1lYW5zIGFueSBwcm9tcHRzCiAqIGZvciB0aGVzZSB3aWxsIHNob3cvdXNlIHRoZWlyIGNvcnJlY3QgM3JkIHBhcnR5IG9yaWdpbgogKiBbMV0gaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIXRvcGljL21vemlsbGEuZGV2LnBsYXRmb3JtL0JkRk9NQXVDR1c4L2Rpc2N1c3Npb24gKioqLwp1c2VyX3ByZWYoInBlcm1pc3Npb25zLmRlbGVnYXRpb24uZW5hYmxlZCIsIGZhbHNlKTsKLyogMjYyNDogZGlzYWJsZSBtaWRkbGUgY2xpY2sgb24gbmV3IHRhYiBidXR0b24gb3BlbmluZyBVUkxzIG9yIHNlYXJjaGVzIHVzaW5nIGNsaXBib2FyZCBbRkYxMTUrXSAqLwp1c2VyX3ByZWYoImJyb3dzZXIudGFicy5zZWFyY2hjbGlwYm9hcmRmb3IubWlkZGxlY2xpY2siLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZSBOT04tTElOVVhdCgovKiogRE9XTkxPQURTICoqKi8KLyogMjY1MTogZW5hYmxlIHVzZXIgaW50ZXJhY3Rpb24gZm9yIHNlY3VyaXR5IGJ5IGFsd2F5cyBhc2tpbmcgd2hlcmUgdG8gZG93bmxvYWQKICogW1NFVFVQLUNIUk9NRV0gT24gQW5kcm9pZCB0aGlzIGJsb2NrcyBsb25ndGFwcGluZyBhbmQgc2F2aW5nIGltYWdlcwogKiBbU0VUVElOR10gR2VuZXJhbD5Eb3dubG9hZHM+QWx3YXlzIGFzayB5b3Ugd2hlcmUgdG8gc2F2ZSBmaWxlcyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5kb3dubG9hZC51c2VEb3dubG9hZERpciIsIGZhbHNlKTsKLyogMjY1MjogZGlzYWJsZSBkb3dubG9hZHMgcGFuZWwgb3BlbmluZyBvbiBldmVyeSBkb3dubG9hZCBbRkY5NitdICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmRvd25sb2FkLmFsd2F5c09wZW5QYW5lbCIsIGZhbHNlKTsKLyogMjY1MzogZGlzYWJsZSBhZGRpbmcgZG93bmxvYWRzIHRvIHRoZSBzeXN0ZW0ncyAicmVjZW50IGRvY3VtZW50cyIgbGlzdCAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5kb3dubG9hZC5tYW5hZ2VyLmFkZFRvUmVjZW50RG9jcyIsIGZhbHNlKTsKLyogMjY1NDogZW5hYmxlIHVzZXIgaW50ZXJhY3Rpb24gZm9yIHNlY3VyaXR5IGJ5IGFsd2F5cyBhc2tpbmcgaG93IHRvIGhhbmRsZSBuZXcgbWltZXR5cGVzIFtGRjEwMStdCiAqIFtTRVRUSU5HXSBHZW5lcmFsPkZpbGVzIGFuZCBBcHBsaWNhdGlvbnM+V2hhdCBzaG91bGQgRmlyZWZveCBkbyB3aXRoIG90aGVyIGZpbGVzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmRvd25sb2FkLmFsd2F5c19hc2tfYmVmb3JlX2hhbmRsaW5nX25ld190eXBlcyIsIHRydWUpOwoKLyoqIEVYVEVOU0lPTlMgKioqLwovKiAyNjYwOiBsb2NrIGRvd24gYWxsb3dlZCBleHRlbnNpb24gZGlyZWN0b3JpZXMKICogW1NFVFVQLUNIUk9NRV0gVGhpcyB3aWxsIGJyZWFrIGV4dGVuc2lvbnMsIGxhbmd1YWdlIHBhY2tzLCB0aGVtZXMgYW5kIGFueSBvdGhlcgogKiBYUEkgZmlsZXMgd2hpY2ggYXJlIGluc3RhbGxlZCBvdXRzaWRlIG9mIHByb2ZpbGUgYW5kIGFwcGxpY2F0aW9uIGRpcmVjdG9yaWVzCiAqIFsxXSBodHRwczovL21pa2Uua2FwbHkuY29tLzIwMTIvMDIvMjEvdW5kZXJzdGFuZGluZy1hZGQtb24tc2NvcGVzLwogKiBbMV0gaHR0cHM6Ly9hcmNoaXZlLmlzL0RZakFNIChhcmNoaXZlZCkgKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMuZW5hYmxlZFNjb3BlcyIsIDUpOyAvLyBbSElEREVOIFBSRUZdCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5hdXRvRGlzYWJsZVNjb3BlcyIsIDE1KTsgLy8gW0RFRkFVTFQ6IDE1XQovKiAyNjYxOiBkaXNhYmxlIGJ5cGFzc2luZyAzcmQgcGFydHkgZXh0ZW5zaW9uIGluc3RhbGwgcHJvbXB0cyBbRkY4MitdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL2J1Z2xpc3QuY2dpP2J1Z19pZD0xNjU5NTMwLDE2ODEzMzEgKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMucG9zdERvd25sb2FkVGhpcmRQYXJ0eVByb21wdCIsIGZhbHNlKTsKLyogMjY2MjogZGlzYWJsZSB3ZWJleHRlbnNpb24gcmVzdHJpY3Rpb25zIG9uIGNlcnRhaW4gbW96aWxsYSBkb21haW5zICh5b3UgYWxzbyBuZWVkIDQ1MDMpIFtGRjYwK10KICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvYnVnbGlzdC5jZ2k/YnVnX2lkPTEzODQzMzAsMTQwNjc5NSwxNDE1NjQ0LDE0NTM5ODggKioqLwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMud2ViZXh0ZW5zaW9ucy5yZXN0cmljdGVkRG9tYWlucyIsICIiKTsKCi8qKiogW1NFQ1RJT04gMjcwMF06IEVUUCAoRU5IQU5DRUQgVFJBQ0tJTkcgUFJPVEVDVElPTikgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICIyNzAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGpvaW5lZCB0aGUgYmxlZWRpbicgY2hvaXIgaW52aXNpYmxlISIpOwovKiAyNzAxOiBlbmFibGUgRVRQIFN0cmljdCBNb2RlIFtGRjg2K10KICogRVRQIFN0cmljdCBNb2RlIGVuYWJsZXMgVG90YWwgQ29va2llIFByb3RlY3Rpb24gKFRDUCkKICogW05PVEVdIEFkZGluZyBzaXRlIGV4Y2VwdGlvbnMgZGlzYWJsZXMgYWxsIEVUUCBwcm90ZWN0aW9ucyBmb3IgdGhhdCBzaXRlIGFuZCBpbmNyZWFzZXMgdGhlIHJpc2sgb2YKICogY3Jvc3Mtc2l0ZSBzdGF0ZSB0cmFja2luZyBlLmcuIGV4Y2VwdGlvbnMgZm9yIFNpdGVBIGFuZCBTaXRlQiBtZWFucyBQYXJ0eUMgb24gYm90aCBzaXRlcyBpcyBzaGFyZWQKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9zZWN1cml0eS8yMDIxLzAyLzIzL3RvdGFsLWNvb2tpZS1wcm90ZWN0aW9uLwogKiBbU0VUVElOR10gdG8gYWRkIHNpdGUgZXhjZXB0aW9uczogVXJsYmFyPkVUUCBTaGllbGQKICogW1NFVFRJTkddIHRvIG1hbmFnZSBzaXRlIGV4Y2VwdGlvbnM6IE9wdGlvbnM+UHJpdmFjeSAmIFNlY3VyaXR5PkVuaGFuY2VkIFRyYWNraW5nIFByb3RlY3Rpb24+TWFuYWdlIEV4Y2VwdGlvbnMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuY29udGVudGJsb2NraW5nLmNhdGVnb3J5IiwgInN0cmljdCIpOwovKiAyNzAyOiBkaXNhYmxlIEVUUCB3ZWIgY29tcGF0IGZlYXR1cmVzIFtGRjkzK10KICogW1NFVFVQLUhBUkRFTl0gSW5jbHVkZXMgc2tpcCBsaXN0cywgaGV1cmlzdGljcyAoU21hcnRCbG9jaykgYW5kIGF1dG9tYXRpYyBncmFudHMKICogT3BlbmVyIGFuZCByZWRpcmVjdCBoZXVyaXN0aWNzIGFyZSBncmFudGVkIGZvciAzMCBkYXlzLCBzZWUgWzNdCiAqIFsxXSBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvc2VjdXJpdHkvMjAyMS8wNy8xMy9zbWFydGJsb2NrLXYyLwogKiBbMl0gaHR0cHM6Ly9oZy5tb3ppbGxhLm9yZy9tb3ppbGxhLWNlbnRyYWwvcmV2L2U1NDgzZmQ0NjlhYiNsNC4xMgogKiBbM10gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvUHJpdmFjeS9TdGF0ZV9QYXJ0aXRpb25pbmcjc3RvcmFnZV9hY2Nlc3NfaGV1cmlzdGljcyAqKiovCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5hbnRpdHJhY2tpbmcuZW5hYmxlV2ViY29tcGF0IiwgZmFsc2UpOwovKiAyNzEwOiBlbmFibGUgc3RhdGUgcGFydGl0aW9uaW5nIG9mIHNlcnZpY2Ugd29ya2VycyBbRkY5NitdICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LnBhcnRpdGlvbi5zZXJ2aWNlV29ya2VycyIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZSBGRjEwNStdCi8qIDI3MjA6IGVuYWJsZSBBUFMgKEFsd2F5cyBQYXJ0aXRpb25pbmcgU3RvcmFnZSkgKioqLwp1c2VyX3ByZWYoInByaXZhY3kucGFydGl0aW9uLmFsd2F5c19wYXJ0aXRpb25fdGhpcmRfcGFydHlfbm9uX2Nvb2tpZV9zdG9yYWdlIiwgdHJ1ZSk7IC8vIFtGRjEwNCtdIFtERUZBVUxUOiB0cnVlIEZGMTA5K10KdXNlcl9wcmVmKCJwcml2YWN5LnBhcnRpdGlvbi5hbHdheXNfcGFydGl0aW9uX3RoaXJkX3BhcnR5X25vbl9jb29raWVfc3RvcmFnZS5leGVtcHRfc2Vzc2lvbnN0b3JhZ2UiLCBmYWxzZSk7IC8vIFtGRjEwNStdIFtERUZBVUxUOiBmYWxzZSBGRjEwOStdCgovKioqIFtTRUNUSU9OIDI4MDBdOiBTSFVURE9XTiAmIFNBTklUSVpJTkcgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICIyODAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGJsZWVkaW4nIGRlbWlzZWQhIik7Ci8qIDI4MTA6IGVuYWJsZSBGaXJlZm94IHRvIGNsZWFyIGl0ZW1zIG9uIHNodXRkb3duCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+SGlzdG9yeT5DdXN0b20gU2V0dGluZ3M+Q2xlYXIgaGlzdG9yeSB3aGVuIEZpcmVmb3ggY2xvc2VzIHwgU2V0dGluZ3MgKioqLwp1c2VyX3ByZWYoInByaXZhY3kuc2FuaXRpemUuc2FuaXRpemVPblNodXRkb3duIiwgdHJ1ZSk7CgovKiogU0FOSVRJWkUgT04gU0hVVERPV046IElHTk9SRVMgIkFMTE9XIiBTSVRFIEVYQ0VQVElPTlMgKioqLwovKiAyODExOiBzZXQvZW5mb3JjZSB3aGF0IGl0ZW1zIHRvIGNsZWFyIG9uIHNodXRkb3duIChpZiAyODEwIGlzIHRydWUpIFtTRVRVUC1DSFJPTUVdCiAqIFtOT1RFXSBJZiAiaGlzdG9yeSIgaXMgdHJ1ZSwgZG93bmxvYWRzIHdpbGwgYWxzbyBiZSBjbGVhcmVkCiAqIFtOT1RFXSAic2Vzc2lvbnMiOiBBY3RpdmUgTG9naW5zOiByZWZlcnMgdG8gSFRUUCBCYXNpYyBBdXRoZW50aWNhdGlvbiBbMV0sIG5vdCBsb2dpbnMgdmlhIGNvb2tpZXMKICogWzFdIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2ljX2FjY2Vzc19hdXRoZW50aWNhdGlvbiAqKiovCnVzZXJfcHJlZigicHJpdmFjeS5jbGVhck9uU2h1dGRvd24uY2FjaGUiLCB0cnVlKTsgICAgIC8vIFtERUZBVUxUOiB0cnVlXQp1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJPblNodXRkb3duLmRvd25sb2FkcyIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNsZWFyT25TaHV0ZG93bi5mb3JtZGF0YSIsIHRydWUpOyAgLy8gW0RFRkFVTFQ6IHRydWVdCnVzZXJfcHJlZigicHJpdmFjeS5jbGVhck9uU2h1dGRvd24uaGlzdG9yeSIsIHRydWUpOyAgIC8vIFtERUZBVUxUOiB0cnVlXQp1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJPblNodXRkb3duLnNlc3Npb25zIiwgdHJ1ZSk7ICAvLyBbREVGQVVMVDogdHJ1ZV0KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmNsZWFyT25TaHV0ZG93bi5zaXRlU2V0dGluZ3MiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KLyogMjgxMjogc2V0IFNlc3Npb24gUmVzdG9yZSB0byBjbGVhciBvbiBzaHV0ZG93biAoaWYgMjgxMCBpcyB0cnVlKSBbRkYzNCtdCiAqIFtOT1RFXSBOb3QgbmVlZGVkIGlmIFNlc3Npb24gUmVzdG9yZSBpcyBub3QgdXNlZCAoMDEwMikgb3IgaXQgaXMgYWxyZWFkeSBjbGVhcmVkIHdpdGggaGlzdG9yeSAoMjgxMSkKICogW05PVEVdIElmIHRydWUsIHRoaXMgcHJldmVudHMgcmVzdW1pbmcgZnJvbSBjcmFzaGVzIChhbHNvIHNlZSA1MDA4KSAqKiovCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5jbGVhck9uU2h1dGRvd24ub3BlbldpbmRvd3MiLCB0cnVlKTsKCi8qKiBTQU5JVElaRSBPTiBTSFVURE9XTjogUkVTUEVDVFMgIkFMTE9XIiBTSVRFIEVYQ0VQVElPTlMgRkYxMDMrICoqKi8KLyogMjgxNTogc2V0ICJDb29raWVzIiBhbmQgIlNpdGUgRGF0YSIgdG8gY2xlYXIgb24gc2h1dGRvd24gKGlmIDI4MTAgaXMgdHJ1ZSkgW1NFVFVQLUNIUk9NRV0KICogW05PVEVdIEV4Y2VwdGlvbnM6IEEgImNvb2tpZSIgYmxvY2sgcGVybWlzc2lvbiBhbHNvIGNvbnRyb2xzICJvZmZsaW5lQXBwcyIgKHNlZSBub3RlIGJlbG93KS4KICogc2VydmljZVdvcmtlcnMgcmVxdWlyZSBhbiAiQWxsb3ciIHBlcm1pc3Npb24uIEZvciBjcm9zcy1kb21haW4gbG9naW5zLCBhZGQgZXhjZXB0aW9ucyBmb3IKICogYm90aCBzaXRlcyBlLmcuIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tIChzaXRlKSArIGh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSAoc2luZ2xlIHNpZ24gb24pCiAqIFtOT1RFXSAib2ZmbGluZUFwcHMiOiBPZmZsaW5lIFdlYnNpdGUgRGF0YTogbG9jYWxTdG9yYWdlLCBzZXJ2aWNlIHdvcmtlciBjYWNoZSwgUXVvdGFNYW5hZ2VyIChJbmRleGVkREIsIGFzbS1jYWNoZSkKICogW1dBUk5JTkddIEJlIHNlbGVjdGl2ZSB3aXRoIHdoYXQgc2l0ZXMgeW91ICJBbGxvdyIsIGFzIHRoZXkgYWxzbyBkaXNhYmxlIHBhcnRpdGlvbmluZyAoMTc2NzI3MSkKICogW1NFVFRJTkddIHRvIGFkZCBzaXRlIGV4Y2VwdGlvbnM6IEN0cmwrST5QZXJtaXNzaW9ucz5Db29raWVzPkFsbG93ICh3aGVuIG9uIHRoZSB3ZWJzaXRlIGluIHF1ZXN0aW9uKQogKiBbU0VUVElOR10gdG8gbWFuYWdlIHNpdGUgZXhjZXB0aW9uczogT3B0aW9ucz5Qcml2YWN5ICYgU2VjdXJpdHk+UGVybWlzc2lvbnM+U2V0dGluZ3MgKioqLwp1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJPblNodXRkb3duLmNvb2tpZXMiLCB0cnVlKTsgLy8gQ29va2llcwp1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJPblNodXRkb3duLm9mZmxpbmVBcHBzIiwgdHJ1ZSk7IC8vIFNpdGUgRGF0YQoKLyoqIFNBTklUSVpFIE1BTlVBTDogSUdOT1JFUyAiQUxMT1ciIFNJVEUgRVhDRVBUSU9OUyAqKiovCi8qIDI4MjA6IHJlc2V0IGRlZmF1bHQgaXRlbXMgdG8gY2xlYXIgd2l0aCBDdHJsLVNoaWZ0LURlbCBbU0VUVVAtQ0hST01FXQogKiBUaGlzIGRpYWxvZyBjYW4gYWxzbyBiZSBhY2Nlc3NlZCBmcm9tIHRoZSBtZW51IEhpc3Rvcnk+Q2xlYXIgUmVjZW50IEhpc3RvcnkKICogRmlyZWZveCByZW1lbWJlcnMgeW91ciBsYXN0IGNob2ljZXMuIFRoaXMgd2lsbCByZXNldCB0aGVtIHdoZW4geW91IHN0YXJ0IEZpcmVmb3gKICogW05PVEVdIFJlZ2FyZGxlc3Mgb2Ygd2hhdCB5b3Ugc2V0ICJkb3dubG9hZHMiIHRvLCBhcyBzb29uIGFzIHRoZSBkaWFsb2cKICogZm9yICJDbGVhciBSZWNlbnQgSGlzdG9yeSIgaXMgb3BlbmVkLCBpdCBpcyBzeW5jZWQgdG8gdGhlIHNhbWUgYXMgImhpc3RvcnkiICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5jYWNoZSIsIHRydWUpOyAgICAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5mb3JtZGF0YSIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5oaXN0b3J5IiwgdHJ1ZSk7ICAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5zZXNzaW9ucyIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5vZmZsaW5lQXBwcyIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQp1c2VyX3ByZWYoInByaXZhY3kuY3BkLmNvb2tpZXMiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5jcGQuZG93bmxvYWRzIiwgdHJ1ZSk7IC8vIG5vdCB1c2VkLCBzZWUgbm90ZSBhYm92ZQogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuY3BkLm9wZW5XaW5kb3dzIiwgZmFsc2UpOyAvLyBTZXNzaW9uIFJlc3RvcmUKICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5wYXNzd29yZHMiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5jcGQuc2l0ZVNldHRpbmdzIiwgZmFsc2UpOwovKiAyODIyOiByZXNldCBkZWZhdWx0ICJUaW1lIHJhbmdlIHRvIGNsZWFyIiBmb3IgIkNsZWFyIFJlY2VudCBIaXN0b3J5IiAoMjgyMCkKICogRmlyZWZveCByZW1lbWJlcnMgeW91ciBsYXN0IGNob2ljZS4gVGhpcyB3aWxsIHJlc2V0IHRoZSB2YWx1ZSB3aGVuIHlvdSBzdGFydCBGaXJlZm94CiAqIDA9ZXZlcnl0aGluZywgMT1sYXN0IGhvdXIsIDI9bGFzdCB0d28gaG91cnMsIDM9bGFzdCBmb3VyIGhvdXJzLCA0PXRvZGF5CiAqIFtOT1RFXSBWYWx1ZXMgNSAobGFzdCA1IG1pbnV0ZXMpIGFuZCA2IChsYXN0IDI0IGhvdXJzKSBhcmUgbm90IGxpc3RlZCBpbiB0aGUgZHJvcGRvd24sCiAqIHdoaWNoIHdpbGwgZGlzcGxheSBhIGJsYW5rIHZhbHVlLCBhbmQgYXJlIG5vdCBndWFyYW50ZWVkIHRvIHdvcmsgKioqLwp1c2VyX3ByZWYoInByaXZhY3kuc2FuaXRpemUudGltZVNwYW4iLCAwKTsKCi8qKiogW1NFQ1RJT04gNDUwMF06IFJGUCAoUkVTSVNUIEZJTkdFUlBSSU5USU5HKQogICBSRlAgY292ZXJzIGEgd2lkZSByYW5nZSBvZiBvbmdvaW5nIGZpbmdlcnByaW50aW5nIHNvbHV0aW9ucy4KICAgSXQgaXMgYW4gYWxsLW9yLW5vdGhpbmcgYnV5IGluOiB5b3UgY2Fubm90IHBpY2sgYW5kIGNob29zZSB3aGF0IHBhcnRzIHlvdSB3YW50CiAgIFtURVNUXSBodHRwczovL2Fya2VuZm94LmdpdGh1Yi5pby9UWlAvdHpwLmh0bWwKCiAgIFtXQVJOSU5HXSBETyBOT1QgVVNFIGV4dGVuc2lvbnMgdG8gYWx0ZXIgUkZQIHByb3RlY3RlZCBtZXRyaWNzCgogICAgNDE4OTg2IC0gbGltaXQgd2luZG93LnNjcmVlbiAmIENTUyBtZWRpYSBxdWVyaWVzIChGRjQxKQogICAxMjgxOTQ5IC0gc3Bvb2Ygc2NyZWVuIG9yaWVudGF0aW9uIChGRjUwKQogICAxMzMwODkwIC0gc3Bvb2YgdGltZXpvbmUgYXMgVVRDMCAoRkY1NSkKICAgMTM2MDAzOSAtIHNwb29mIG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5IGFzIDIgKEZGNTUpCiBGRjU2CiAgIDEzNjkzMDMgLSBzcG9vZi9kaXNhYmxlIHBlcmZvcm1hbmNlIEFQSQogICAxMzMzNjUxIC0gc3Bvb2YgVXNlciBBZ2VudCAmIE5hdmlnYXRvciBBUEkKICAgICAgdmVyc2lvbjogYW5kcm9pZCB2ZXJzaW9uIHNwb29mZWQgYXMgRVNSCiAgICAgIE9TOiBKUyBzcG9vZmVkIGFzIFdpbmRvd3MgMTAsIE9TIDEwLjE1LCBBbmRyb2lkIDEwLCBvciBMaW51eCB8IEhUVFAgSGVhZGVycyBzcG9vZmVkIGFzIFdpbmRvd3Mgb3IgQW5kcm9pZAogICAxMzY5MzE5IC0gZGlzYWJsZSBkZXZpY2Ugc2Vuc29yIEFQSQogICAxMzY5MzU3IC0gZGlzYWJsZSBzaXRlIHNwZWNpZmljIHpvb20KICAgMTMzNzE2MSAtIGhpZGUgZ2FtZXBhZHMgZnJvbSBjb250ZW50CiAgIDEzNzIwNzIgLSBzcG9vZiBuZXR3b3JrIGluZm9ybWF0aW9uIEFQSSBhcyAidW5rbm93biIgd2hlbiBkb20ubmV0aW5mby5lbmFibGVkID0gdHJ1ZQogICAxMzMzNjQxIC0gcmVkdWNlIGZpbmdlcnByaW50aW5nIGluIFdlYlNwZWVjaCBBUEkKIEZGNTcKICAgMTM2OTMwOSAtIHNwb29mIG1lZGlhIHN0YXRpc3RpY3MKICAgMTM4MjQ5OSAtIHJlZHVjZSBzY3JlZW4gY28tb3JkaW5hdGUgZmluZ2VycHJpbnRpbmcgaW4gVG91Y2ggQVBJCiAgIDEyMTcyOTAgJiAxNDA5Njc3IC0gZW5hYmxlIHNvbWUgZmluZ2VycHJpbnRpbmcgcmVzaXN0YW5jZSBmb3IgV2ViR0wKICAgMTM4MjU0NSAtIHJlZHVjZSBmaW5nZXJwcmludGluZyBpbiBBbmltYXRpb24gQVBJCiAgIDEzNTQ2MzMgLSBsaW1pdCBNZWRpYUVycm9yLm1lc3NhZ2UgdG8gYSB3aGl0ZWxpc3QKIEZGNTgrCiAgIDEzNzIwNzMgLSBzcG9vZi9ibG9jayBmaW5nZXJwcmludGluZyBpbiBNZWRpYURldmljZXMgQVBJIChGRjU5KQogICAgICBTcG9vZjogZW51bWVyYXRlIGRldmljZXMgYXMgb25lICJJbnRlcm5hbCBDYW1lcmEiIGFuZCBvbmUgIkludGVybmFsIE1pY3JvcGhvbmUiCiAgICAgIEJsb2NrOiBzdXBwcmVzc2VzIHRoZSBvbmRldmljZWNoYW5nZSBldmVudAogICAxMDM5MDY5IC0gd2FybiB3aGVuIGxhbmd1YWdlIHByZWZzIGFyZSBub3Qgc2V0IHRvICJlbioiIChhbHNvIHNlZSAwMjEwLCAwMjExKSAoRkY1OSkKICAgMTIyMjI4NSAmIDE0MzM1OTIgLSBzcG9vZiBrZXlib2FyZCBldmVudHMgYW5kIHN1cHByZXNzIGtleWJvYXJkIG1vZGlmaWVyIGV2ZW50cyAoRkY1OSkKICAgICAgU3Bvb2ZpbmcgbWltaWNzIHRoZSBjb250ZW50IGxhbmd1YWdlIG9mIHRoZSBkb2N1bWVudC4gQ3VycmVudGx5IGl0IG9ubHkgc3VwcG9ydHMgZW4tVVMuCiAgICAgIE1vZGlmaWVyIGV2ZW50cyBzdXBwcmVzc2VkIGFyZSBTSElGVCBhbmQgYm90aCBBTFQga2V5cy4gQ2hyb21lIGlzIG5vdCBhZmZlY3RlZC4KICAgMTMzNzE1NyAtIGRpc2FibGUgV2ViR0wgZGVidWcgcmVuZGVyZXIgaW5mbyAoRkY2MCkKICAgMTQ1OTA4OSAtIGRpc2FibGUgT1MgbG9jYWxlIGluIEhUVFAgQWNjZXB0LUxhbmd1YWdlIGhlYWRlcnMgKEFORFJPSUQpIChGRjYyKQogICAxNDc5MjM5IC0gcmV0dXJuICJuby1wcmVmZXJlbmNlIiB3aXRoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKEZGNjMpCiAgIDEzNjM1MDggLSBzcG9vZi9zdXBwcmVzcyBQb2ludGVyIEV2ZW50cyAoRkY2NCkKICAgMTQ5Mjc2NiAtIHNwb29mIHBvaW50ZXJFdmVudC5wb2ludGVyaWQgKEZGNjUpCiAgIDE0ODUyNjYgLSBkaXNhYmxlIGV4cG9zdXJlIG9mIHN5c3RlbSBjb2xvcnMgdG8gQ1NTIG9yIGNhbnZhcyAoRkY2NykKICAgMTQ5NDAzNCAtIHJldHVybiAibGlnaHQiIHdpdGggcHJlZmVycy1jb2xvci1zY2hlbWUgKEZGNjcpCiAgIDE1NjQ0MjIgLSBzcG9vZiBhdWRpb0NvbnRleHQgb3V0cHV0TGF0ZW5jeSAoRkY3MCkKICAgMTU5NTgyMyAtIHJldHVybiBhdWRpb0NvbnRleHQgc2FtcGxlUmF0ZSBhcyA0NDEwMCAoRkY3MikKICAgMTYwNzMxNiAtIHNwb29mIHBvaW50ZXIgYXMgY29hcnNlIGFuZCBob3ZlciBhcyBub25lIChBTkRST0lEKSAoRkY3NCkKICAgMTYyMTQzMyAtIHJhbmRvbWl6ZSBjYW52YXMgKHByZXZpb3VzbHkgRkY1OCsgcmV0dXJuZWQgYW4gYWxsLXdoaXRlIGNhbnZhcykgKEZGNzgpCiAgIDE1MDYzNjQgLSByZXR1cm4gIm5vLXByZWZlcmVuY2UiIHdpdGggcHJlZmVycy1jb250cmFzdCAoRkY4MCkKICAgMTY1Mzk4NyAtIGxpbWl0IGZvbnQgdmlzaWJpbGl0eSB0byBidW5kbGVkIGFuZCAiQmFzZSBGb250cyIgKFdpbmRvd3MsIE1hYywgc29tZSBMaW51eCkgKEZGODApCiAgIDE0NjE0NTQgLSBzcG9vZiBzbW9vdGg9dHJ1ZSBhbmQgcG93ZXJFZmZpY2llbnQ9ZmFsc2UgZm9yIHN1cHBvcnRlZCBtZWRpYSBpbiBNZWRpYUNhcGFiaWxpdGllcyAoRkY4MikKICAgIDUzMTkxNSAtIHVzZSBmZGxpYm0ncyBzaW4sIGNvcyBhbmQgdGFuIGluIGpzbWF0aCAoRkY5MywgRVNSOTEuMSkKICAgMTc1NjI4MCAtIGVuZm9yY2UgbmF2aWdhdG9yLnBkZlZpZXdlckVuYWJsZWQgYXMgdHJ1ZSBhbmQgcGx1Z2lucy9taW1lVHlwZXMgYXMgaGFyZC1jb2RlZCB2YWx1ZXMgKEZGMTAwKQogICAxNjkyNjA5IC0gcmVkdWNlIEpTIHRpbWluZyBwcmVjaXNpb24gdG8gMTYuNjdtcyAocHJldmlvdXNseSBGRjU1KyB3YXMgMTAwbXMpIChGRjEwMikKICAgMTQyMjIzNyAtIHJldHVybiAic3JnYiIgd2l0aCBjb2xvci1nYW11dCAoRkYxMTApCiAgIDE3OTQ2MjggLSByZXR1cm4gIm5vbmUiIHdpdGggaW52ZXJ0ZWQtY29sb3JzIChGRjExNCkKKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI0NTAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIHBvcHBlZCAnaXMgY2xvZ3MiKTsKLyogNDUwMTogZW5hYmxlIHByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmcKICogW1NFVFVQLVdFQl0gUkZQIGNhbiBjYXVzZSBzb21lIHdlYnNpdGUgYnJlYWthZ2U6IG1haW5seSBjYW52YXMsIHVzZSBhIGNhbnZhcyBzaXRlIGV4Y2VwdGlvbiB2aWEgdGhlIHVybGJhcgogKiBSRlAgYWxzbyBoYXMgYSBmZXcgc2lkZSBlZmZlY3RzOiBtYWlubHkgdGltZXpvbmUgaXMgVVRDMCwgYW5kIHdlYnNpdGVzIHdpbGwgcHJlZmVyIGxpZ2h0IHRoZW1lCiAqIFtOT1RFXSBwYm1vZGUgYXBwbGllcyBpZiB0cnVlIGFuZCB0aGUgb3JpZ2luYWwgcHJlZiBpcyBmYWxzZQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy80MTg5ODYgKioqLwp1c2VyX3ByZWYoInByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmciLCB0cnVlKTsgLy8gW0ZGNDErXQogICAvLyB1c2VyX3ByZWYoInByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmcucGJtb2RlIiwgdHJ1ZSk7IC8vIFtGRjExNCtdCi8qIDQ1MDI6IHNldCBuZXcgd2luZG93IHNpemUgcm91bmRpbmcgbWF4IHZhbHVlcyBbRkY1NStdCiAqIFtTRVRVUC1DSFJPTUVdIHNpemVzIHJvdW5kIGRvd24gaW4gaHVuZHJlZHM6IHdpZHRoIHRvIDIwMHMgYW5kIGhlaWdodCB0byAxMDBzLCB0byBmaXQgeW91ciBzY3JlZW4KICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTMzMDg4MiAqKiovCnVzZXJfcHJlZigicHJpdmFjeS53aW5kb3cubWF4SW5uZXJXaWR0aCIsIDE2MDApOwp1c2VyX3ByZWYoInByaXZhY3kud2luZG93Lm1heElubmVySGVpZ2h0IiwgOTAwKTsKLyogNDUwMzogZGlzYWJsZSBtb3pBZGRvbk1hbmFnZXIgV2ViIEFQSSBbRkY1NytdCiAqIFtOT1RFXSBUbyBhbGxvdyBleHRlbnNpb25zIHRvIHdvcmsgb24gQU1PLCB5b3UgYWxzbyBuZWVkIDI2NjIKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvYnVnbGlzdC5jZ2k/YnVnX2lkPTEzODQzMzAsMTQwNjc5NSwxNDE1NjQ0LDE0NTM5ODggKioqLwp1c2VyX3ByZWYoInByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmcuYmxvY2tfbW96QWRkb25NYW5hZ2VyIiwgdHJ1ZSk7IC8vIFtISURERU4gUFJFRiBGRjU3LTEwOF0KLyogNDUwNDogZW5hYmxlIFJGUCBsZXR0ZXJib3hpbmcgW0ZGNjcrXQogKiBEeW5hbWljYWxseSByZXNpemVzIHRoZSBpbm5lciB3aW5kb3cgYnkgYXBwbHlpbmcgbWFyZ2lucyBpbiBzdGVwcGVkIHJhbmdlcyBbMl0KICogSWYgeW91IHVzZSB0aGUgZGltZW5zaW9uIHByZWYsIHRoZW4gaXQgd2lsbCBvbmx5IGFwcGx5IHRob3NlIHJlc29sdXRpb25zLgogKiBUaGUgZm9ybWF0IGlzICJ3aWR0aDF4aGVpZ2h0MSwgd2lkdGgyeGhlaWdodDIsIC4uLiIgKGUuZy4gIjgwMHg2MDAsIDEwMDB4MTAwMCIpCiAqIFtTRVRVUC1XRUJdIFRoaXMgaXMgaW5kZXBlbmRlbnQgb2YgUkZQICg0NTAxKS4gSWYgeW91J3JlIG5vdCB1c2luZyBSRlAsIG9yIHlvdSBhcmUgYnV0CiAqIGRpc2xpa2UgdGhlIG1hcmdpbnMsIHRoZW4gZmxpcCB0aGlzIHByZWYsIGtlZXBpbmcgaW4gbWluZCB0aGF0IGl0IGlzIGVmZmVjdGl2ZWx5IGZpbmdlcnByaW50YWJsZQogKiBbV0FSTklOR10gRE8gTk9UIFVTRTogdGhlIGRpbWVuc2lvbiBwcmVmIGlzIG9ubHkgbWVhbnQgZm9yIHRlc3RpbmcKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTQwNzM2NgogKiBbMl0gaHR0cHM6Ly9oZy5tb3ppbGxhLm9yZy9tb3ppbGxhLWNlbnRyYWwvcmV2LzZkMmQ3ODU2ZTQ2OCNsMi4zMiAqKiovCnVzZXJfcHJlZigicHJpdmFjeS5yZXNpc3RGaW5nZXJwcmludGluZy5sZXR0ZXJib3hpbmciLCB0cnVlKTsgLy8gW0hJRERFTiBQUkVGXQogICAvLyB1c2VyX3ByZWYoInByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmcubGV0dGVyYm94aW5nLmRpbWVuc2lvbnMiLCAiIik7IC8vIFtISURERU4gUFJFRl0KLyogNDUwNTogZXhwZXJpbWVudGFsIFJGUCBbRkY5MStdCiAqIFtXQVJOSU5HXSBETyBOT1QgVVNFIHVubGVzcyB0ZXN0aW5nLCBzZWUgWzFdIGNvbW1lbnQgMTIKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTYzNTYwMyAqKiovCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5yZXNpc3RGaW5nZXJwcmludGluZy5leGVtcHRlZERvbWFpbnMiLCAiKi5leGFtcGxlLmludmFsaWQiKTsKLyogNDUxMDogZGlzYWJsZSB1c2luZyBzeXN0ZW0gY29sb3JzCiAqIFtTRVRUSU5HXSBHZW5lcmFsPkxhbmd1YWdlIGFuZCBBcHBlYXJhbmNlPkZvbnRzIGFuZCBDb2xvcnM+Q29sb3JzPlVzZSBzeXN0ZW0gY29sb3JzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmRpc3BsYXkudXNlX3N5c3RlbV9jb2xvcnMiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZSBOT04tV0lORE9XU10KLyogNDUxMTogZW5mb3JjZSBub24tbmF0aXZlIHdpZGdldCB0aGVtZQogKiBTZWN1cml0eTogcmVtb3Zlcy9yZWR1Y2VzIHN5c3RlbSBBUEkgY2FsbHMsIGUuZy4gd2luMzJrIEFQSSBbMV0KICogRmluZ2VycHJpbnRpbmc6IHByb3ZpZGVzIGEgdW5pZm9ybSBsb29rIGFuZCBmZWVsIGFjcm9zcyBwbGF0Zm9ybXMgWzJdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzEzODE5MzgKICogWzJdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTQxMTQyNSAqKiovCnVzZXJfcHJlZigid2lkZ2V0Lm5vbi1uYXRpdmUtdGhlbWUuZW5hYmxlZCIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KLyogNDUxMjogZW5mb3JjZSBsaW5rcyB0YXJnZXRpbmcgbmV3IHdpbmRvd3MgdG8gb3BlbiBpbiBhIG5ldyB0YWIgaW5zdGVhZAogKiAxPW1vc3QgcmVjZW50IHdpbmRvdyBvciB0YWIsIDI9bmV3IHdpbmRvdywgMz1uZXcgdGFiCiAqIFN0b3BzIG1hbGljaW91cyB3aW5kb3cgc2l6ZXMgYW5kIHNvbWUgc2NyZWVuIHJlc29sdXRpb24gbGVha3MuCiAqIFlvdSBjYW4gc3RpbGwgcmlnaHQtY2xpY2sgYSBsaW5rIGFuZCBvcGVuIGluIGEgbmV3IHdpbmRvdwogKiBbU0VUVElOR10gR2VuZXJhbD5UYWJzPk9wZW4gbGlua3MgaW4gdGFicyBpbnN0ZWFkIG9mIG5ldyB3aW5kb3dzCiAqIFtURVNUXSBodHRwczovL2Fya2VuZm94LmdpdGh1Yi5pby9UWlAvdHpwLmh0bWwjc2NyZWVuCiAqIFsxXSBodHRwczovL2dpdGxhYi50b3Jwcm9qZWN0Lm9yZy90cG8vYXBwbGljYXRpb25zL3Rvci1icm93c2VyLy0vaXNzdWVzLzk4ODEgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubGluay5vcGVuX25ld3dpbmRvdyIsIDMpOyAvLyBbREVGQVVMVDogM10KLyogNDUxMzogc2V0IGFsbCBvcGVuIHdpbmRvdyBtZXRob2RzIHRvIGFiaWRlIGJ5ICJicm93c2VyLmxpbmsub3Blbl9uZXd3aW5kb3ciICg0NTEyKQogKiBbMV0gaHR0cHM6Ly9zZWFyY2hmb3gub3JnL21vemlsbGEtY2VudHJhbC9zb3VyY2UvZG9tL3Rlc3RzL2Jyb3dzZXIvYnJvd3Nlcl90ZXN0X25ld193aW5kb3dfZnJvbV9jb250ZW50LmpzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmxpbmsub3Blbl9uZXd3aW5kb3cucmVzdHJpY3Rpb24iLCAwKTsKLyogNDUyMDogZGlzYWJsZSBXZWJHTCAoV2ViIEdyYXBoaWNzIExpYnJhcnkpCiAqIFtTRVRVUC1XRUJdIElmIHlvdSBuZWVkIGl0IHRoZW4gb3ZlcnJpZGUgaXQuIFJGUCBzdGlsbCByYW5kb21pemVzIGNhbnZhcyBmb3IgbmFpdmUgc2NyaXB0cyAqKiovCnVzZXJfcHJlZigid2ViZ2wuZGlzYWJsZWQiLCB0cnVlKTsKCi8qKiogW1NFQ1RJT04gNTAwMF06IE9QVElPTkFMIE9QU0VDCiAgIERpc2sgYXZvaWRhbmNlLCBhcHBsaWNhdGlvbiBkYXRhIGlzb2xhdGlvbiwgZXllYmFsbHMuLi4KKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI1MDAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIHRha2VuICdpcyBsYXN0IGJvdyIpOwovKiA1MDAxOiBzdGFydCBGaXJlZm94IGluIFBCIChQcml2YXRlIEJyb3dzaW5nKSBtb2RlCiAqIFtOT1RFXSBJbiB0aGlzIG1vZGUgYWxsIHdpbmRvd3MgYXJlICJwcml2YXRlIHdpbmRvd3MiIGFuZCB0aGUgUEIgbW9kZSBpY29uIGlzIG5vdCBkaXNwbGF5ZWQKICogW05PVEVdIFRoZSBQIGluIFBCIG1vZGUgY2FuIGJlIG1pc2xlYWRpbmc6IGl0IG1lYW5zIG5vICJwZXJzaXN0ZW50IiBkaXNrIHN0YXRlIHN1Y2ggYXMgaGlzdG9yeSwKICogY2FjaGVzLCBzZWFyY2hlcywgY29va2llcywgbG9jYWxTdG9yYWdlLCBJbmRleGVkREIgZXRjICh3aGljaCB5b3UgY2FuIGFjaGlldmUgaW4gbm9ybWFsIG1vZGUpLgogKiBJbiBmYWN0LCBQQiBtb2RlIGxpbWl0cyBvciByZW1vdmVzIHRoZSBhYmlsaXR5IHRvIGNvbnRyb2wgc29tZSBvZiB0aGVzZSwgYW5kIHlvdSBuZWVkIHRvIHF1aXQKICogRmlyZWZveCB0byBjbGVhciB0aGVtLiBQQiBpcyBiZXN0IHVzZWQgYXMgYSBvbmUgb2ZmIHdpbmRvdyAoTWVudT5OZXcgUHJpdmF0ZSBXaW5kb3cpIHRvIHByb3ZpZGUKICogYSB0ZW1wb3Jhcnkgc2VsZi1jb250YWluZWQgbmV3IHNlc3Npb24uIENsb3NlIGFsbCBwcml2YXRlIHdpbmRvd3MgdG8gY2xlYXIgdGhlIFBCIHNlc3Npb24uCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+SGlzdG9yeT5DdXN0b20gU2V0dGluZ3M+QWx3YXlzIHVzZSBwcml2YXRlIGJyb3dzaW5nIG1vZGUKICogWzFdIGh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9Qcml2YXRlX0Jyb3dzaW5nCiAqIFsyXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvY29tbW9uLW15dGhzLWFib3V0LXByaXZhdGUtYnJvd3NpbmcgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIucHJpdmF0ZWJyb3dzaW5nLmF1dG9zdGFydCIsIHRydWUpOwovKiA1MDAyOiBkaXNhYmxlIG1lbW9yeSBjYWNoZQogKiBjYXBhY2l0eTogLTE9ZGV0ZXJtaW5lIGR5bmFtaWNhbGx5IChkZWZhdWx0KSwgMD1ub25lLCBuPW1lbW9yeSBjYXBhY2l0eSBpbiBraWJpYnl0ZXMgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuY2FjaGUubWVtb3J5LmVuYWJsZSIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLmNhY2hlLm1lbW9yeS5jYXBhY2l0eSIsIDApOwovKiA1MDAzOiBkaXNhYmxlIHNhdmluZyBwYXNzd29yZHMKICogW05PVEVdIFRoaXMgZG9lcyBub3QgY2xlYXIgYW55IHBhc3N3b3JkcyBhbHJlYWR5IHNhdmVkCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+TG9naW5zIGFuZCBQYXNzd29yZHM+QXNrIHRvIHNhdmUgbG9naW5zIGFuZCBwYXNzd29yZHMgZm9yIHdlYnNpdGVzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJzaWdub24ucmVtZW1iZXJTaWdub25zIiwgZmFsc2UpOwovKiA1MDA0OiBkaXNhYmxlIHBlcm1pc3Npb25zIG1hbmFnZXIgZnJvbSB3cml0aW5nIHRvIGRpc2sgW0ZGNDErXSBbUkVTVEFSVF0KICogW05PVEVdIFRoaXMgbWVhbnMgYW55IHBlcm1pc3Npb24gY2hhbmdlcyBhcmUgc2Vzc2lvbiBvbmx5CiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzk2NzgxMiAqKiovCiAgIC8vIHVzZXJfcHJlZigicGVybWlzc2lvbnMubWVtb3J5X29ubHkiLCB0cnVlKTsgLy8gW0hJRERFTiBQUkVGXQovKiA1MDA1OiBkaXNhYmxlIGludGVybWVkaWF0ZSBjZXJ0aWZpY2F0ZSBjYWNoaW5nIFtGRjQxK10gW1JFU1RBUlRdCiAqIFtOT1RFXSBUaGlzIGFmZmVjdHMgbG9naW4vY2VydC9rZXkgZGJzLiBUaGUgZWZmZWN0IGlzIGFsbCBjcmVkZW50aWFscyBhcmUgc2Vzc2lvbi1vbmx5LgogKiBTYXZlZCBsb2dpbnMgYW5kIHBhc3N3b3JkcyBhcmUgbm90IGF2YWlsYWJsZS4gUmVzZXQgdGhlIHByZWYgYW5kIHJlc3RhcnQgdG8gcmV0dXJuIHRoZW0gKioqLwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5Lm5vY2VydGRiIiwgdHJ1ZSk7Ci8qIDUwMDY6IGRpc2FibGUgZmF2aWNvbnMgaW4gaGlzdG9yeSBhbmQgYm9va21hcmtzCiAqIFtOT1RFXSBTdG9yZWQgYXMgZGF0YSBibG9icyBpbiBmYXZpY29ucy5zcWxpdGUsIHRoZXNlIGRvbid0IHJldmVhbCBhbnl0aGluZyB0aGF0IHlvdXIKICogYWN0dWFsIGhpc3RvcnkgKGFuZCBib29rbWFya3MpIGFscmVhZHkgZG8uIFlvdXIgaGlzdG9yeSBpcyBtb3JlIGRldGFpbGVkLCBzbwogKiBjb250cm9sIHRoYXQgaW5zdGVhZDsgZS5nLiBkaXNhYmxlIGhpc3RvcnksIGNsZWFyIGhpc3Rvcnkgb24gZXhpdCwgdXNlIFBCIG1vZGUKICogW05PVEVdIGZhdmljb25zLnNxbGl0ZSBpcyBzYW5pdGl6ZWQgb24gRmlyZWZveCBjbG9zZSAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5jaHJvbWUuc2l0ZV9pY29ucyIsIGZhbHNlKTsKLyogNTAwNzogZXhjbHVkZSAiVW5kbyBDbG9zZWQgVGFicyIgaW4gU2Vzc2lvbiBSZXN0b3JlICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnNlc3Npb25zdG9yZS5tYXhfdGFic191bmRvIiwgMCk7Ci8qIDUwMDg6IGRpc2FibGUgcmVzdW1pbmcgc2Vzc2lvbiBmcm9tIGNyYXNoCiAqIFtURVNUXSBhYm91dDpjcmFzaHBhcmVudCAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zZXNzaW9uc3RvcmUucmVzdW1lX2Zyb21fY3Jhc2giLCBmYWxzZSk7Ci8qIDUwMDk6IGRpc2FibGUgIm9wZW4gd2l0aCIgaW4gZG93bmxvYWQgZGlhbG9nIFtGRjUwK10KICogQXBwbGljYXRpb24gZGF0YSBpc29sYXRpb24gWzFdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzEyODE5NTkgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuZG93bmxvYWQuZm9yYmlkX29wZW5fd2l0aCIsIHRydWUpOwovKiA1MDEwOiBkaXNhYmxlIGxvY2F0aW9uIGJhciBzdWdnZXN0aW9uIHR5cGVzCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+QWRkcmVzcyBCYXI+V2hlbiB1c2luZyB0aGUgYWRkcmVzcyBiYXIsIHN1Z2dlc3QgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLnN1Z2dlc3QuaGlzdG9yeSIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LmJvb2ttYXJrIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLnN1Z2dlc3Qub3BlbnBhZ2UiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc3VnZ2VzdC50b3BzaXRlcyIsIGZhbHNlKTsgLy8gW0ZGNzgrXQovKiA1MDExOiBkaXNhYmxlIGxvY2F0aW9uIGJhciBkcm9wZG93bgogKiBUaGlzIHZhbHVlIGNvbnRyb2xzIHRoZSB0b3RhbCBudW1iZXIgb2YgZW50cmllcyB0byBhcHBlYXIgaW4gdGhlIGxvY2F0aW9uIGJhciBkcm9wZG93biAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIubWF4UmljaFJlc3VsdHMiLCAwKTsKLyogNTAxMjogZGlzYWJsZSBsb2NhdGlvbiBiYXIgYXV0b2ZpbGwKICogWzFdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi9hZGRyZXNzLWJhci1hdXRvY29tcGxldGUtZmlyZWZveCN3X3VybC1hdXRvY29tcGxldGUgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLmF1dG9GaWxsIiwgZmFsc2UpOwovKiA1MDEzOiBkaXNhYmxlIGJyb3dzaW5nIGFuZCBkb3dubG9hZCBoaXN0b3J5CiAqIFtOT1RFXSBXZSBhbHNvIGNsZWFyIGhpc3RvcnkgYW5kIGRvd25sb2FkcyBvbiBleGl0ICgyODExKQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5Pkhpc3Rvcnk+Q3VzdG9tIFNldHRpbmdzPlJlbWVtYmVyIGJyb3dzaW5nIGFuZCBkb3dubG9hZCBoaXN0b3J5ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwbGFjZXMuaGlzdG9yeS5lbmFibGVkIiwgZmFsc2UpOwovKiA1MDE0OiBkaXNhYmxlIFdpbmRvd3MganVtcGxpc3QgW1dJTkRPV1NdICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIubGlzdHMuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIubGlzdHMuZnJlcXVlbnQuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIubGlzdHMucmVjZW50LmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci50YXNrYmFyLmxpc3RzLnRhc2tzLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDUwMTU6IGRpc2FibGUgV2luZG93cyB0YXNrYmFyIHByZXZpZXcgW1dJTkRPV1NdICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIucHJldmlld3MuZW5hYmxlIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCi8qIDUwMTY6IGRpc2NvdXJhZ2UgZG93bmxvYWRpbmcgdG8gZGVza3RvcAogKiAwPWRlc2t0b3AsIDE9ZG93bmxvYWRzIChkZWZhdWx0KSwgMj1jdXN0b20KICogW1NFVFRJTkddIFRvIHNldCB5b3VyIGN1c3RvbSBkZWZhdWx0ICJkb3dubG9hZHMiOiBHZW5lcmFsPkRvd25sb2Fkcz5TYXZlIGZpbGVzIHRvICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLmRvd25sb2FkLmZvbGRlckxpc3QiLCAyKTsKLyogNTAxNzogZGlzYWJsZSBGb3JtIEF1dG9maWxsCiAqIElmIC5zdXBwb3J0ZWRDb3VudHJpZXMgaW5jbHVkZXMgeW91ciByZWdpb24gKGJyb3dzZXIuc2VhcmNoLnJlZ2lvbikgYW5kIC5zdXBwb3J0ZWQKICogaXMgImRldGVjdCIgKGRlZmF1bHQpLCB0aGVuIHRoZSBVSSB3aWxsIHNob3cuIFN0b3JlZCBkYXRhIGlzIG5vdCBzZWN1cmUsIHVzZXMgSlNPTgogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkZvcm1zIGFuZCBBdXRvZmlsbD5BdXRvZmlsbCBhZGRyZXNzZXMKICogWzFdIGh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9GaXJlZm94L0ZlYXR1cmVzL0Zvcm1fQXV0b2ZpbGwgKioqLwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMuZm9ybWF1dG9maWxsLmFkZHJlc3Nlcy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NStdCiAgIC8vIHVzZXJfcHJlZigiZXh0ZW5zaW9ucy5mb3JtYXV0b2ZpbGwuY3JlZGl0Q2FyZHMuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNTYrXQovKiA1MDE4OiBsaW1pdCBldmVudHMgdGhhdCBjYW4gY2F1c2UgYSBwb3AtdXAgKioqLwogICAvLyB1c2VyX3ByZWYoImRvbS5wb3B1cF9hbGxvd2VkX2V2ZW50cyIsICJjbGljayBkYmxjbGljayBtb3VzZWRvd24gcG9pbnRlcmRvd24iKTsKLyogNTAxOTogZGlzYWJsZSBwYWdlIHRodW1ibmFpbCBjb2xsZWN0aW9uICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnBhZ2V0aHVtYm5haWxzLmNhcHR1cmluZ19kaXNhYmxlZCIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCi8qIDUwMjA6IGRpc2FibGUgV2luZG93cyBuYXRpdmUgbm90aWZpY2F0aW9ucyBhbmQgdXNlIGFwcCBub3RpY2F0aW9ucyBpbnN0ZWFkIFtGRjExMStdIFtXSU5ET1dTXSAqKiovCiAgIC8vIHVzZXJfcHJlZigiYWxlcnRzLnVzZVN5c3RlbUJhY2tlbmQud2luZG93cy5ub3RpZmljYXRpb25zZXJ2ZXIuZW5hYmxlZCIsIGZhbHNlKTsKLyogNTAyMTogZGlzYWJsZSBsb2NhdGlvbiBiYXIgdXNpbmcgc2VhcmNoCiAqIERvbid0IGxlYWsgVVJMIHR5cG9zIHRvIGEgc2VhcmNoIGVuZ2luZSwgZ2l2ZSBhbiBlcnJvciBtZXNzYWdlIGluc3RlYWQKICogRXhhbXBsZXM6ICJzZWNyZXRwbGFjZSxjb20iLCAic2VjcmV0cGxhY2UvY29tIiwgInNlY3JldHBsYWNlIGNvbSIsICJzZWNyZXQgcGxhY2UuY29tIgogKiBbTk9URV0gVGhpcyBkb2VzIG5vdCBhZmZlY3QgZXhwbGljaXQgdXNlciBhY3Rpb24gc3VjaCBhcyB1c2luZyBzZWFyY2ggYnV0dG9ucyBpbiB0aGUKICogZHJvcGRvd24sIG9yIHVzaW5nIGtleXdvcmQgc2VhcmNoIHNob3J0Y3V0cyB5b3UgY29uZmlndXJlIGluIG9wdGlvbnMgKGUuZy4gImQiIGZvciBEdWNrRHVja0dvKSAqKiovCiAgIC8vIHVzZXJfcHJlZigia2V5d29yZC5lbmFibGVkIiwgZmFsc2UpOwoKLyoqKiBbU0VDVElPTiA1NTAwXTogT1BUSU9OQUwgSEFSREVOSU5HCiAgIE5vdCByZWNvbW1lbmRlZC4gT3ZlcnJpZGluZyB0aGVzZSBjYW4gY2F1c2UgYnJlYWthZ2UgYW5kIHBlcmZvcm1hbmNlIGlzc3VlcywKICAgdGhleSBhcmUgbW9zdGx5IGZpbmdlcnByaW50YWJsZSwgYW5kIHRoZSB0aHJlYXQgbW9kZWwgaXMgcHJhY3RpY2FsbHkgbm9uZXhpc3RlbnQKKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI1NTAwIHN5bnRheCBlcnJvcjogdGhpcyBpcyBhbiBleC1wYXJyb3QhIik7Ci8qIDU1MDE6IGRpc2FibGUgTWF0aE1MIChNYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlKSBbRkY1MStdCiAqIFsxXSBodHRwczovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVrZXkuY2dpP2tleXdvcmQ9bWF0aG1sICoqKi8KICAgLy8gdXNlcl9wcmVmKCJtYXRobWwuZGlzYWJsZWQiLCB0cnVlKTsgLy8gMTE3MzE5OQovKiA1NTAyOiBkaXNhYmxlIGluLWNvbnRlbnQgU1ZHIChTY2FsYWJsZSBWZWN0b3IgR3JhcGhpY3MpIFtGRjUzK10KICogWzFdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1maXJlZm94K3N2ZyAqKiovCiAgIC8vIHVzZXJfcHJlZigic3ZnLmRpc2FibGVkIiwgdHJ1ZSk7IC8vIDEyMTY4OTMKLyogNTUwMzogZGlzYWJsZSBncmFwaGl0ZQogKiBbMV0gaHR0cHM6Ly9jdmUubWl0cmUub3JnL2NnaS1iaW4vY3Zla2V5LmNnaT9rZXl3b3JkPWZpcmVmb3grZ3JhcGhpdGUKICogWzJdIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dyYXBoaXRlXyhTSUwpICoqKi8KICAgLy8gdXNlcl9wcmVmKCJnZnguZm9udF9yZW5kZXJpbmcuZ3JhcGhpdGUuZW5hYmxlZCIsIGZhbHNlKTsKLyogNTUwNDogZGlzYWJsZSBhc20uanMgW0ZGMjIrXQogKiBbMV0gaHR0cDovL2FzbWpzLm9yZy8KICogWzJdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1hc20uanMKICogWzNdIGh0dHBzOi8vcmgwZGV2LmdpdGh1Yi5pby9ibG9nLzIwMTcvdGhlLXJldHVybi1vZi10aGUtaml0LyAqKiovCiAgIC8vIHVzZXJfcHJlZigiamF2YXNjcmlwdC5vcHRpb25zLmFzbWpzIiwgZmFsc2UpOwovKiA1NTA1OiBkaXNhYmxlIElvbiBhbmQgYmFzZWxpbmUgSklUIHRvIGhhcmRlbiBhZ2FpbnN0IEpTIGV4cGxvaXRzCiAqIFtOT1RFXSBXaGVuIGJvdGggSW9uIGFuZCBKSVQgYXJlIGRpc2FibGVkLCBhbmQgdHJ1c3RlZHByaW5jaXBhbHMKICogaXMgZW5hYmxlZCwgdGhlbiBJb24gY2FuIHN0aWxsIGJlIHVzZWQgYnkgZXh0ZW5zaW9ucyAoMTU5OTIyNikKICogWzFdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1maXJlZm94K2ppdAogKiBbMl0gaHR0cHM6Ly9taWNyb3NvZnRlZGdlLmdpdGh1Yi5pby9lZGdldnIvcG9zdHMvU3VwZXItRHVwZXItU2VjdXJlLU1vZGUvICoqKi8KICAgLy8gdXNlcl9wcmVmKCJqYXZhc2NyaXB0Lm9wdGlvbnMuaW9uIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImphdmFzY3JpcHQub3B0aW9ucy5iYXNlbGluZWppdCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJqYXZhc2NyaXB0Lm9wdGlvbnMuaml0X3RydXN0ZWRwcmluY2lwYWxzIiwgdHJ1ZSk7IC8vIFtGRjc1K10gW0hJRERFTiBQUkVGXQovKiA1NTA2OiBkaXNhYmxlIFdlYkFzc2VtYmx5IFtGRjUyK10KICogVnVsbmVyYWJpbGl0aWVzIFsxXSBoYXZlIGluY3JlYXNpbmdseSBiZWVuIGZvdW5kLCBpbmNsdWRpbmcgdGhvc2Uga25vd24gYW5kIGZpeGVkCiAqIGluIG5hdGl2ZSBwcm9ncmFtcyB5ZWFycyBhZ28gWzJdLiBXQVNNIGhhcyBwb3dlcmZ1bCBsb3ctbGV2ZWwgYWNjZXNzLCBtYWtpbmcKICogY2VydGFpbiBhdHRhY2tzIChicnV0ZS1mb3JjZSkgYW5kIHZ1bG5lcmFiaWxpdGllcyBtb3JlIHBvc3NpYmxlCiAqIFtTVEFUU10gfjAuMiUgb2Ygd2Vic2l0ZXMsIGFib3V0IGhhbGYgb2Ygd2hpY2ggYXJlIGZvciBjcnl0b3BtaW5pbmcgLyBtYWx2ZXJ0aXNpbmcgWzJdWzNdCiAqIFsxXSBodHRwczovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVrZXkuY2dpP2tleXdvcmQ9d2FzbQogKiBbMl0gaHR0cHM6Ly9zcGVjdHJ1bS5pZWVlLm9yZy90ZWNoLXRhbGsvdGVsZWNvbS9zZWN1cml0eS9tb3JlLXdvcnJpZXMtb3Zlci10aGUtc2VjdXJpdHktb2Ytd2ViLWFzc2VtYmx5CiAqIFszXSBodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9oYWxmLW9mLXRoZS13ZWJzaXRlcy11c2luZy13ZWJhc3NlbWJseS11c2UtaXQtZm9yLW1hbGljaW91cy1wdXJwb3NlcyAqKiovCiAgIC8vIHVzZXJfcHJlZigiamF2YXNjcmlwdC5vcHRpb25zLndhc20iLCBmYWxzZSk7Ci8qIDU1MDc6IGRpc2FibGUgcmVuZGVyaW5nIG9mIFNWRyBPcGVuVHlwZSBmb250cyAqKiovCiAgIC8vIHVzZXJfcHJlZigiZ2Z4LmZvbnRfcmVuZGVyaW5nLm9wZW50eXBlX3N2Zy5lbmFibGVkIiwgZmFsc2UpOwovKiA1NTA4OiBkaXNhYmxlIGFsbCBEUk0gY29udGVudCAoRU1FOiBFbmNyeXB0aW9uIE1lZGlhIEV4dGVuc2lvbikKICogT3B0aW9uYWxseSBoaWRlIHRoZSBVSSBzZXR0aW5nIHdoaWNoIGFsc28gZGlzYWJsZXMgdGhlIERSTSBwcm9tcHQKICogW1NFVFRJTkddIEdlbmVyYWw+RFJNIENvbnRlbnQ+UGxheSBEUk0tY29udHJvbGxlZCBjb250ZW50CiAqIFtURVNUXSBodHRwczovL2JpdG1vdmluLmNvbS9kZW1vcy9kcm0KICogWzFdIGh0dHBzOi8vd3d3LmVmZi5vcmcvZGVlcGxpbmtzLzIwMTcvMTAvZHJtcy1kZWFkLWNhbmFyeS1ob3ctd2UtanVzdC1sb3N0LXdlYi13aGF0LXdlLWxlYXJuZWQtaXQtYW5kLXdoYXQtd2UtbmVlZC1kby1uZXh0ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJtZWRpYS5lbWUuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLmVtZS51aS5lbmFibGVkIiwgZmFsc2UpOwovKiA1NTA5OiBkaXNhYmxlIElQdjYgaWYgdXNpbmcgYSBWUE4KICogVGhpcyBpcyBhbiBhcHBsaWNhdGlvbiBsZXZlbCBmYWxsYmFjay4gRGlzYWJsaW5nIElQdjYgaXMgYmVzdCBkb25lIGF0IGFuIE9TL25ldHdvcmsKICogbGV2ZWwsIGFuZC9vciBjb25maWd1cmVkIHByb3Blcmx5IGluIHN5c3RlbSB3aWRlIFZQTiBzZXR1cHMuCiAqIFtTRVRVUC1XRUJdIFBSX0NPTk5FQ1RfUkVTRVRfRVJST1IKICogW05PVEVdIFBIUCBkZWZhdWx0cyB0byBJUHY2IHdpdGggImxvY2FsaG9zdCIuIFVzZSAicGhwIC1TIDEyNy4wLjAuMTpQT1JUIgogKiBbVEVTVF0gaHR0cHM6Ly9pcGxlYWsub3JnLwogKiBbMV0gaHR0cHM6Ly93d3cuaW50ZXJuZXRzb2NpZXR5Lm9yZy90YWcvaXB2Ni1zZWN1cml0eS8gKE15dGhzIDIsNCw1LDYpICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmRucy5kaXNhYmxlSVB2NiIsIHRydWUpOwovKiA1NTEwOiBjb250cm9sIHdoZW4gdG8gc2VuZCBhIGNyb3NzLW9yaWdpbiByZWZlcmVyCiAqIDA9YWx3YXlzIChkZWZhdWx0KSwgMT1vbmx5IGlmIGJhc2UgZG9tYWlucyBtYXRjaCwgMj1vbmx5IGlmIGhvc3RzIG1hdGNoCiAqIFtOT1RFXSBXaWxsIGNhdXNlIGJyZWFrYWdlOiBvbGRlciBtb2RlbXMvcm91dGVycyBhbmQgc29tZSBzaXRlcyBlLmcgYmFua3MsIHZpbWVvLCBpY2xvdWQsIGluc3RhZ3JhbSAqKiovCiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5odHRwLnJlZmVyZXIuWE9yaWdpblBvbGljeSIsIDIpOwovKiA1NTExOiBzZXQgRG9IIGJvb3RzdHJhcCBhZGRyZXNzIFtGRjg5K10KICogRmlyZWZveCB1c2VzIHRoZSBzeXN0ZW0gRE5TIHRvIGluaXRpYWxseSByZXNvbHZlIHRoZSBJUCBhZGRyZXNzIG9mIHlvdXIgRG9IIHNlcnZlci4KICogV2hlbiBzZXQgdG8gYSB2YWxpZCwgd29ya2luZyB2YWx1ZSB0aGF0IG1hdGNoZXMgeW91ciAibmV0d29yay50cnIudXJpIiAoMDcxMikgRmlyZWZveAogKiB3b24ndCB1c2UgdGhlIHN5c3RlbSBETlMuIElmIHRoZSBJUCBkb2Vzbid0IG1hdGNoIHRoZW4gRG9IIHdvbid0IHdvcmsgKioqLwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsudHJyLmJvb3RzdHJhcEFkZHIiLCAiMTAuMC4wLjEiKSAvLyBbSElEREVOIFBSRUZdCgovKioqIFtTRUNUSU9OIDYwMDBdOiBET04nVCBUT1VDSCAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjYwMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgJ2lzdG9yeSEiKTsKLyogNjAwMTogZW5mb3JjZSBGaXJlZm94IGJsb2NrbGlzdAogKiBbV0hZXSBJdCBpbmNsdWRlcyB1cGRhdGVzIGZvciAicmV2b2tlZCBjZXJ0aWZpY2F0ZXMiCiAqIFsxXSBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvc2VjdXJpdHkvMjAxNS8wMy8wMy9yZXZva2luZy1pbnRlcm1lZGlhdGUtY2VydGlmaWNhdGVzLWludHJvZHVjaW5nLW9uZWNybC8gKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMuYmxvY2tsaXN0LmVuYWJsZWQiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCi8qIDYwMDI6IGVuZm9yY2Ugbm8gcmVmZXJlciBzcG9vZmluZwogKiBbV0hZXSBTcG9vZmluZyBjYW4gYWZmZWN0IENTUkYgKENyb3NzLVNpdGUgUmVxdWVzdCBGb3JnZXJ5KSBwcm90ZWN0aW9ucyAqKiovCnVzZXJfcHJlZigibmV0d29yay5odHRwLnJlZmVyZXIuc3Bvb2ZTb3VyY2UiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KLyogNjAwNDogZW5mb3JjZSBhIHNlY3VyaXR5IGRlbGF5IG9uIHNvbWUgY29uZmlybWF0aW9uIGRpYWxvZ3Mgc3VjaCBhcyBpbnN0YWxsLCBvcGVuL3NhdmUKICogWzFdIGh0dHBzOi8vd3d3LnNxdWFyZWZyZWUuY29tLzIwMDQvMDcvMDEvcmFjZS1jb25kaXRpb25zLWluLXNlY3VyaXR5LWRpYWxvZ3MvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5kaWFsb2dfZW5hYmxlX2RlbGF5IiwgMTAwMCk7IC8vIFtERUZBVUxUOiAxMDAwXQovKiA2MDA4OiBlbmZvcmNlIG5vIEZpcnN0IFBhcnR5IElzb2xhdGlvbiBbRkY1MStdCiAqIFtXQVJOSU5HXSBSZXBsYWNlZCB3aXRoIG5ldHdvcmsgcGFydGl0aW9uaW5nIChGRjg1KykgYW5kIFRDUCAoMjcwMSksIGFuZCBlbmFibGluZyBGUEkKICogZGlzYWJsZXMgdGhvc2UuIEZQSSBpcyBubyBsb25nZXIgbWFpbnRhaW5lZCBleGNlcHQgYXQgVG9yIFByb2plY3QgZm9yIFRvciBCcm93c2VyJ3MgY29uZmlnICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LmZpcnN0cGFydHkuaXNvbGF0ZSIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQovKiA2MDA5OiBlbmZvcmNlIFNtYXJ0QmxvY2sgc2hpbXMgW0ZGODErXQogKiBJbiBGRjk2KyB0aGVzZSBhcmUgbGlzdGVkIGluIGFib3V0OmNvbXBhdAogKiBbMV0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL3NlY3VyaXR5LzIwMjEvMDMvMjMvaW50cm9kdWNpbmctc21hcnRibG9jay8gKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMud2ViY29tcGF0LmVuYWJsZV9zaGltcyIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KLyogNjAxMDogZW5mb3JjZSBubyBUTFMgMS4wLzEuMSBkb3duZ3JhZGVzCiAqIFtURVNUXSBodHRwczovL3Rscy12MS0xLmJhZHNzbC5jb206MTAxMC8gKioqLwp1c2VyX3ByZWYoInNlY3VyaXR5LnRscy52ZXJzaW9uLmVuYWJsZS1kZXByZWNhdGVkIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCi8qIDYwMTE6IGVuZm9yY2UgZGlzYWJsaW5nIG9mIFdlYiBDb21wYXRpYmlsaXR5IFJlcG9ydGVyIFtGRjU2K10KICogV2ViIENvbXBhdGliaWxpdHkgUmVwb3J0ZXIgYWRkcyBhICJSZXBvcnQgU2l0ZSBJc3N1ZSIgYnV0dG9uIHRvIHNlbmQgZGF0YSB0byBNb3ppbGxhCiAqIFtXSFldIFRvIHByZXZlbnQgd2FzdGluZyBNb3ppbGxhJ3MgdGltZSB3aXRoIGEgY3VzdG9tIHNldHVwICoqKi8KdXNlcl9wcmVmKCJleHRlbnNpb25zLndlYmNvbXBhdC1yZXBvcnRlci5lbmFibGVkIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCi8qIDYwMTI6IGVuZm9yY2UgUXVhcmFudGluZWQgRG9tYWlucyBbRkYxMTUrXQogKiBbV0hZXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvcXVhcmFudGluZWQtZG9tYWlucyAqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMucXVhcmFudGluZWREb21haW5zLmVuYWJsZWQiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCi8qIDYwNTA6IHByZWZzQ2xlYW5lcjogcmVzZXQgcHJldmlvdXNseSBhY3RpdmUgaXRlbXMgcmVtb3ZlZCBmcm9tIGFya2VuZm94IEZGMTAyKyAqKiovCiAgIC8vIHVzZXJfcHJlZigiYmVhY29uLmVuYWJsZWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zdGFydHVwLmJsYW5rV2luZG93IiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFiLnByZWxvYWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5uZXd0YWJwYWdlLmFjdGl2aXR5LXN0cmVhbS5mZWVkcy5kaXNjb3ZlcnlzdHJlYW1mZWVkIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZmVlZHMuc25pcHBldHMiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5yZWdpb24ubmV0d29yay51cmwiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5yZWdpb24udXBkYXRlLmVuYWJsZWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zc2xfb3ZlcnJpZGVfYmVoYXZpb3IiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZGV2dG9vbHMuY2hyb21lLmVuYWJsZWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZG9tLmRpc2FibGVfYmVmb3JldW5sb2FkIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImRvbS5kaXNhYmxlX29wZW5fZHVyaW5nX2xvYWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZXh0ZW5zaW9ucy5mb3JtYXV0b2ZpbGwuYXZhaWxhYmxlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMuZm9ybWF1dG9maWxsLmFkZHJlc3Nlcy5zdXBwb3J0ZWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZXh0ZW5zaW9ucy5mb3JtYXV0b2ZpbGwuY3JlZGl0Q2FyZHMuYXZhaWxhYmxlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMuZm9ybWF1dG9maWxsLmNyZWRpdENhcmRzLnN1cHBvcnRlZCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJtaWRkbGVtb3VzZS5jb250ZW50TG9hZFVSTCIsICIiKTsKLyogNjA1MTogcHJlZnNDbGVhbmVyOiByZXNldCBwcmV2aW91c2x5IGFjdGl2ZSBpdGVtcyByZW1vdmVkIGZyb20gYXJrZW5mb3ggRkYxMTUrICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLnByb3RvY29sLWhhbmRsZXIuZXh0ZXJuYWwubXMtd2luZG93cy1zdG9yZSIsICIiKTsKCi8qKiogW1NFQ1RJT04gNzAwMF06IERPTidUIEJPVEhFUiAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjcwMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgcHVzaGluZyB1cCBkYWlzaWVzISIpOwovKiA3MDAxOiBkaXNhYmxlIEFQSXMKICogTG9jYXRpb24tQXdhcmUgQnJvd3NpbmcsIEZ1bGwgU2NyZWVuCiAqIFtXSFldIFRoZSBBUEkgc3RhdGUgaXMgZWFzaWx5IGZpbmdlcnByaW50YWJsZS4KICogR2VvIGlzIGJlaGluZCBhIHByb21wdCAoNzAwMikuIEZ1bGwgc2NyZWVuIHJlcXVpcmVzIHVzZXIgaW50ZXJhY3Rpb24gKioqLwogICAvLyB1c2VyX3ByZWYoImdlby5lbmFibGVkIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImZ1bGwtc2NyZWVuLWFwaS5lbmFibGVkIiwgZmFsc2UpOwovKiA3MDAyOiBzZXQgZGVmYXVsdCBwZXJtaXNzaW9ucwogKiBMb2NhdGlvbiwgQ2FtZXJhLCBNaWNyb3Bob25lLCBOb3RpZmljYXRpb25zIFtGRjU4K10gVmlydHVhbCBSZWFsaXR5IFtGRjczK10KICogMD1hbHdheXMgYXNrIChkZWZhdWx0KSwgMT1hbGxvdywgMj1ibG9jawogKiBbV0hZXSBUaGVzZSBhcmUgZmluZ2VycHJpbnRhYmxlIHZpYSBQZXJtaXNzaW9ucyBBUEksIGV4Y2VwdCBWUi4gSnVzdCBhZGQgc2l0ZQogKiBleGNlcHRpb25zIGFzIGFsbG93L2Jsb2NrIGZvciBmcmVxdWVudGx5IHZpc2l0ZWQvYW5ub3lpbmcgc2l0ZXM6IGkuZS4gbm90IGdsb2JhbAogKiBbU0VUVElOR10gdG8gYWRkIHNpdGUgZXhjZXB0aW9uczogQ3RybCtJPlBlcm1pc3Npb25zPgogKiBbU0VUVElOR10gdG8gbWFuYWdlIHNpdGUgZXhjZXB0aW9uczogT3B0aW9ucz5Qcml2YWN5ICYgU2VjdXJpdHk+UGVybWlzc2lvbnM+U2V0dGluZ3MgKioqLwogICAvLyB1c2VyX3ByZWYoInBlcm1pc3Npb25zLmRlZmF1bHQuZ2VvIiwgMCk7CiAgIC8vIHVzZXJfcHJlZigicGVybWlzc2lvbnMuZGVmYXVsdC5jYW1lcmEiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5kZWZhdWx0Lm1pY3JvcGhvbmUiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5kZWZhdWx0LmRlc2t0b3Atbm90aWZpY2F0aW9uIiwgMCk7CiAgIC8vIHVzZXJfcHJlZigicGVybWlzc2lvbnMuZGVmYXVsdC54ciIsIDApOyAvLyBWaXJ0dWFsIFJlYWxpdHkKLyogNzAwMzogZGlzYWJsZSBub24tbW9kZXJuIGNpcGhlciBzdWl0ZXMgWzFdCiAqIFtXSFldIFBhc3NpdmUgZmluZ2VycHJpbnRpbmcuIE1pbmltYWwvbm9uLWV4aXN0ZW50IHRocmVhdCBvZiBkb3duZ3JhZGUgYXR0YWNrcwogKiBbMV0gaHR0cHM6Ly9icm93c2VybGVha3MuY29tL3NzbCAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsMy5lY2RoZV9lY2RzYV9hZXNfMTI4X3NoYSIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlIEZGMTA5K10KICAgLy8gdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wzLmVjZGhlX2VjZHNhX2Flc18yNTZfc2hhIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2UgRkYxMDkrXQogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnNzbDMuZWNkaGVfcnNhX2Flc18xMjhfc2hhIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnNzbDMuZWNkaGVfcnNhX2Flc18yNTZfc2hhIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnNzbDMucnNhX2Flc18xMjhfZ2NtX3NoYTI1NiIsIGZhbHNlKTsgLy8gbm8gUEZTCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsMy5yc2FfYWVzXzI1Nl9nY21fc2hhMzg0IiwgZmFsc2UpOyAvLyBubyBQRlMKICAgLy8gdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wzLnJzYV9hZXNfMTI4X3NoYSIsIGZhbHNlKTsgLy8gbm8gUEZTCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsMy5yc2FfYWVzXzI1Nl9zaGEiLCBmYWxzZSk7IC8vIG5vIFBGUwovKiA3MDA0OiBjb250cm9sIFRMUyB2ZXJzaW9ucwogKiBbV0hZXSBQYXNzaXZlIGZpbmdlcnByaW50aW5nIGFuZCBzZWN1cml0eSAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkudGxzLnZlcnNpb24ubWluIiwgMyk7IC8vIFtERUZBVUxUOiAzXQogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnRscy52ZXJzaW9uLm1heCIsIDQpOwovKiA3MDA1OiBkaXNhYmxlIFNTTCBzZXNzaW9uIElEcyBbRkYzNitdCiAqIFtXSFldIFBhc3NpdmUgZmluZ2VycHJpbnRpbmcgYW5kIHBlcmYgY29zdHMuIFRoZXNlIGFyZSBzZXNzaW9uLW9ubHkKICogYW5kIGlzb2xhdGVkIHdpdGggbmV0d29yayBwYXJ0aXRpb25pbmcgKEZGODUrKSBhbmQvb3IgY29udGFpbmVycyAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsLmRpc2FibGVfc2Vzc2lvbl9pZGVudGlmaWVycyIsIHRydWUpOwovKiA3MDA2OiBvbmlvbnMKICogW1dIWV0gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgaGlkZGVuIHNlcnZpY2VzLiBVc2UgVG9yIEJyb3dzZXIgKioqLwogICAvLyB1c2VyX3ByZWYoImRvbS5zZWN1cmVjb250ZXh0LmFsbG93bGlzdF9vbmlvbnMiLCB0cnVlKTsgLy8gW0ZGOTcrXSAxMzgyMzU5LzE3NDQwMDYKICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci5oaWRlT25pb25Tb3VyY2UiLCB0cnVlKTsgLy8gMTMwNTE0NAovKiA3MDA3OiByZWZlcmVycwogKiBbV0hZXSBPbmx5IGNyb3NzLW9yaWdpbiByZWZlcmVycyAoMTYwMiwgNTUxMCkgbWF0dGVyICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuc2VuZFJlZmVyZXJIZWFkZXIiLCAyKTsKICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci50cmltbWluZ1BvbGljeSIsIDApOwovKiA3MDA4OiBzZXQgdGhlIGRlZmF1bHQgUmVmZXJyZXIgUG9saWN5IFtGRjU5K10KICogMD1uby1yZWZlcmVyLCAxPXNhbWUtb3JpZ2luLCAyPXN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4sIDM9bm8tcmVmZXJyZXItd2hlbi1kb3duZ3JhZGUKICogW1dIWV0gRGVmYXVsdHMgYXJlIGZpbmUuIFRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYSBzaXRlLWNvbnRyb2xsZWQgUmVmZXJyZXIgUG9saWN5ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci5kZWZhdWx0UG9saWN5IiwgMik7IC8vIFtERUZBVUxUOiAyXQogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5yZWZlcmVyLmRlZmF1bHRQb2xpY3kucGJtb2RlIiwgMik7IC8vIFtERUZBVUxUOiAyXQovKiA3MDEwOiBkaXNhYmxlIEhUVFAgQWx0ZXJuYXRpdmUgU2VydmljZXMgW0ZGMzcrXQogKiBbV0hZXSBBbHJlYWR5IGlzb2xhdGVkIHdpdGggbmV0d29yayBwYXJ0aXRpb25pbmcgKEZGODUrKSAqKiovCiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5odHRwLmFsdHN2Yy5lbmFibGVkIiwgZmFsc2UpOwovKiA3MDExOiBkaXNhYmxlIHdlYnNpdGUgY29udHJvbCBvdmVyIGJyb3dzZXIgcmlnaHQtY2xpY2sgY29udGV4dCBtZW51CiAqIFtXSFldIEp1c3QgdXNlIFNoaWZ0LVJpZ2h0LUNsaWNrICoqKi8KICAgLy8gdXNlcl9wcmVmKCJkb20uZXZlbnQuY29udGV4dG1lbnUuZW5hYmxlZCIsIGZhbHNlKTsKLyogNzAxMjogZGlzYWJsZSBpY29uIGZvbnRzIChnbHlwaHMpIGFuZCBsb2NhbCBmYWxsYmFjayByZW5kZXJpbmcKICogW1dIWV0gQnJlYWthZ2UsIGZvbnQgZmFsbGJhY2sgaXMgZXF1aXZhbGVuY3ksIGFsc28gUkZQCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzc4OTc4OAogKiBbMl0gaHR0cHM6Ly9naXRsYWIudG9ycHJvamVjdC5vcmcvbGVnYWN5L3RyYWMvLS9pc3N1ZXMvODQ1NSAqKiovCiAgIC8vIHVzZXJfcHJlZigiZ2Z4LmRvd25sb2FkYWJsZV9mb250cy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY0MStdCiAgIC8vIHVzZXJfcHJlZigiZ2Z4LmRvd25sb2FkYWJsZV9mb250cy5mYWxsYmFja19kZWxheSIsIC0xKTsKLyogNzAxMzogZGlzYWJsZSBDbGlwYm9hcmQgQVBJCiAqIFtXSFldIEZpbmdlcnByaW50YWJsZS4gQnJlYWthZ2UuIEN1dC9jb3B5L3Bhc3RlIHJlcXVpcmUgdXNlcgogKiBpbnRlcmFjdGlvbiwgYW5kIHBhc3RlIGlzIGxpbWl0ZWQgdG8gZm9jdXNlZCBlZGl0YWJsZSBmaWVsZHMgKioqLwogICAvLyB1c2VyX3ByZWYoImRvbS5ldmVudC5jbGlwYm9hcmRldmVudHMuZW5hYmxlZCIsIGZhbHNlKTsKLyogNzAxNDogZGlzYWJsZSBTeXN0ZW0gQWRkLW9uIHVwZGF0ZXMKICogW1dIWV0gSXQgY2FuIGNvbXByb21pc2Ugc2VjdXJpdHkuIFN5c3RlbSBhZGRvbnMgc2hpcCB3aXRoIHByZWZzLCB1c2UgdGhvc2UgKioqLwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMuc3lzdGVtQWRkb24udXBkYXRlLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjYyK10KICAgLy8gdXNlcl9wcmVmKCJleHRlbnNpb25zLnN5c3RlbUFkZG9uLnVwZGF0ZS51cmwiLCAiIik7IC8vIFtGRjQ0K10KLyogNzAxNTogZW5hYmxlIHRoZSBETlQgKERvIE5vdCBUcmFjaykgSFRUUCBoZWFkZXIKICogW1dIWV0gRE5UIGlzIGVuZm9yY2VkIHdpdGggVHJhY2tpbmcgUHJvdGVjdGlvbiB3aGljaCBpcyB1c2VkIGluIEVUUCBTdHJpY3QgKDI3MDEpICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmRvbm90dHJhY2toZWFkZXIuZW5hYmxlZCIsIHRydWUpOwovKiA3MDE2OiBjdXN0b21pemUgRVRQIHNldHRpbmdzCiAqIFtXSFldIEFya2VuZm94IG9ubHkgc3VwcG9ydHMgc3RyaWN0ICgyNzAxKSB3aGljaCBzZXRzIHRoZXNlIGF0IHJ1bnRpbWUgKioqLwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuY29va2llLmNvb2tpZUJlaGF2aW9yIiwgNSk7IC8vIFtERUZBVUxUOiA1IEZGMTAzK10KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci5kaXNhbGxvd0Nyb3NzU2l0ZVJlbGF4aW5nRGVmYXVsdCIsIHRydWUpOwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5yZWZlcmVyLmRpc2FsbG93Q3Jvc3NTaXRlUmVsYXhpbmdEZWZhdWx0LnRvcF9uYXZpZ2F0aW9uIiwgdHJ1ZSk7IC8vIFtGRjEwMCtdCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5wYXJ0aXRpb24ubmV0d29ya19zdGF0ZS5vY3NwX2NhY2hlIiwgdHJ1ZSk7CiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5xdWVyeV9zdHJpcHBpbmcuZW5hYmxlZCIsIHRydWUpOyAvLyBbRkYxMDErXSBbRVRQIEZGMTAyK10KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LnRyYWNraW5ncHJvdGVjdGlvbi5lbmFibGVkIiwgdHJ1ZSk7CiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS50cmFja2luZ3Byb3RlY3Rpb24uc29jaWFsdHJhY2tpbmcuZW5hYmxlZCIsIHRydWUpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kudHJhY2tpbmdwcm90ZWN0aW9uLmNyeXB0b21pbmluZy5lbmFibGVkIiwgdHJ1ZSk7IC8vIFtERUZBVUxUOiB0cnVlXQogICAvLyB1c2VyX3ByZWYoInByaXZhY3kudHJhY2tpbmdwcm90ZWN0aW9uLmZpbmdlcnByaW50aW5nLmVuYWJsZWQiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCi8qIDcwMTc6IGRpc2FibGUgc2VydmljZSB3b3JrZXJzCiAqIFtXSFldIEFscmVhZHkgaXNvbGF0ZWQgd2l0aCBUQ1AgKDI3MDEpIGJlaGluZCBhIHByZWYgKDI3MTApICoqKi8KICAgLy8gdXNlcl9wcmVmKCJkb20uc2VydmljZVdvcmtlcnMuZW5hYmxlZCIsIGZhbHNlKTsKLyogNzAxODogZGlzYWJsZSBXZWIgTm90aWZpY2F0aW9ucyBbRkYyMitdCiAqIFtXSFldIFdlYiBOb3RpZmljYXRpb25zIGFyZSBiZWhpbmQgYSBwcm9tcHQgKDcwMDIpCiAqIFsxXSBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvZW4vcHJvZHVjdHMvZmlyZWZveC9ibG9jay1ub3RpZmljYXRpb24tcmVxdWVzdHMvICoqKi8KICAgLy8gdXNlcl9wcmVmKCJkb20ud2Vibm90aWZpY2F0aW9ucy5lbmFibGVkIiwgZmFsc2UpOwovKiA3MDE5OiBkaXNhYmxlIFB1c2ggTm90aWZpY2F0aW9ucyBbRkY0NCtdCiAqIFtXSFldIFB1c2ggcmVxdWlyZXMgc3Vic2NyaXB0aW9uCiAqIFtOT1RFXSBUbyByZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnMsIHJlc2V0ICJkb20ucHVzaC51c2VyQWdlbnRJRCIKICogWzFdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi9wdXNoLW5vdGlmaWNhdGlvbnMtZmlyZWZveCAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLnB1c2guZW5hYmxlZCIsIGZhbHNlKTsKLyogNzAyMDogZGlzYWJsZSBXZWJSVEMgKFdlYiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbikKICogW1dIWV0gRmlyZWZveCBkZXNrdG9wIHVzZXMgbUROUyBob3N0bmFtZSBvYmZ1c2NhdGlvbiBhbmQgdGhlIHByaXZhdGUgSVAgaXMgbmV2ZXIgZXhwb3NlZCB1bnRpbAogKiByZXF1aXJlZCBpbiBUUlVTVEVEIHNjZW5hcmlvczsgaS5lLiBhZnRlciB5b3UgZ3JhbnQgZGV2aWNlIChtaWNyb3Bob25lIG9yIGNhbWVyYSkgYWNjZXNzCiAqIFtURVNUXSBodHRwczovL2Jyb3dzZXJsZWFrcy5jb20vd2VicnRjCiAqIFsxXSBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZGlzY3Vzcy13ZWJydGMvYy82c3RRWGk3MkJFVS9tLzJGd1pkMjRVQVFBSgogKiBbMl0gaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9kcmFmdC1pZXRmLW1tdXNpYy1tZG5zLWljZS1jYW5kaWRhdGVzI3NlY3Rpb24tMy4xLjEgKioqLwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLnBlZXJjb25uZWN0aW9uLmVuYWJsZWQiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDgwMDBdOiBET04nVCBCT1RIRVI6IEZJTkdFUlBSSU5USU5HCiAgIFtXSFldIFRoZXkgYXJlIGluc3VmZmljaWVudCB0byBoZWxwIGFudGktZmluZ2VycHJpbnRpbmcgYW5kIGRvIG1vcmUgaGFybSB0aGFuIGdvb2QKICAgW1dBUk5JTkddIERPIE5PVCBVU0Ugd2l0aCBSRlAuIFJGUCBhbHJlYWR5IGNvdmVycyB0aGVzZSBhbmQgdGhleSBjYW4gaW50ZXJmZXJlCioqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiODAwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBjcm9zc2VkIHRoZSBKb3JkYW4iKTsKLyogODAwMTogcHJlZnNDbGVhbmVyOiByZXNldCBpdGVtcyB1c2VsZXNzIGZvciBhbnRpLWZpbmdlcnByaW50aW5nICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLmRpc3BsYXkudXNlX2RvY3VtZW50X2ZvbnRzIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuem9vbS5zaXRlU3BlY2lmaWMiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZGV2aWNlLnNlbnNvcnMuZW5hYmxlZCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJkb20uZW5hYmxlX3BlcmZvcm1hbmNlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImRvbS5lbmFibGVfcmVzb3VyY2VfdGltaW5nIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImRvbS5nYW1lcGFkLmVuYWJsZWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZG9tLm1heEhhcmR3YXJlQ29uY3VycmVuY3kiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZG9tLnczY190b3VjaF9ldmVudHMuZW5hYmxlZCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJkb20ud2ViYXVkaW8uZW5hYmxlZCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJmb250LnN5c3RlbS53aGl0ZWxpc3QiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZ2VuZXJhbC5hcHBuYW1lLm92ZXJyaWRlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImdlbmVyYWwuYXBwdmVyc2lvbi5vdmVycmlkZSIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJnZW5lcmFsLmJ1aWxkSUQub3ZlcnJpZGUiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigiZ2VuZXJhbC5vc2NwdS5vdmVycmlkZSIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJnZW5lcmFsLnBsYXRmb3JtLm92ZXJyaWRlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImdlbmVyYWwudXNlcmFnZW50Lm92ZXJyaWRlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLm5hdmlnYXRvci5lbmFibGVkIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLm9uZGV2aWNlY2hhbmdlLmVuYWJsZWQiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigibWVkaWEudmlkZW9fc3RhdHMuZW5hYmxlZCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJtZWRpYS53ZWJzcGVlY2guc3ludGguZW5hYmxlZCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJ1aS51c2Vfc3RhbmRpbnNfZm9yX25hdGl2ZV9jb2xvcnMiLCAiIik7CiAgIC8vIHVzZXJfcHJlZigid2ViZ2wuZW5hYmxlLWRlYnVnLXJlbmRlcmVyLWluZm8iLCAiIik7CgovKioqIFtTRUNUSU9OIDkwMDBdOiBOT04tUFJPSkVDVCBSRUxBVEVEICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiOTAwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBjYXNoZWQgaW4gJ2lzIGNoaXBzISIpOwovKiA5MDAxOiBkaXNhYmxlIHdlbGNvbWUgbm90aWNlcyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zdGFydHVwLmhvbWVwYWdlX292ZXJyaWRlLm1zdG9uZSIsICJpZ25vcmUiKTsKLyogOTAwMjogZGlzYWJsZSBHZW5lcmFsPkJyb3dzaW5nPlJlY29tbWVuZCBleHRlbnNpb25zL2ZlYXR1cmVzIGFzIHlvdSBicm93c2UgW0ZGNjcrXSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5uZXd0YWJwYWdlLmFjdGl2aXR5LXN0cmVhbS5hc3JvdXRlci51c2VycHJlZnMuY2ZyLmFkZG9ucyIsIGZhbHNlKTsKdXNlcl9wcmVmKCJicm93c2VyLm5ld3RhYnBhZ2UuYWN0aXZpdHktc3RyZWFtLmFzcm91dGVyLnVzZXJwcmVmcy5jZnIuZmVhdHVyZXMiLCBmYWxzZSk7Ci8qIDkwMDM6IGRpc2FibGUgV2hhdCdzIE5ldyB0b29sYmFyIGljb24gW0ZGNjkrXSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5tZXNzYWdpbmctc3lzdGVtLndoYXRzTmV3UGFuZWwuZW5hYmxlZCIsIGZhbHNlKTsKLyogOTAwNDogZGlzYWJsZSBzZWFyY2ggdGVybXMgW0ZGMTEwK10KICogW1NFVFRJTkddIFNlYXJjaD5TZWFyY2ggQmFyPlVzZSB0aGUgYWRkcmVzcyBiYXIgZm9yIHNlYXJjaCBhbmQgbmF2aWdhdGlvbj5TaG93IHNlYXJjaCB0ZXJtcyBpbnN0ZWFkIG9mIFVSTC4uLiAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc2hvd1NlYXJjaFRlcm1zLmVuYWJsZWQiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDk5OTldOiBERVBSRUNBVEVEIC8gUkVNT1ZFRCAvIExFR0FDWSAvIFJFTkFNRUQKICAgRG9jdW1lbnRhdGlvbiBkZW5vdGVkIGFzIFstXS4gSXRlbXMgZGVwcmVjYXRlZCBwcmlvciB0byBGRjkxIGhhdmUgYmVlbiBhcmNoaXZlZCBhdCBbMV0KICAgWzFdIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmtlbmZveC91c2VyLmpzL2lzc3Vlcy8xMjMKKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI5OTk5IHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIHNodWZmbGVkIG9mZiAnaXMgbW9ydGFsIGNvaWwhIik7Ci8qIEVTUjEwMi54IHN0aWxsIHVzZXMgYWxsIHRoZSBmb2xsb3dpbmcgcHJlZnMKLy8gW05PVEVdIHJlcGxhY2UgdGhlICogd2l0aCBhIHNsYXNoIGluIHRoZSBsaW5lIGFib3ZlIHRvIHJlLWVuYWJsZSBhY3RpdmUgb25lcwovLyBGRjEwMwovLyAyODAxOiBkZWxldGUgY29va2llcyBhbmQgc2l0ZSBkYXRhIG9uIGV4aXQgLSByZXBsYWNlZCBieSBzYW5pdGl6ZU9uU2h1dGRvd24qICgyODEwKQogICAvLyAwPWtlZXAgdW50aWwgdGhleSBleHBpcmUgKGRlZmF1bHQpLCAyPWtlZXAgdW50aWwgeW91IGNsb3NlIEZpcmVmb3gKICAgLy8gW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5Db29raWVzIGFuZCBTaXRlIERhdGE+RGVsZXRlIGNvb2tpZXMgYW5kIHNpdGUgZGF0YSB3aGVuIEZpcmVmb3ggaXMgY2xvc2VkCiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL2J1Z2xpc3QuY2dpP2J1Z19pZD0xNjgxNDkzLDE2ODE0OTUsMTY4MTQ5OCwxNzU5NjY1LDE3NjQ3NjEKdXNlcl9wcmVmKCJuZXR3b3JrLmNvb2tpZS5saWZldGltZVBvbGljeSIsIDIpOwovLyA2MDEyOiBkaXNhYmxlIFNIQS0xIGNlcnRpZmljYXRlcwogICAvLyBbLV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNzY2Njg3CiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkucGtpLnNoYTFfZW5mb3JjZW1lbnRfbGV2ZWwiLCAxKTsgLy8gW0RFRkFVTFQ6IDFdCi8vIEZGMTE0Ci8vIDI4MTY6IHNldCBjYWNoZSB0byBjbGVhciBvbiBleGl0IFtGRjk2K10KICAgLy8gW05PVEVdIFdlIGFscmVhZHkgZGlzYWJsZSBkaXNrIGNhY2hlICgxMDAxKSBhbmQgY2xlYXIgb24gZXhpdCAoMjgxMSkgd2hpY2ggaXMgbW9yZSByb2J1c3QKICAgLy8gWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTY3MTE4MgogICAvLyBbLV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xODIxNjUxCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5jbGVhcnNpdGVkYXRhLmNhY2hlLmVuYWJsZWQiLCB0cnVlKTsKLy8gNDUwNTogZXhwZXJpbWVudGFsIFJGUCBbRkY5MStdCiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE4MjQyMzUKICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LnJlc2lzdEZpbmdlcnByaW50aW5nLnRlc3RHcmFudWxhcml0eU1hc2siLCAwKTsKLy8gNTAxNzogZGlzYWJsZSBGb3JtIEF1dG9maWxsIGhldXJpc3RpY3MKICAgLy8gSGV1cmlzdGljcyBjb250cm9scyBGb3JtIEF1dG9maWxsIG9uIGZvcm1zIHdpdGhvdXQgQGF1dG9jb21wbGV0ZSBhdHRyaWJ1dGVzCiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE4Mjk2NzAKICAgLy8gdXNlcl9wcmVmKCJleHRlbnNpb25zLmZvcm1hdXRvZmlsbC5oZXVyaXN0aWNzLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjU1K10KLy8gRkYxMTUKICAgLy8gNzAwMTogZGlzYWJsZSBvZmZsaW5lIGNhY2hlIChhcHBDYWNoZSkKICAgLy8gW05PVEVdIGFwcENhY2hlIHN0b3JhZ2UgY2FwYWJpbGl0eSB3YXMgcmVtb3ZlZCBpbiBGRjkwCiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE2Nzc3MTgKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLmNhY2hlLm9mZmxpbmUuZW5hYmxlIiwgZmFsc2UpOwovLyAqKiovCgovKiBFU1IxMTUueCBzdGlsbCB1c2VzIGFsbCB0aGUgZm9sbG93aW5nIHByZWZzCi8vIFtOT1RFXSByZXBsYWNlIHRoZSAqIHdpdGggYSBzbGFzaCBpbiB0aGUgbGluZSBhYm92ZSB0byByZS1lbmFibGUgYWN0aXZlIG9uZXMKLy8gRkYxMTYKLy8gNDUwNjogc2V0IFJGUCdzIGZvbnQgdmlzaWJpbGl0eSBsZXZlbCAoMTQwMikgW0ZGOTQrXQogICAvLyBbLV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xODM4NDE1CiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LmNzcy5mb250LXZpc2liaWxpdHkucmVzaXN0RmluZ2VycHJpbnRpbmciLCAxKTsgLy8gW0RFRkFVTFQ6IDFdCi8vIEZGMTE3Ci8vIDEyMjE6IGRpc2FibGUgV2luZG93cyBNaWNyb3NvZnQgRmFtaWx5IFNhZmV0eSBjZXJ0IFtGRjUwK10gW1dJTkRPV1NdCiAgIC8vIDA9ZGlzYWJsZSBkZXRlY3RpbmcgRmFtaWx5IFNhZmV0eSBtb2RlIGFuZCBpbXBvcnRpbmcgdGhlIHJvb3QKICAgLy8gMT1vbmx5IGF0dGVtcHQgdG8gZGV0ZWN0IEZhbWlseSBTYWZldHkgbW9kZSAoZG9uJ3QgaW1wb3J0IHRoZSByb290KQogICAvLyAyPWRldGVjdCBGYW1pbHkgU2FmZXR5IG1vZGUgYW5kIGltcG9ydCB0aGUgcm9vdAogICAvLyBbMV0gaHR0cHM6Ly9naXRsYWIudG9ycHJvamVjdC5vcmcvdHBvL2FwcGxpY2F0aW9ucy90b3ItYnJvd3Nlci8tL2lzc3Vlcy8yMTY4NgogICAvLyBbLV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xODQ0OTA4CnVzZXJfcHJlZigic2VjdXJpdHkuZmFtaWx5X3NhZmV0eS5tb2RlIiwgMCk7Ci8vIDcwMTg6IGRpc2FibGUgc2VydmljZSB3b3JrZXIgV2ViIE5vdGlmaWNhdGlvbnMgW0ZGNDQrXQogICAvLyBbV0hZXSBXZWIgTm90aWZpY2F0aW9ucyBhcmUgYmVoaW5kIGEgcHJvbXB0ICg3MDAyKQogICAvLyBbMV0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL2VuL3Byb2R1Y3RzL2ZpcmVmb3gvYmxvY2stbm90aWZpY2F0aW9uLXJlcXVlc3RzLwogICAvLyBbLV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xODQyNDU3CiAgIC8vIHVzZXJfcHJlZigiZG9tLndlYm5vdGlmaWNhdGlvbnMuc2VydmljZXdvcmtlci5lbmFibGVkIiwgZmFsc2UpOwovLyAqKiovCgovKiBFTkQ6IGludGVybmFsIGN1c3RvbSBwcmVmIHRvIHRlc3QgZm9yIHN5bnRheCBlcnJvcnMgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICJTVUNDRVNTOiBObyBubyBoZSdzIG5vdCBkZWFkLCBoZSdzLCBoZSdzIHJlc3RpbichIik7Cg=="
