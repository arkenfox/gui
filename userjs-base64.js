// 20220406 user.js as base64 from main repo
// place this in a file named "userjs-base64.js"
// v98
const userjsbase64="LyoqKioqKgoqICAgIG5hbWU6IGFya2VuZm94IHVzZXIuanMKKiAgICBkYXRlOiAxMCBNYXJjaCAyMDIyCiogdmVyc2lvbjogOTgKKiAgICAgdXJsOiBodHRwczovL2dpdGh1Yi5jb20vYXJrZW5mb3gvdXNlci5qcwoqIGxpY2Vuc2U6IE1JVDogaHR0cHM6Ly9naXRodWIuY29tL2Fya2VuZm94L3VzZXIuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHQKCiogUkVBRE1FOgoKICAxLiBDb25zaWRlciB1c2luZyBUb3IgQnJvd3NlciBpZiBpdCBtZWV0cyB5b3VyIG5lZWRzIG9yIGZpdHMgeW91ciB0aHJlYXQgbW9kZWwKICAgICAgICogaHR0cHM6Ly8yMDE5Lnd3dy50b3Jwcm9qZWN0Lm9yZy9hYm91dC90b3J1c2Vycy5odG1sCiAgMi4gUmVhZCB0aGUgZW50aXJlIHdpa2kKICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2Fya2VuZm94L3VzZXIuanMvd2lraQogIDMuIElmIHlvdSBza2lwcGVkIHN0ZXAgMiwgcmV0dXJuIHRvIHN0ZXAgMgogIDQuIE1ha2UgY2hhbmdlcyBpbiBhIHVzZXItb3ZlcnJpZGVzLmpzCiAgICAgICAqIFRoZXJlIGFyZSBvZnRlbiB0cmFkZS1vZmZzIGFuZCBjb25mbGljdHMgYmV0d2VlbiBzZWN1cml0eSB2cyBwcml2YWN5IHZzIGFudGktdHJhY2tpbmcKICAgICAgICAgYW5kIHRoZXNlIG5lZWQgdG8gYmUgYmFsYW5jZWQgYWdhaW5zdCBmdW5jdGlvbmFsaXR5ICYgY29udmVuaWVuY2UgJiBicmVha2FnZQogICAgICAgKiBTb21lIHNpdGUgYnJlYWthZ2UgYW5kIHVuaW50ZW5kZWQgY29uc2VxdWVuY2VzIHdpbGwgaGFwcGVuLiBFdmVyeW9uZSdzIGV4cGVyaWVuY2Ugd2lsbCBkaWZmZXIKICAgICAgICAgZS5nLiBzb21lIHVzZXIgZGF0YSBpcyBlcmFzZWQgb24gZXhpdCAoc2VjdGlvbiAyODAwKSwgY2hhbmdlIHRoaXMgdG8gc3VpdCB5b3VyIG5lZWRzCiAgICAgICAqIFdoaWxlIG5vdCAxMDAlIGRlZmluaXRpdmUsIHNlYXJjaCBmb3IgIltTRVRVUCIgdGFncwogICAgICAgICBlLmcuIHRoaXJkIHBhcnR5IGltYWdlcy92aWRlb3Mgbm90IGxvYWRpbmcgb24gc29tZSBzaXRlcz8gY2hlY2sgMTYwMQogIDUuIFNvbWUgdGFnIGluZm8KICAgICAgIFtTRVRVUC1TRUNVUklUWV0gaXQncyBvbmUgaXRlbSwgcmVhZCBpdAogICAgICAgICAgICBbU0VUVVAtV0VCXSBjYW4gY2F1c2Ugc29tZSB3ZWJzaXRlcyB0byBicmVhawogICAgICAgICBbU0VUVVAtQ0hST01FXSBjaGFuZ2VzIGhvdyBGaXJlZm94IGl0c2VsZiBiZWhhdmVzIChpLmUuIG5vdCBkaXJlY3RseSB3ZWJzaXRlIHJlbGF0ZWQpCiAgNi4gT3ZlcnJpZGUgUmVjaXBlczogaHR0cHM6Ly9naXRodWIuY29tL2Fya2VuZm94L3VzZXIuanMvaXNzdWVzLzEwODAKCiogUkVMRUFTRVM6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcmtlbmZveC91c2VyLmpzL3JlbGVhc2VzCgogICogSXQgaXMgYmVzdCB0byB1c2UgdGhlIGFya2VuZm94IHJlbGVhc2UgdGhhdCBpcyBvcHRpbWl6ZWQgZm9yIGFuZCBtYXRjaGVzIHlvdXIgRmlyZWZveCB2ZXJzaW9uCiAgKiBFVkVSWU9ORTogZWFjaCByZWxlYXNlCiAgICAtIHJ1biBwcmVmc0NsZWFuZXIgdG8gcmVzZXQgcHJlZnMgbWFkZSBpbmFjdGl2ZSwgaW5jbHVkaW5nIGRlcHJlY2F0ZWQgKDk5OTlzKQogICAgRVNSOTEKICAgIC0gSWYgeW91IGFyZSBub3QgdXNpbmcgYXJrZW5mb3ggdjkxLi4uIChub3QgYSBkZWZpbml0aXZlIGxpc3QpCiAgICAgIC0gOTk5OTogc3dpdGNoIHRoZSBhcHByb3ByaWF0ZSBkZXByZWNhdGVkIHNlY3Rpb24ocykgYmFjayBvbgoKKiBJTkRFWDoKCiAgMDEwMDogU1RBUlRVUAogIDAyMDA6IEdFT0xPQ0FUSU9OIC8gTEFOR1VBR0UgLyBMT0NBTEUKICAwMzAwOiBRVUlFVEVSIEZPWAogIDA0MDA6IFNBRkUgQlJPV1NJTkcKICAwNjAwOiBCTE9DSyBJTVBMSUNJVCBPVVRCT1VORAogIDA3MDA6IEROUyAvIERvSCAvIFBST1hZIC8gU09DS1MgLyBJUHY2CiAgMDgwMDogTE9DQVRJT04gQkFSIC8gU0VBUkNIIEJBUiAvIFNVR0dFU1RJT05TIC8gSElTVE9SWSAvIEZPUk1TCiAgMDkwMDogUEFTU1dPUkRTCiAgMTAwMDogRElTSyBBVk9JREFOQ0UKICAxMjAwOiBIVFRQUyAoU1NML1RMUyAvIE9DU1AgLyBDRVJUUyAvIEhQS1ApCiAgMTQwMDogRk9OVFMKICAxNjAwOiBIRUFERVJTIC8gUkVGRVJFUlMKICAxNzAwOiBDT05UQUlORVJTCiAgMjAwMDogUExVR0lOUyAvIE1FRElBIC8gV0VCUlRDCiAgMjQwMDogRE9NIChET0NVTUVOVCBPQkpFQ1QgTU9ERUwpCiAgMjYwMDogTUlTQ0VMTEFORU9VUwogIDI3MDA6IEVUUCAoRU5IQU5DRUQgVFJBQ0tJTkcgUFJPVEVDVElPTikKICAyODAwOiBTSFVURE9XTiAmIFNBTklUSVpJTkcKICA0NTAwOiBSRlAgKFJFU0lTVCBGSU5HRVJQUklOVElORykKICA1MDAwOiBPUFRJT05BTCBPUFNFQwogIDU1MDA6IE9QVElPTkFMIEhBUkRFTklORwogIDYwMDA6IERPTidUIFRPVUNICiAgNzAwMDogRE9OJ1QgQk9USEVSCiAgODAwMDogRE9OJ1QgQk9USEVSOiBGSU5HRVJQUklOVElORwogIDkwMDA6IFBFUlNPTkFMCiAgOTk5OTogREVQUkVDQVRFRCAvIFJFTU9WRUQgLyBMRUdBQ1kgLyBSRU5BTUVECgoqKioqKiovCgovKiBTVEFSVDogaW50ZXJuYWwgY3VzdG9tIHByZWYgdG8gdGVzdCBmb3Igc3ludGF4IGVycm9ycwogKiBbTk9URV0gTm90IGFsbCBzeW50YXggZXJyb3JzIGNhdXNlIHBhcnNpbmcgdG8gYWJvcnQgaS5lLiByZWFjaGluZyB0aGUgbGFzdCBkZWJ1ZyBwcmVmCiAqIG5vIGxvbmdlciBuZWNlc3NhcmlseSBtZWFucyB0aGF0IGFsbCBwcmVmcyBoYXZlIGJlZW4gYXBwbGllZC4gQ2hlY2sgdGhlIGNvbnNvbGUgcmlnaHQKICogYWZ0ZXIgc3RhcnR1cCBmb3IgYW55IHdhcm5pbmdzL2Vycm9yIG1lc3NhZ2VzIHJlbGF0ZWQgdG8gbm9uLWFwcGxpZWQgcHJlZnMKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9ubmV0aGVyY290ZS8yMDE4LzAzLzA5L2EtbmV3LXByZWZlcmVuY2VzLXBhcnNlci1mb3ItZmlyZWZveC8gKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICJTVEFSVDogT2ggeWVzLCB0aGUgTm9yd2VnaWFuIEJsdWUuLi4gd2hhdCdzIHdyb25nIHdpdGggaXQ/Iik7CgovKiAwMDAwOiBkaXNhYmxlIGFib3V0OmNvbmZpZyB3YXJuaW5nICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmFib3V0Q29uZmlnLnNob3dXYXJuaW5nIiwgZmFsc2UpOwoKLyoqKiBbU0VDVElPTiAwMTAwXTogU1RBUlRVUCAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjAxMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgZGVhZCEiKTsKLyogMDEwMTogZGlzYWJsZSBkZWZhdWx0IGJyb3dzZXIgY2hlY2sKICogW1NFVFRJTkddIEdlbmVyYWw+U3RhcnR1cD5BbHdheXMgY2hlY2sgaWYgRmlyZWZveCBpcyB5b3VyIGRlZmF1bHQgYnJvd3NlciAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zaGVsbC5jaGVja0RlZmF1bHRCcm93c2VyIiwgZmFsc2UpOwovKiAwMTAyOiBzZXQgc3RhcnR1cCBwYWdlIFtTRVRVUC1DSFJPTUVdCiAqIDA9YmxhbmssIDE9aG9tZSwgMj1sYXN0IHZpc2l0ZWQgcGFnZSwgMz1yZXN1bWUgcHJldmlvdXMgc2Vzc2lvbgogKiBbTk9URV0gU2Vzc2lvbiBSZXN0b3JlIGlzIGNsZWFyZWQgd2l0aCBoaXN0b3J5ICgyODExLCAyODEyKSwgYW5kIG5vdCB1c2VkIGluIFByaXZhdGUgQnJvd3NpbmcgbW9kZQogKiBbU0VUVElOR10gR2VuZXJhbD5TdGFydHVwPlJlc3RvcmUgcHJldmlvdXMgc2Vzc2lvbiAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zdGFydHVwLnBhZ2UiLCAwKTsKLyogMDEwMzogc2V0IEhPTUUrTkVXV0lORE9XIHBhZ2UKICogYWJvdXQ6aG9tZT1BY3Rpdml0eSBTdHJlYW0gKGRlZmF1bHQsIHNlZSAwMTA1KSwgY3VzdG9tIFVSTCwgYWJvdXQ6YmxhbmsKICogW1NFVFRJTkddIEhvbWU+TmV3IFdpbmRvd3MgYW5kIFRhYnM+SG9tZXBhZ2UgYW5kIG5ldyB3aW5kb3dzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnN0YXJ0dXAuaG9tZXBhZ2UiLCAiYWJvdXQ6YmxhbmsiKTsKLyogMDEwNDogc2V0IE5FV1RBQiBwYWdlCiAqIHRydWU9QWN0aXZpdHkgU3RyZWFtIChkZWZhdWx0LCBzZWUgMDEwNSksIGZhbHNlPWJsYW5rIHBhZ2UKICogW1NFVFRJTkddIEhvbWU+TmV3IFdpbmRvd3MgYW5kIFRhYnM+TmV3IHRhYnMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5lbmFibGVkIiwgZmFsc2UpOwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFiLnByZWxvYWQiLCBmYWxzZSk7Ci8qIDAxMDU6IGRpc2FibGUgc29tZSBBY3Rpdml0eSBTdHJlYW0gaXRlbXMKICogQWN0aXZpdHkgU3RyZWFtIGlzIHRoZSBkZWZhdWx0IGhvbWVwYWdlL25ld3RhYiBiYXNlZCBvbiBtZXRhZGF0YSBhbmQgYnJvd3NpbmcgYmVoYXZpb3IKICogW1NFVFRJTkddIEhvbWU+RmlyZWZveCBIb21lIENvbnRlbnQ+Li4uICB0byBzaG93L2hpZGUgd2hhdCB5b3Ugd2FudCAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5uZXd0YWJwYWdlLmFjdGl2aXR5LXN0cmVhbS5mZWVkcy50ZWxlbWV0cnkiLCBmYWxzZSk7CnVzZXJfcHJlZigiYnJvd3Nlci5uZXd0YWJwYWdlLmFjdGl2aXR5LXN0cmVhbS50ZWxlbWV0cnkiLCBmYWxzZSk7CnVzZXJfcHJlZigiYnJvd3Nlci5uZXd0YWJwYWdlLmFjdGl2aXR5LXN0cmVhbS5mZWVkcy5zbmlwcGV0cyIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZmVlZHMuc2VjdGlvbi50b3BzdG9yaWVzIiwgZmFsc2UpOwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uc2VjdGlvbi5oaWdobGlnaHRzLmluY2x1ZGVQb2NrZXQiLCBmYWxzZSk7CnVzZXJfcHJlZigiYnJvd3Nlci5uZXd0YWJwYWdlLmFjdGl2aXR5LXN0cmVhbS5zaG93U3BvbnNvcmVkIiwgZmFsc2UpOwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uZmVlZHMuZGlzY292ZXJ5c3RyZWFtZmVlZCIsIGZhbHNlKTsgLy8gW0ZGNjYrXQp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uc2hvd1Nwb25zb3JlZFRvcFNpdGVzIiwgZmFsc2UpOyAvLyBbRkY4MytdCi8qIDAxMDY6IGNsZWFyIGRlZmF1bHQgdG9wc2l0ZXMKICogW05PVEVdIFRoaXMgZG9lcyBub3QgYmxvY2sgeW91IGZyb20gYWRkaW5nIHlvdXIgb3duICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLm5ld3RhYnBhZ2UuYWN0aXZpdHktc3RyZWFtLmRlZmF1bHQuc2l0ZXMiLCAiIik7CgovKioqIFtTRUNUSU9OIDAyMDBdOiBHRU9MT0NBVElPTiAvIExBTkdVQUdFIC8gTE9DQUxFICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMDIwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBkZWZpbml0ZWx5IGRlY2Vhc2VkISIpOwovKiAwMjAxOiB1c2UgTW96aWxsYSBnZW9sb2NhdGlvbiBzZXJ2aWNlIGluc3RlYWQgb2YgR29vZ2xlIGlmIHBlcm1pc3Npb24gaXMgZ3JhbnRlZCBbRkY3NCtdCiAqIE9wdGlvbmFsbHkgZW5hYmxlIGxvZ2dpbmcgdG8gdGhlIGNvbnNvbGUgKGRlZmF1bHRzIHRvIGZhbHNlKSAqKiovCnVzZXJfcHJlZigiZ2VvLnByb3ZpZGVyLm5ldHdvcmsudXJsIiwgImh0dHBzOi8vbG9jYXRpb24uc2VydmljZXMubW96aWxsYS5jb20vdjEvZ2VvbG9jYXRlP2tleT0lTU9aSUxMQV9BUElfS0VZJSIpOwogICAvLyB1c2VyX3ByZWYoImdlby5wcm92aWRlci5uZXR3b3JrLmxvZ2dpbmcuZW5hYmxlZCIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCi8qIDAyMDI6IGRpc2FibGUgdXNpbmcgdGhlIE9TJ3MgZ2VvbG9jYXRpb24gc2VydmljZSAqKiovCnVzZXJfcHJlZigiZ2VvLnByb3ZpZGVyLm1zLXdpbmRvd3MtbG9jYXRpb24iLCBmYWxzZSk7IC8vIFtXSU5ET1dTXQp1c2VyX3ByZWYoImdlby5wcm92aWRlci51c2VfY29yZWxvY2F0aW9uIiwgZmFsc2UpOyAvLyBbTUFDXQp1c2VyX3ByZWYoImdlby5wcm92aWRlci51c2VfZ3BzZCIsIGZhbHNlKTsgLy8gW0xJTlVYXQovKiAwMjAzOiBkaXNhYmxlIHJlZ2lvbiB1cGRhdGVzCiAqIFsxXSBodHRwczovL2ZpcmVmb3gtc291cmNlLWRvY3MubW96aWxsYS5vcmcvdG9vbGtpdC9tb2R1bGVzL3Rvb2xraXRfbW9kdWxlcy9SZWdpb24uaHRtbCAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5yZWdpb24ubmV0d29yay51cmwiLCAiIik7IC8vIFtGRjc4K10KdXNlcl9wcmVmKCJicm93c2VyLnJlZ2lvbi51cGRhdGUuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNzkrXQovKiAwMjA0OiBzZXQgc2VhcmNoIHJlZ2lvbgogKiBbTk9URV0gTWF5IG5vdCBiZSBoaWRkZW4gaWYgRmlyZWZveCBoYXMgY2hhbmdlZCB5b3VyIHNldHRpbmdzIGR1ZSB0byB5b3VyIHJlZ2lvbiAoMDIwMykgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuc2VhcmNoLnJlZ2lvbiIsICJVUyIpOyAvLyBbSElEREVOIFBSRUZdCi8qIDAyMTA6IHNldCBwcmVmZXJyZWQgbGFuZ3VhZ2UgZm9yIGRpc3BsYXlpbmcgcGFnZXMKICogW1NFVFRJTkddIEdlbmVyYWw+TGFuZ3VhZ2UgYW5kIEFwcGVhcmFuY2U+TGFuZ3VhZ2U+Q2hvb3NlIHlvdXIgcHJlZmVycmVkIGxhbmd1YWdlLi4uCiAqIFtURVNUXSBodHRwczovL2FkZG9ucy5tb3ppbGxhLm9yZy9hYm91dCAqKiovCnVzZXJfcHJlZigiaW50bC5hY2NlcHRfbGFuZ3VhZ2VzIiwgImVuLVVTLCBlbiIpOwovKiAwMjExOiB1c2UgZW4tVVMgbG9jYWxlIHJlZ2FyZGxlc3Mgb2YgdGhlIHN5c3RlbSBvciByZWdpb24gbG9jYWxlCiAqIFtTRVRVUC1XRUJdIE1heSBicmVhayBzb21lIGlucHV0IG1ldGhvZHMgZS5nIHhpbS9pYnVzIGZvciBDSksgbGFuZ3VhZ2VzIFsxXQogKiBbVEVTVF0gaHR0cHM6Ly9hcmtlbmZveC5naXRodWIuaW8vVFpQL3Rlc3RzL2Zvcm1hdHRpbmcuaHRtbAogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9idWdsaXN0LmNnaT9idWdfaWQ9ODY3NTAxLDE2Mjk2MzAgKioqLwp1c2VyX3ByZWYoImphdmFzY3JpcHQudXNlX3VzX2VuZ2xpc2hfbG9jYWxlIiwgdHJ1ZSk7IC8vIFtISURERU4gUFJFRl0KCi8qKiogW1NFQ1RJT04gMDMwMF06IFFVSUVURVIgRk9YICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMDMwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBub3QgcGluaW4nIGZvciB0aGUgZmpvcmRzISIpOwovKiogUkVDT01NRU5EQVRJT05TICoqKi8KLyogMDMyMDogZGlzYWJsZSByZWNvbW1lbmRhdGlvbiBwYW5lIGluIGFib3V0OmFkZG9ucyAodXNlcyBHb29nbGUgQW5hbHl0aWNzKSAqKiovCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5nZXRBZGRvbnMuc2hvd1BhbmUiLCBmYWxzZSk7IC8vIFtISURERU4gUFJFRl0KLyogMDMyMTogZGlzYWJsZSByZWNvbW1lbmRhdGlvbnMgaW4gYWJvdXQ6YWRkb25zJyBFeHRlbnNpb25zIGFuZCBUaGVtZXMgcGFuZXMgW0ZGNjgrXSAqKiovCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5odG1sYWJvdXRhZGRvbnMucmVjb21tZW5kYXRpb25zLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDAzMjI6IGRpc2FibGUgcGVyc29uYWxpemVkIEV4dGVuc2lvbiBSZWNvbW1lbmRhdGlvbnMgaW4gYWJvdXQ6YWRkb25zIGFuZCBBTU8gW0ZGNjUrXQogKiBbTk9URV0gVGhpcyBwcmVmIGhhcyBubyBlZmZlY3Qgd2hlbiBIZWFsdGggUmVwb3J0cyAoMDMzMSkgYXJlIGRpc2FibGVkCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+RmlyZWZveCBEYXRhIENvbGxlY3Rpb24gJiBVc2U+QWxsb3cgRmlyZWZveCB0byBtYWtlIHBlcnNvbmFsaXplZCBleHRlbnNpb24gcmVjb21tZW5kYXRpb25zCiAqIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvcGVyc29uYWxpemVkLWV4dGVuc2lvbi1yZWNvbW1lbmRhdGlvbnMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuZGlzY292ZXJ5LmVuYWJsZWQiLCBmYWxzZSk7CgovKiogVEVMRU1FVFJZICoqKi8KLyogMDMzMDogZGlzYWJsZSBuZXcgZGF0YSBzdWJtaXNzaW9uIFtGRjQxK10KICogSWYgZGlzYWJsZWQsIG5vIHBvbGljeSBpcyBzaG93biBvciB1cGxvYWQgdGFrZXMgcGxhY2UsIGV2ZXIKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTE5NTU1MiAqKiovCnVzZXJfcHJlZigiZGF0YXJlcG9ydGluZy5wb2xpY3kuZGF0YVN1Ym1pc3Npb25FbmFibGVkIiwgZmFsc2UpOwovKiAwMzMxOiBkaXNhYmxlIEhlYWx0aCBSZXBvcnRzCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+RmlyZWZveCBEYXRhIENvbGxlY3Rpb24gJiBVc2U+QWxsb3cgRmlyZWZveCB0byBzZW5kIHRlY2huaWNhbC4uLiBkYXRhICoqKi8KdXNlcl9wcmVmKCJkYXRhcmVwb3J0aW5nLmhlYWx0aHJlcG9ydC51cGxvYWRFbmFibGVkIiwgZmFsc2UpOwovKiAwMzMyOiBkaXNhYmxlIHRlbGVtZXRyeQogKiBUaGUgInVuaWZpZWQiIHByZWYgYWZmZWN0cyB0aGUgYmVoYXZpb3Igb2YgdGhlICJlbmFibGVkIiBwcmVmCiAqIC0gSWYgInVuaWZpZWQiIGlzIGZhbHNlIHRoZW4gImVuYWJsZWQiIGNvbnRyb2xzIHRoZSB0ZWxlbWV0cnkgbW9kdWxlCiAqIC0gSWYgInVuaWZpZWQiIGlzIHRydWUgdGhlbiAiZW5hYmxlZCIgb25seSBjb250cm9scyB3aGV0aGVyIHRvIHJlY29yZCBleHRlbmRlZCBkYXRhCiAqIFtOT1RFXSAidG9vbGtpdC50ZWxlbWV0cnkuZW5hYmxlZCIgaXMgbm93IExPQ0tFRCB0byByZWZsZWN0IHByZXJlbGVhc2UgKHRydWUpIG9yIHJlbGVhc2UgYnVpbGRzIChmYWxzZSkgWzJdCiAqIFsxXSBodHRwczovL2ZpcmVmb3gtc291cmNlLWRvY3MubW96aWxsYS5vcmcvdG9vbGtpdC9jb21wb25lbnRzL3RlbGVtZXRyeS90ZWxlbWV0cnkvaW50ZXJuYWxzL3ByZWZlcmVuY2VzLmh0bWwKICogWzJdIGh0dHBzOi8vbWVkaXVtLmNvbS9nZW9yZy1mcml0enNjaGUvZGF0YS1wcmVmZXJlbmNlLWNoYW5nZXMtaW4tZmlyZWZveC01OC0yZDVkZjljNDI4YjUgKioqLwp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LnVuaWZpZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkuZW5hYmxlZCIsIGZhbHNlKTsgLy8gc2VlIFtOT1RFXQp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LnNlcnZlciIsICJkYXRhOiwiKTsKdXNlcl9wcmVmKCJ0b29sa2l0LnRlbGVtZXRyeS5hcmNoaXZlLmVuYWJsZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkubmV3UHJvZmlsZVBpbmcuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNTUrXQp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LnNodXRkb3duUGluZ1NlbmRlci5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NStdCnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkudXBkYXRlUGluZy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NitdCnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkuYmhyUGluZy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NytdIEJhY2tncm91bmQgSGFuZyBSZXBvcnRlcgp1c2VyX3ByZWYoInRvb2xraXQudGVsZW1ldHJ5LmZpcnN0U2h1dGRvd25QaW5nLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjU3K10KLyogMDMzMzogZGlzYWJsZSBUZWxlbWV0cnkgQ292ZXJhZ2UKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9kYXRhLzIwMTgvMDgvMjAvZWZmZWN0aXZlbHktbWVhc3VyaW5nLXNlYXJjaC1pbi1maXJlZm94LyAqKiovCnVzZXJfcHJlZigidG9vbGtpdC50ZWxlbWV0cnkuY292ZXJhZ2Uub3B0LW91dCIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCnVzZXJfcHJlZigidG9vbGtpdC5jb3ZlcmFnZS5vcHQtb3V0IiwgdHJ1ZSk7IC8vIFtGRjY0K10gW0hJRERFTiBQUkVGXQp1c2VyX3ByZWYoInRvb2xraXQuY292ZXJhZ2UuZW5kcG9pbnQuYmFzZSIsICIiKTsKLyogMDMzNDogZGlzYWJsZSBQaW5nQ2VudHJlIHRlbGVtZXRyeSAodXNlZCBpbiBzZXZlcmFsIFN5c3RlbSBBZGQtb25zKSBbRkY1NytdCiAqIERlZmVuc2UtaW4tZGVwdGg6IGN1cnJlbnRseSBjb3ZlcmVkIGJ5IDAzMzEgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIucGluZy1jZW50cmUudGVsZW1ldHJ5IiwgZmFsc2UpOwoKLyoqIFNUVURJRVMgKioqLwovKiAwMzQwOiBkaXNhYmxlIFN0dWRpZXMKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5GaXJlZm94IERhdGEgQ29sbGVjdGlvbiAmIFVzZT5BbGxvdyBGaXJlZm94IHRvIGluc3RhbGwgYW5kIHJ1biBzdHVkaWVzICoqKi8KdXNlcl9wcmVmKCJhcHAuc2hpZWxkLm9wdG91dHN0dWRpZXMuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDM0MTogZGlzYWJsZSBOb3JtYW5keS9TaGllbGQgW0ZGNjArXQogKiBTaGllbGQgaXMgYSB0ZWxlbWV0cnkgc3lzdGVtIHRoYXQgY2FuIHB1c2ggYW5kIHRlc3QgInJlY2lwZXMiCiAqIFsxXSBodHRwczovL21vemlsbGEuZ2l0aHViLmlvL25vcm1hbmR5LyAqKiovCnVzZXJfcHJlZigiYXBwLm5vcm1hbmR5LmVuYWJsZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigiYXBwLm5vcm1hbmR5LmFwaV91cmwiLCAiIik7CgovKiogQ1JBU0ggUkVQT1JUUyAqKiovCi8qIDAzNTA6IGRpc2FibGUgQ3Jhc2ggUmVwb3J0cyAqKiovCnVzZXJfcHJlZigiYnJlYWtwYWQucmVwb3J0VVJMIiwgIiIpOwp1c2VyX3ByZWYoImJyb3dzZXIudGFicy5jcmFzaFJlcG9ydGluZy5zZW5kUmVwb3J0IiwgZmFsc2UpOyAvLyBbRkY0NCtdCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5jcmFzaFJlcG9ydHMudW5zdWJtaXR0ZWRDaGVjay5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1MStdIFtERUZBVUxUOiBmYWxzZV0KLyogMDM1MTogZW5mb3JjZSBubyBzdWJtaXNzaW9uIG9mIGJhY2tsb2dnZWQgQ3Jhc2ggUmVwb3J0cyBbRkY1OCtdCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+RmlyZWZveCBEYXRhIENvbGxlY3Rpb24gJiBVc2U+QWxsb3cgRmlyZWZveCB0byBzZW5kIGJhY2tsb2dnZWQgY3Jhc2ggcmVwb3J0cyAgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuY3Jhc2hSZXBvcnRzLnVuc3VibWl0dGVkQ2hlY2suYXV0b1N1Ym1pdDIiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KCi8qKiBPVEhFUiAqKiovCi8qIDAzNjA6IGRpc2FibGUgQ2FwdGl2ZSBQb3J0YWwgZGV0ZWN0aW9uCiAqIFsxXSBodHRwczovL3d3dy5lZmYub3JnL2RlZXBsaW5rcy8yMDE3LzA4L2hvdy1jYXB0aXZlLXBvcnRhbHMtaW50ZXJmZXJlLXdpcmVsZXNzLXNlY3VyaXR5LWFuZC1wcml2YWN5ICoqKi8KdXNlcl9wcmVmKCJjYXB0aXZlZGV0ZWN0LmNhbm9uaWNhbFVSTCIsICIiKTsKdXNlcl9wcmVmKCJuZXR3b3JrLmNhcHRpdmUtcG9ydGFsLXNlcnZpY2UuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNTIrXQovKiAwMzYxOiBkaXNhYmxlIE5ldHdvcmsgQ29ubmVjdGl2aXR5IGNoZWNrcyBbRkY2NStdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE0NjA1MzcgKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuY29ubmVjdGl2aXR5LXNlcnZpY2UuZW5hYmxlZCIsIGZhbHNlKTsKCi8qKiogW1NFQ1RJT04gMDQwMF06IFNBRkUgQlJPV1NJTkcgKFNCKQogICBTQiBoYXMgdGFrZW4gbWFueSBzdGVwcyB0byBwcmVzZXJ2ZSBwcml2YWN5LiBJZiByZXF1aXJlZCwgYSBmdWxsIHVybCBpcyBuZXZlciBzZW50CiAgIHRvIEdvb2dsZSwgb25seSBhIHBhcnQtaGFzaCBvZiB0aGUgcHJlZml4LCBoaWRkZW4gd2l0aCBub2lzZSBvZiBvdGhlciByZWFsIHBhcnQtaGFzaGVzLgogICBGaXJlZm94IHRha2VzIG1lYXN1cmVzIHN1Y2ggYXMgc3RyaXBwaW5nIG91dCBpZGVudGlmeWluZyBwYXJhbWV0ZXJzIGFuZCBzaW5jZSBTQnY0IChGRjU3KykKICAgZG9lc24ndCBldmVuIHVzZSBjb29raWVzLiAoI1R1cm4gb24gYnJvd3Nlci5zYWZlYnJvd3NpbmcuZGVidWcgdG8gbW9uaXRvciB0aGlzIGFjdGl2aXR5KQoKICAgWzFdIGh0dHBzOi8vZmVlZGluZy5jbG91ZC5nZWVrLm56L3Bvc3RzL2hvdy1zYWZlLWJyb3dzaW5nLXdvcmtzLWluLWZpcmVmb3gvCiAgIFsyXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvU2VjdXJpdHkvU2FmZV9Ccm93c2luZwogICBbM10gaHR0cHM6Ly9zdXBwb3J0Lm1vemlsbGEub3JnL2tiL2hvdy1kb2VzLXBoaXNoaW5nLWFuZC1tYWx3YXJlLXByb3RlY3Rpb24td29yawoqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA0MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgcGFzc2VkIG9uISIpOwovKiAwNDAxOiBkaXNhYmxlIFNCIChTYWZlIEJyb3dzaW5nKQogKiBbV0FSTklOR10gRG8gdGhpcyBhdCB5b3VyIG93biByaXNrISBUaGVzZSBhcmUgdGhlIG1hc3RlciBzd2l0Y2hlcwogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PlNlY3VyaXR5Pi4uLiBCbG9jayBkYW5nZXJvdXMgYW5kIGRlY2VwdGl2ZSBjb250ZW50ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnNhZmVicm93c2luZy5tYWx3YXJlLmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zYWZlYnJvd3NpbmcucGhpc2hpbmcuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDQwMjogZGlzYWJsZSBTQiBjaGVja3MgZm9yIGRvd25sb2FkcyAoYm90aCBsb2NhbCBsb29rdXBzICsgcmVtb3RlKQogKiBUaGlzIGlzIHRoZSBtYXN0ZXIgc3dpdGNoIGZvciB0aGUgc2FmZWJyb3dzaW5nLmRvd25sb2FkcyogcHJlZnMgKDA0MDMsIDA0MDQpCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+U2VjdXJpdHk+Li4uICJCbG9jayBkYW5nZXJvdXMgZG93bmxvYWRzIiAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zYWZlYnJvd3NpbmcuZG93bmxvYWRzLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDA0MDM6IGRpc2FibGUgU0IgY2hlY2tzIGZvciBkb3dubG9hZHMgKHJlbW90ZSkKICogVG8gdmVyaWZ5IHRoZSBzYWZldHkgb2YgY2VydGFpbiBleGVjdXRhYmxlIGZpbGVzLCBGaXJlZm94IG1heSBzdWJtaXQgc29tZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUKICogZmlsZSwgaW5jbHVkaW5nIHRoZSBuYW1lLCBvcmlnaW4sIHNpemUgYW5kIGEgY3J5cHRvZ3JhcGhpYyBoYXNoIG9mIHRoZSBjb250ZW50cywgdG8gdGhlIEdvb2dsZQogKiBTYWZlIEJyb3dzaW5nIHNlcnZpY2Ugd2hpY2ggaGVscHMgRmlyZWZveCBkZXRlcm1pbmUgd2hldGhlciBvciBub3QgdGhlIGZpbGUgc2hvdWxkIGJlIGJsb2NrZWQKICogW1NFVFVQLVNFQ1VSSVRZXSBJZiB5b3UgZG8gbm90IHVuZGVyc3RhbmQgdGhpcywgb3IgeW91IHdhbnQgdGhpcyBwcm90ZWN0aW9uLCB0aGVuIG92ZXJyaWRlIHRoaXMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc2FmZWJyb3dzaW5nLmRvd25sb2Fkcy5yZW1vdGUuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnNhZmVicm93c2luZy5kb3dubG9hZHMucmVtb3RlLnVybCIsICIiKTsgLy8gRGVmZW5zZS1pbi1kZXB0aAovKiAwNDA0OiBkaXNhYmxlIFNCIGNoZWNrcyBmb3IgdW53YW50ZWQgc29mdHdhcmUKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5TZWN1cml0eT4uLi4gIldhcm4geW91IGFib3V0IHVud2FudGVkIGFuZCB1bmNvbW1vbiBzb2Z0d2FyZSIgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuc2FmZWJyb3dzaW5nLmRvd25sb2Fkcy5yZW1vdGUuYmxvY2tfcG90ZW50aWFsbHlfdW53YW50ZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zYWZlYnJvd3NpbmcuZG93bmxvYWRzLnJlbW90ZS5ibG9ja191bmNvbW1vbiIsIGZhbHNlKTsKLyogMDQwNTogZGlzYWJsZSAiaWdub3JlIHRoaXMgd2FybmluZyIgb24gU0Igd2FybmluZ3MgW0ZGNDUrXQogKiBJZiBjbGlja2VkLCBpdCBieXBhc3NlcyB0aGUgYmxvY2sgZm9yIHRoYXQgc2Vzc2lvbi4gVGhpcyBpcyBhIG1lYW5zIGZvciBhZG1pbnMgdG8gZW5mb3JjZSBTQgogKiBbVEVTVF0gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcmtlbmZveC91c2VyLmpzL3dpa2kvQXBwZW5kaXgtQS1UZXN0LVNpdGVzIy1tb3ppbGxhCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzEyMjY0OTAgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuc2FmZWJyb3dzaW5nLmFsbG93T3ZlcnJpZGUiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDA2MDBdOiBCTE9DSyBJTVBMSUNJVCBPVVRCT1VORCBbbm90IGV4cGxpY2l0bHkgYXNrZWQgZm9yIC0gZS5nLiBjbGlja2VkIG9uXSAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA2MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3Mgbm8gbW9yZSEiKTsKLyogMDYwMTogZGlzYWJsZSBsaW5rIHByZWZldGNoaW5nCiAqIFsxXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0xpbmtfcHJlZmV0Y2hpbmdfRkFRICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLnByZWZldGNoLW5leHQiLCBmYWxzZSk7Ci8qIDA2MDI6IGRpc2FibGUgRE5TIHByZWZldGNoaW5nCiAqIFsxXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvWC1ETlMtUHJlZmV0Y2gtQ29udHJvbCAqKiovCnVzZXJfcHJlZigibmV0d29yay5kbnMuZGlzYWJsZVByZWZldGNoIiwgdHJ1ZSk7CiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5kbnMuZGlzYWJsZVByZWZldGNoRnJvbUhUVFBTIiwgdHJ1ZSk7IC8vIFtERUZBVUxUOiB0cnVlXQovKiAwNjAzOiBkaXNhYmxlIHByZWRpY3RvciAvIHByZWZldGNoaW5nICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLnByZWRpY3Rvci5lbmFibGVkIiwgZmFsc2UpOwp1c2VyX3ByZWYoIm5ldHdvcmsucHJlZGljdG9yLmVuYWJsZS1wcmVmZXRjaCIsIGZhbHNlKTsgLy8gW0ZGNDgrXSBbREVGQVVMVDogZmFsc2VdCi8qIDA2MDQ6IGRpc2FibGUgbGluay1tb3VzZW92ZXIgb3BlbmluZyBjb25uZWN0aW9uIHRvIGxpbmtlZCBzZXJ2ZXIKICogWzFdIGh0dHBzOi8vbmV3cy5zbGFzaGRvdC5vcmcvc3RvcnkvMTUvMDgvMTQvMjMyMTIwMi9ob3ctdG8tcXVhc2gtZmlyZWZveHMtc2lsZW50LXJlcXVlc3RzICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuc3BlY3VsYXRpdmUtcGFyYWxsZWwtbGltaXQiLCAwKTsKLyogMDYwNTogZGlzYWJsZSBtb3VzZWRvd24gc3BlY3VsYXRpdmUgY29ubmVjdGlvbnMgb24gYm9va21hcmtzIGFuZCBoaXN0b3J5IFtGRjk4K10gKioqLwp1c2VyX3ByZWYoImJyb3dzZXIucGxhY2VzLnNwZWN1bGF0aXZlQ29ubmVjdC5lbmFibGVkIiwgZmFsc2UpOwovKiAwNjEwOiBlbmZvcmNlIG5vICJIeXBlcmxpbmsgQXVkaXRpbmciIChjbGljayB0cmFja2luZykKICogWzFdIGh0dHBzOi8vd3d3LmJsZWVwaW5nY29tcHV0ZXIuY29tL25ld3Mvc29mdHdhcmUvbWFqb3ItYnJvd3NlcnMtdG8tcHJldmVudC1kaXNhYmxpbmctb2YtY2xpY2stdHJhY2tpbmctcHJpdmFjeS1yaXNrLyAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zZW5kX3BpbmdzIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCgovKioqIFtTRUNUSU9OIDA3MDBdOiBETlMgLyBEb0ggLyBQUk9YWSAvIFNPQ0tTIC8gSVB2NiAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA3MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgZ2l2ZW4gdXAgdGhlIGdob3N0ISIpOwovKiAwNzAxOiBkaXNhYmxlIElQdjYKICogSVB2NiBjYW4gYmUgYWJ1c2VkLCBlc3BlY2lhbGx5IHdpdGggTUFDIGFkZHJlc3NlcywgYW5kIGNhbiBsZWFrIHdpdGggVlBOczogYXNzdW1pbmcKICogeW91ciBJU1AgYW5kL29yIHJvdXRlciBhbmQvb3Igd2Vic2l0ZSBpcyBJUHY2IGNhcGFibGUuIE1vc3Qgc2l0ZXMgd2lsbCBmYWxsIGJhY2sgdG8gSVB2NAogKiBbU1RBVFNdIEZpcmVmb3ggdGVsZW1ldHJ5IChKdWx5IDIwMjEpIHNob3dzIH4xMCUgb2YgYWxsIGNvbm5lY3Rpb25zIGFyZSBJUHY2CiAqIFtOT1RFXSBUaGlzIGlzIGFuIGFwcGxpY2F0aW9uIGxldmVsIGZhbGxiYWNrLiBEaXNhYmxpbmcgSVB2NiBpcyBiZXN0IGRvbmUgYXQgYW4KICogT1MvbmV0d29yayBsZXZlbCwgYW5kL29yIGNvbmZpZ3VyZWQgcHJvcGVybHkgaW4gVlBOIHNldHVwcy4gSWYgeW91IGFyZSBub3QgbWFza2luZyB5b3VyIElQLAogKiB0aGVuIHRoaXMgd29uJ3QgbWFrZSBtdWNoIGRpZmZlcmVuY2UuIElmIHlvdSBhcmUgbWFza2luZyB5b3VyIElQLCB0aGVuIGl0IGNhbiBvbmx5IGhlbHAuCiAqIFtOT1RFXSBQSFAgZGVmYXVsdHMgdG8gSVB2NiB3aXRoICJsb2NhbGhvc3QiLiBVc2UgInBocCAtUyAxMjcuMC4wLjE6UE9SVCIKICogW1RFU1RdIGh0dHBzOi8vaXBsZWFrLm9yZy8KICogWzFdIGh0dHBzOi8vd3d3LmludGVybmV0c29jaWV0eS5vcmcvdGFnL2lwdjYtc2VjdXJpdHkvIChNeXRocyAyLDQsNSw2KSAqKiovCnVzZXJfcHJlZigibmV0d29yay5kbnMuZGlzYWJsZUlQdjYiLCB0cnVlKTsKLyogMDcwMjogc2V0IHRoZSBwcm94eSBzZXJ2ZXIgdG8gZG8gYW55IEROUyBsb29rdXBzIHdoZW4gdXNpbmcgU09DS1MKICogZS5nLiBpbiBUb3IsIHRoaXMgc3RvcHMgeW91ciBsb2NhbCBETlMgc2VydmVyIGZyb20ga25vd2luZyB5b3VyIFRvciBkZXN0aW5hdGlvbgogKiBhcyBhIHJlbW90ZSBUb3Igbm9kZSB3aWxsIGhhbmRsZSB0aGUgRE5TIHJlcXVlc3QKICogWzFdIGh0dHBzOi8vdHJhYy50b3Jwcm9qZWN0Lm9yZy9wcm9qZWN0cy90b3Ivd2lraS9kb2MvVG9yaWZ5SE9XVE8vV2ViQnJvd3NlcnMgKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsucHJveHkuc29ja3NfcmVtb3RlX2RucyIsIHRydWUpOwovKiAwNzAzOiBkaXNhYmxlIHVzaW5nIFVOQyAoVW5pZm9ybSBOYW1pbmcgQ29udmVudGlvbikgcGF0aHMgW0ZGNjErXQogKiBbU0VUVVAtQ0hST01FXSBDYW4gYnJlYWsgZXh0ZW5zaW9ucyBmb3IgcHJvZmlsZXMgb24gbmV0d29yayBzaGFyZXMKICogWzFdIGh0dHBzOi8vZ2l0bGFiLnRvcnByb2plY3Qub3JnL3Rwby9hcHBsaWNhdGlvbnMvdG9yLWJyb3dzZXIvLS9pc3N1ZXMvMjY0MjQgKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuZmlsZS5kaXNhYmxlX3VuY19wYXRocyIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCi8qIDA3MDQ6IGRpc2FibGUgR0lPIGFzIGEgcG90ZW50aWFsIHByb3h5IGJ5cGFzcyB2ZWN0b3IKICogR3Zmcy9HSU8gaGFzIGEgc2V0IG9mIHN1cHBvcnRlZCBwcm90b2NvbHMgbGlrZSBvYmV4LCBuZXR3b3JrLCBhcmNoaXZlLCBjb21wdXRlciwKICogZGF2LCBjZGRhLCBncGhvdG8yLCB0cmFzaCwgZXRjLiBCeSBkZWZhdWx0IG9ubHkgc2Z0cCBpcyBhY2NlcHRlZCAoRkY4NyspCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE0MzM1MDcKICogWzJdIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dWZnMKICogWzNdIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dJT18oc29mdHdhcmUpICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLmdpby5zdXBwb3J0ZWQtcHJvdG9jb2xzIiwgIiIpOyAvLyBbSElEREVOIFBSRUZdCi8qIDA3MDU6IGRpc2FibGUgcHJveHkgZGlyZWN0IGZhaWxvdmVyIGZvciBzeXN0ZW0gcmVxdWVzdHMgW0ZGOTErXQogKiBbV0FSTklOR10gRGVmYXVsdCB0cnVlIGlzIGEgc2VjdXJpdHkgZmVhdHVyZSBhZ2FpbnN0IG1hbGljaW91cyBleHRlbnNpb25zIFsxXQogKiBbU0VUVVAtQ0hST01FXSBJZiB5b3UgdXNlIGEgcHJveHkgYW5kIHlvdSB0cnVzdCB5b3VyIGV4dGVuc2lvbnMKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9zZWN1cml0eS8yMDIxLzEwLzI1L3NlY3VyaW5nLXRoZS1wcm94eS1hcGktZm9yLWZpcmVmb3gtYWRkLW9ucy8gKioqLwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsucHJveHkuZmFpbG92ZXJfZGlyZWN0IiwgZmFsc2UpOwovKiAwNzA2OiBkaXNhYmxlIHByb3h5IGJ5cGFzcyBmb3Igc3lzdGVtIHJlcXVlc3QgZmFpbHVyZXMgW0ZGOTUrXQogKiBSZW1vdGVTZXR0aW5ncywgVXBkYXRlU2VydmljZSwgVGVsZW1ldHJ5IFsxXQogKiBbV0FSTklOR10gSWYgZmFsc2UsIHRoaXMgd2lsbCBicmVhayB0aGUgZmFsbGJhY2sgZm9yIHNvbWUgc2VjdXJpdHkgZmVhdHVyZXMKICogW1NFVFVQLUNIUk9NRV0gSWYgeW91IHVzZSBhIHByb3h5IGFuZCB5b3UgdW5kZXJzdGFuZCB0aGUgc2VjdXJpdHkgaW1wYWN0CiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL2J1Z2xpc3QuY2dpP2J1Z19pZD0xNzMyNzkyLDE3MzM5OTQsMTczMzQ4MSAqKiovCiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5wcm94eS5hbGxvd19ieXBhc3MiLCBmYWxzZSk7IC8vIFtISURERU4gUFJFRiBGRjk1LTk2XQovKiAwNzEwOiBkaXNhYmxlIEROUy1vdmVyLUhUVFBTIChEb0gpIHJvbGxvdXQgW0ZGNjArXQogKiAwPW9mZiBieSBkZWZhdWx0LCAyPVRSUiAoVHJ1c3RlZCBSZWN1cnNpdmUgUmVzb2x2ZXIpIGZpcnN0LCAzPVRSUiBvbmx5LCA1PWV4cGxpY2l0bHkgb2ZmCiAqIHNlZSAiZG9oLXJvbGxvdXQuaG9tZS1yZWdpb24iOiBVU0EgRmViIDIwMjAsIENhbmFkYSBKdWx5IDIwMjEgWzNdCiAqIFsxXSBodHRwczovL2hhY2tzLm1vemlsbGEub3JnLzIwMTgvMDUvYS1jYXJ0b29uLWludHJvLXRvLWRucy1vdmVyLWh0dHBzLwogKiBbMl0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L0RPSC1yZXNvbHZlci1wb2xpY3kKICogWzNdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9tb3ppbGxhL25ld3MvZmlyZWZveC1ieS1kZWZhdWx0LWRucy1vdmVyLWh0dHBzLXJvbGxvdXQtaW4tY2FuYWRhLwogKiBbNF0gaHR0cHM6Ly93d3cuZWZmLm9yZy9kZWVwbGlua3MvMjAyMC8xMi9kbnMtZG9oLWFuZC1vZG9oLW9oLW15LXllYXItcmV2aWV3LTIwMjAgKioqLwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsudHJyLm1vZGUiLCA1KTsKCi8qKiogW1NFQ1RJT04gMDgwMF06IExPQ0FUSU9OIEJBUiAvIFNFQVJDSCBCQVIgLyBTVUdHRVNUSU9OUyAvIEhJU1RPUlkgLyBGT1JNUyAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA4MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgY2Vhc2VkIHRvIGJlISIpOwovKiAwODAxOiBkaXNhYmxlIGxvY2F0aW9uIGJhciB1c2luZyBzZWFyY2gKICogRG9uJ3QgbGVhayBVUkwgdHlwb3MgdG8gYSBzZWFyY2ggZW5naW5lLCBnaXZlIGFuIGVycm9yIG1lc3NhZ2UgaW5zdGVhZAogKiBFeGFtcGxlczogInNlY3JldHBsYWNlLGNvbSIsICJzZWNyZXRwbGFjZS9jb20iLCAic2VjcmV0cGxhY2UgY29tIiwgInNlY3JldCBwbGFjZS5jb20iCiAqIFtOT1RFXSBUaGlzIGRvZXMgbm90IGFmZmVjdCBleHBsaWNpdCB1c2VyIGFjdGlvbiBzdWNoIGFzIHVzaW5nIHNlYXJjaCBidXR0b25zIGluIHRoZQogKiBkcm9wZG93biwgb3IgdXNpbmcga2V5d29yZCBzZWFyY2ggc2hvcnRjdXRzIHlvdSBjb25maWd1cmUgaW4gb3B0aW9ucyAoZS5nLiAiZCIgZm9yIER1Y2tEdWNrR28pCiAqIFtTRVRVUC1DSFJPTUVdIE92ZXJyaWRlIHRoaXMgaWYgeW91IHRydXN0IGFuZCB1c2UgYSBwcml2YWN5IHJlc3BlY3Rpbmcgc2VhcmNoIGVuZ2luZSAqKiovCnVzZXJfcHJlZigia2V5d29yZC5lbmFibGVkIiwgZmFsc2UpOwovKiAwODAyOiBkaXNhYmxlIGxvY2F0aW9uIGJhciBkb21haW4gZ3Vlc3NpbmcKICogZG9tYWluIGd1ZXNzaW5nIGludGVyY2VwdHMgRE5TICJob3N0bmFtZSBub3QgZm91bmQgZXJyb3JzIiBhbmQgcmVzZW5kcyBhCiAqIHJlcXVlc3QgKGUuZy4gYnkgYWRkaW5nIHd3dyBvciAuY29tKS4gVGhpcyBpcyBpbmNvbnNpc3RlbnQgdXNlIChlLmcuIEZRRE5zKSwgZG9lcyBub3Qgd29yawogKiB2aWEgUHJveHkgU2VydmVycyAoZGlmZmVyZW50IGVycm9yKSwgaXMgYSBmbGF3ZWQgdXNlIG9mIEROUyAoVExEczogd2h5IHRyZWF0IC5jb20KICogYXMgdGhlIDQxMSBmb3IgRE5TIGVycm9ycz8pLCBwcml2YWN5IGlzc3VlcyAod2h5IGNvbm5lY3QgdG8gc2l0ZXMgeW91IGRpZG4ndAogKiBpbnRlbmQgdG8pLCBjYW4gbGVhayBzZW5zaXRpdmUgZGF0YSAoZS5nLiBxdWVyeSBzdHJpbmdzOiBlLmcuIFByaW5jZXRvbiBhdHRhY2spLAogKiBhbmQgaXMgYSBzZWN1cml0eSByaXNrIChlLmcuIGNvbW1vbiB0eXBvcyAmIG1hbGljaW91cyBzaXRlcyBzZXQgdXAgdG8gZXhwbG9pdCB0aGlzKSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5maXh1cC5hbHRlcm5hdGUuZW5hYmxlZCIsIGZhbHNlKTsKLyogMDgwMzogZGlzcGxheSBhbGwgcGFydHMgb2YgdGhlIHVybCBpbiB0aGUgbG9jYXRpb24gYmFyICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci50cmltVVJMcyIsIGZhbHNlKTsKLyogMDgwNDogZGlzYWJsZSBsaXZlIHNlYXJjaCBzdWdnZXN0aW9ucwogKiBbTk9URV0gQm90aCBtdXN0IGJlIHRydWUgZm9yIHRoZSBsb2NhdGlvbiBiYXIgdG8gd29yawogKiBbU0VUVVAtQ0hST01FXSBPdmVycmlkZSB0aGVzZSBpZiB5b3UgdHJ1c3QgYW5kIHVzZSBhIHByaXZhY3kgcmVzcGVjdGluZyBzZWFyY2ggZW5naW5lCiAqIFtTRVRUSU5HXSBTZWFyY2g+UHJvdmlkZSBzZWFyY2ggc3VnZ2VzdGlvbnMgfCBTaG93IHNlYXJjaCBzdWdnZXN0aW9ucyBpbiBhZGRyZXNzIGJhciByZXN1bHRzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnNlYXJjaC5zdWdnZXN0LmVuYWJsZWQiLCBmYWxzZSk7CnVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc3VnZ2VzdC5zZWFyY2hlcyIsIGZhbHNlKTsKLyogMDgwNTogZGlzYWJsZSBsb2NhdGlvbiBiYXIgbWFraW5nIHNwZWN1bGF0aXZlIGNvbm5lY3Rpb25zIFtGRjU2K10KICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTM0ODI3NSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc3BlY3VsYXRpdmVDb25uZWN0LmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDA4MDY6IGRpc2FibGUgbG9jYXRpb24gYmFyIGxlYWtpbmcgc2luZ2xlIHdvcmRzIHRvIGEgRE5TIHByb3ZpZGVyICoqYWZ0ZXIgc2VhcmNoaW5nKiogW0ZGNzgrXQogKiAwPW5ldmVyIHJlc29sdmUgc2luZ2xlIHdvcmRzLCAxPWhldXJpc3RpYyAoZGVmYXVsdCksIDI9YWx3YXlzIHJlc29sdmUKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTY0MjYyMyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuZG5zUmVzb2x2ZVNpbmdsZVdvcmRzQWZ0ZXJTZWFyY2giLCAwKTsKLyogMDgwNzogZGlzYWJsZSBsb2NhdGlvbiBiYXIgY29udGV4dHVhbCBzdWdnZXN0aW9ucyBbRkY5MitdCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+QWRkcmVzcyBCYXI+U3VnZ2VzdGlvbnMgZnJvbS4uLgogKiBbMV0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL2RhdGEvMjAyMS8wOS8xNS9kYXRhLWFuZC1maXJlZm94LXN1Z2dlc3QvICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LnF1aWNrc3VnZ2VzdC5ub25zcG9uc29yZWQiLCBmYWxzZSk7IC8vIFtGRjk1K10KdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LnF1aWNrc3VnZ2VzdC5zcG9uc29yZWQiLCBmYWxzZSk7Ci8qIDA4MDg6IGRpc2FibGUgdGFiLXRvLXNlYXJjaCBbRkY4NStdCiAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gZXhjbHVkZSBvbiBhIHBlci1lbmdpbmUgYmFzaXMgYnkgdW5jaGVja2luZyB0aGVtIGluIE9wdGlvbnM+U2VhcmNoCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+QWRkcmVzcyBCYXI+V2hlbiB1c2luZyB0aGUgYWRkcmVzcyBiYXIsIHN1Z2dlc3Q+U2VhcmNoIGVuZ2luZXMgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLnN1Z2dlc3QuZW5naW5lcyIsIGZhbHNlKTsKLyogMDgxMDogZGlzYWJsZSBzZWFyY2ggYW5kIGZvcm0gaGlzdG9yeQogKiBbU0VUVVAtV0VCXSBCZSBhd2FyZSB0aGF0IGF1dG9jb21wbGV0ZSBmb3JtIGRhdGEgY2FuIGJlIHJlYWQgYnkgdGhpcmQgcGFydGllcyBbMV1bMl0KICogW05PVEVdIFdlIGFsc28gY2xlYXIgZm9ybWRhdGEgb24gZXhpdCAoMjgxMSkKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5IaXN0b3J5PkN1c3RvbSBTZXR0aW5ncz5SZW1lbWJlciBzZWFyY2ggYW5kIGZvcm0gaGlzdG9yeQogKiBbMV0gaHR0cHM6Ly9ibG9nLm1pbmRlZHNlY3VyaXR5LmNvbS8yMDExLzEwL2F1dG9jb21wbGV0ZWFnYWluLmh0bWwKICogWzJdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMzgxNjgxICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmZvcm1maWxsLmVuYWJsZSIsIGZhbHNlKTsKLyogMDgxMTogZGlzYWJsZSBGb3JtIEF1dG9maWxsCiAqIFtOT1RFXSBTdG9yZWQgZGF0YSBpcyBOT1Qgc2VjdXJlICh1c2VzIGEgSlNPTiBmaWxlKQogKiBbTk9URV0gSGV1cmlzdGljcyBjb250cm9scyBGb3JtIEF1dG9maWxsIG9uIGZvcm1zIHdpdGhvdXQgQGF1dG9jb21wbGV0ZSBhdHRyaWJ1dGVzCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+Rm9ybXMgYW5kIEF1dG9maWxsPkF1dG9maWxsIGFkZHJlc3NlcwogKiBbMV0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL0ZpcmVmb3gvRmVhdHVyZXMvRm9ybV9BdXRvZmlsbCAqKiovCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5mb3JtYXV0b2ZpbGwuYWRkcmVzc2VzLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjU1K10KdXNlcl9wcmVmKCJleHRlbnNpb25zLmZvcm1hdXRvZmlsbC5hdmFpbGFibGUiLCAib2ZmIik7IC8vIFtGRjU2K10KdXNlcl9wcmVmKCJleHRlbnNpb25zLmZvcm1hdXRvZmlsbC5jcmVkaXRDYXJkcy5hdmFpbGFibGUiLCBmYWxzZSk7IC8vIFtGRjU3K10KdXNlcl9wcmVmKCJleHRlbnNpb25zLmZvcm1hdXRvZmlsbC5jcmVkaXRDYXJkcy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NitdCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5mb3JtYXV0b2ZpbGwuaGV1cmlzdGljcy5lbmFibGVkIiwgZmFsc2UpOyAvLyBbRkY1NStdCi8qIDA4MjA6IGRpc2FibGUgY29sb3Jpbmcgb2YgdmlzaXRlZCBsaW5rcwogKiBbU0VUVVAtSEFSREVOXSBCdWxrIHJhcGlkIGhpc3Rvcnkgc25pZmZpbmcgd2FzIG1pdGlnYXRlZCBpbiAyMDEwIFsxXVsyXS4gU2xvd2VyIGFuZCBtb3JlIGV4cGVuc2l2ZQogKiByZWRyYXcgdGltaW5nIGF0dGFja3Mgd2VyZSBsYXJnZWx5IG1pdGlnYXRlZCBpbiBGRjc3KyBbM10uIFVzaW5nIFJGUCAoNDUwMSkgZnVydGhlciBoYW1wZXJzIHRpbWluZwogKiBhdHRhY2tzLiBEb24ndCBmb3JnZXQgY2xlYXJpbmcgaGlzdG9yeSBvbiBleGl0ICgyODExKS4gSG93ZXZlciwgc29jaWFsIGVuZ2luZWVyaW5nIFsyI2xpbWl0c11bNF1bNV0KICogYW5kIGFkdmFuY2VkIHRhcmdldGVkIHRpbWluZyBhdHRhY2tzIGNvdWxkIHN0aWxsIHByb2R1Y2UgdXNhYmxlIHJlc3VsdHMKICogWzFdIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0NTUy9Qcml2YWN5X2FuZF90aGVfOnZpc2l0ZWRfc2VsZWN0b3IKICogWzJdIGh0dHBzOi8vZGJhcm9uLm9yZy9tb3ppbGxhL3Zpc2l0ZWQtcHJpdmFjeQogKiBbM10gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNjMyNzY1CiAqIFs0XSBodHRwczovL2VhcnRobG5nLmdpdGh1Yi5pby90ZXN0cGFnZXMvdmlzaXRlZF9saW5rcy5odG1sIChzZWUgZ2l0aHViIHdpa2kgQVBQRU5ESVggQSBvbiBob3cgdG8gdXNlKQogKiBbNV0gaHR0cHM6Ly9sY2FtdHVmLmJsb2dzcG90LmNvbS8yMDE2LzA4L2Nzcy1taXgtYmxlbmQtbW9kZS1pcy1iYWQtZm9yLWtlZXBpbmcuaHRtbCAqKiovCiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LmNzcy52aXNpdGVkX2xpbmtzX2VuYWJsZWQiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDA5MDBdOiBQQVNTV09SRFMKICAgWzFdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi91c2UtcHJpbWFyeS1wYXNzd29yZC1wcm90ZWN0LXN0b3JlZC1sb2dpbnMtYW5kLXBhcwoqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjA5MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgZXhwaXJlZCEiKTsKLyogMDkwMTogc2V0IHdoZW4gRmlyZWZveCBzaG91bGQgcHJvbXB0IGZvciB0aGUgcHJpbWFyeSBwYXNzd29yZAogKiAwPW9uY2UgcGVyIHNlc3Npb24gKGRlZmF1bHQpLCAxPWV2ZXJ5IHRpbWUgaXQncyBuZWVkZWQsIDI9YWZ0ZXIgbiBtaW51dGVzICgwOTAyKSAqKiovCnVzZXJfcHJlZigic2VjdXJpdHkuYXNrX2Zvcl9wYXNzd29yZCIsIDIpOwovKiAwOTAyOiBzZXQgaG93IGxvbmcgaW4gbWludXRlcyBGaXJlZm94IHNob3VsZCByZW1lbWJlciB0aGUgcHJpbWFyeSBwYXNzd29yZCAoMDkwMSkgKioqLwp1c2VyX3ByZWYoInNlY3VyaXR5LnBhc3N3b3JkX2xpZmV0aW1lIiwgNSk7IC8vIFtERUZBVUxUOiAzMF0KLyogMDkwMzogZGlzYWJsZSBhdXRvLWZpbGxpbmcgdXNlcm5hbWUgJiBwYXNzd29yZCBmb3JtIGZpZWxkcwogKiBjYW4gbGVhayBpbiBjcm9zcy1zaXRlIGZvcm1zICphbmQqIGJlIHNwb29mZWQKICogW05PVEVdIFVzZXJuYW1lICYgcGFzc3dvcmQgaXMgc3RpbGwgYXZhaWxhYmxlIHdoZW4geW91IGVudGVyIHRoZSBmaWVsZAogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkxvZ2lucyBhbmQgUGFzc3dvcmRzPkF1dG9maWxsIGxvZ2lucyBhbmQgcGFzc3dvcmRzCiAqIFsxXSBodHRwczovL2ZyZWVkb20tdG8tdGlua2VyLmNvbS8yMDE3LzEyLzI3L25vLWJvdW5kYXJpZXMtZm9yLXVzZXItaWRlbnRpdGllcy13ZWItdHJhY2tlcnMtZXhwbG9pdC1icm93c2VyLWxvZ2luLW1hbmFnZXJzLyAqKiovCnVzZXJfcHJlZigic2lnbm9uLmF1dG9maWxsRm9ybXMiLCBmYWxzZSk7Ci8qIDA5MDQ6IGRpc2FibGUgZm9ybWxlc3MgbG9naW4gY2FwdHVyZSBmb3IgUGFzc3dvcmQgTWFuYWdlciBbRkY1MStdICoqKi8KdXNlcl9wcmVmKCJzaWdub24uZm9ybWxlc3NDYXB0dXJlLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDA5MDU6IGxpbWl0IChvciBkaXNhYmxlKSBIVFRQIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGRpYWxvZ3MgdHJpZ2dlcmVkIGJ5IHN1Yi1yZXNvdXJjZXMgW0ZGNDErXQogKiBoYXJkZW5zIGFnYWluc3QgcG90ZW50aWFsIGNyZWRlbnRpYWxzIHBoaXNoaW5nCiAqIDAgPSBkb24ndCBhbGxvdyBzdWItcmVzb3VyY2VzIHRvIG9wZW4gSFRUUCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBkaWFsb2dzCiAqIDEgPSBkb24ndCBhbGxvdyBjcm9zcy1vcmlnaW4gc3ViLXJlc291cmNlcyB0byBvcGVuIEhUVFAgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZGlhbG9ncwogKiAyID0gYWxsb3cgc3ViLXJlc291cmNlcyB0byBvcGVuIEhUVFAgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgZGlhbG9ncyAoZGVmYXVsdCkgKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuYXV0aC5zdWJyZXNvdXJjZS1odHRwLWF1dGgtYWxsb3ciLCAxKTsKLyogMDkwNjogZW5mb3JjZSBubyBhdXRvbWF0aWMgYXV0aGVudGljYXRpb24gb24gTWljcm9zb2Z0IHNpdGVzIFtGRjkxK10gW1dJTkRPV1MgMTArXQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PkxvZ2lucyBhbmQgUGFzc3dvcmRzPkFsbG93IFdpbmRvd3Mgc2luZ2xlIHNpZ24tb24gZm9yLi4uCiAqIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2Ivd2luZG93cy1zc28gKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC53aW5kb3dzLXNzby5lbmFibGVkIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCgovKioqIFtTRUNUSU9OIDEwMDBdOiBESVNLIEFWT0lEQU5DRSAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjEwMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgZ29uZSB0byBtZWV0ICdpcyBtYWtlciEiKTsKLyogMTAwMTogZGlzYWJsZSBkaXNrIGNhY2hlCiAqIFtTRVRVUC1DSFJPTUVdIElmIHlvdSB0aGluayBkaXNrIGNhY2hlIGhlbHBzIHBlcmYsIHRoZW4gZmVlbCBmcmVlIHRvIG92ZXJyaWRlIHRoaXMKICogW05PVEVdIFdlIGFsc28gY2xlYXIgY2FjaGUgb24gZXhpdCAoMjgxMSkgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuY2FjaGUuZGlzay5lbmFibGUiLCBmYWxzZSk7Ci8qIDEwMDI6IGRpc2FibGUgbWVkaWEgY2FjaGUgZnJvbSB3cml0aW5nIHRvIGRpc2sgaW4gUHJpdmF0ZSBCcm93c2luZwogKiBbTk9URV0gTVNFIChNZWRpYSBTb3VyY2UgRXh0ZW5zaW9ucykgYXJlIGFscmVhZHkgc3RvcmVkIGluLW1lbW9yeSBpbiBQQiAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5wcml2YXRlYnJvd3NpbmcuZm9yY2VNZWRpYU1lbW9yeUNhY2hlIiwgdHJ1ZSk7IC8vIFtGRjc1K10KdXNlcl9wcmVmKCJtZWRpYS5tZW1vcnlfY2FjaGVfbWF4X3NpemUiLCA2NTUzNik7Ci8qIDEwMDM6IGRpc2FibGUgc3RvcmluZyBleHRyYSBzZXNzaW9uIGRhdGEgW1NFVFVQLUNIUk9NRV0KICogZGVmaW5lIG9uIHdoaWNoIHNpdGVzIHRvIHNhdmUgZXh0cmEgc2Vzc2lvbiBkYXRhIHN1Y2ggYXMgZm9ybSBjb250ZW50LCBjb29raWVzIGFuZCBQT1NUIGRhdGEKICogMD1ldmVyeXdoZXJlLCAxPXVuZW5jcnlwdGVkIHNpdGVzLCAyPW5vd2hlcmUgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc2Vzc2lvbnN0b3JlLnByaXZhY3lfbGV2ZWwiLCAyKTsKLyogMTAwNDogc2V0IHRoZSBtaW5pbXVtIGludGVydmFsIGJldHdlZW4gc2Vzc2lvbiBzYXZlIG9wZXJhdGlvbnMKICogSW5jcmVhc2luZyB0aGlzIGNhbiBoZWxwIG9uIG9sZGVyIG1hY2hpbmVzIGFuZCBzb21lIHdlYnNpdGVzLCBhcyB3ZWxsIGFzIHJlZHVjaW5nIHdyaXRlcyBbMV0KICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTMwNDM4OSAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5zZXNzaW9uc3RvcmUuaW50ZXJ2YWwiLCAzMDAwMCk7IC8vIFtERUZBVUxUOiAxNTAwMF0KLyogMTAwNTogZGlzYWJsZSBhdXRvbWF0aWMgRmlyZWZveCBzdGFydCBhbmQgc2Vzc2lvbiByZXN0b3JlIGFmdGVyIHJlYm9vdCBbRkY2MitdIFtXSU5ET1dTXQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy82MDM5MDMgKioqLwp1c2VyX3ByZWYoInRvb2xraXQud2luUmVnaXN0ZXJBcHBsaWNhdGlvblJlc3RhcnQiLCBmYWxzZSk7Ci8qIDEwMDY6IGRpc2FibGUgZmF2aWNvbnMgaW4gc2hvcnRjdXRzCiAqIFVSTCBzaG9ydGN1dHMgdXNlIGEgY2FjaGVkIHJhbmRvbWx5IG5hbWVkIC5pY28gZmlsZSB3aGljaCBpcyBzdG9yZWQgaW4geW91cgogKiBwcm9maWxlL3Nob3J0Y3V0Q2FjaGUgZGlyZWN0b3J5LiBUaGUgLmljbyByZW1haW5zIGFmdGVyIHRoZSBzaG9ydGN1dCBpcyBkZWxldGVkCiAqIElmIHNldCB0byBmYWxzZSB0aGVuIHRoZSBzaG9ydGN1dHMgdXNlIGEgZ2VuZXJpYyBGaXJlZm94IGljb24gKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc2hlbGwuc2hvcnRjdXRGYXZpY29ucyIsIGZhbHNlKTsKCi8qKiogW1NFQ1RJT04gMTIwMF06IEhUVFBTIChTU0wvVExTIC8gT0NTUCAvIENFUlRTIC8gSFBLUCkKICAgWW91ciBjaXBoZXIgYW5kIG90aGVyIHNldHRpbmdzIGNhbiBiZSB1c2VkIGluIHNlcnZlciBzaWRlIGZpbmdlcnByaW50aW5nCiAgIFtURVNUXSBodHRwczovL3d3dy5zc2xsYWJzLmNvbS9zc2x0ZXN0L3ZpZXdNeUNsaWVudC5odG1sCiAgIFtURVNUXSBodHRwczovL2Jyb3dzZXJsZWFrcy5jb20vc3NsCiAgIFtURVNUXSBodHRwczovL2phM2VyLmNvbS8KICAgWzFdIGh0dHBzOi8vd3d3LnNlY3VyaXR5YXJ0d29yay5lcy8yMDE3LzAyLzAyL3Rscy1jbGllbnQtZmluZ2VycHJpbnRpbmctd2l0aC1icm8vCioqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTIwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBhIHN0aWZmISIpOwovKiogU1NMIChTZWN1cmUgU29ja2V0cyBMYXllcikgLyBUTFMgKFRyYW5zcG9ydCBMYXllciBTZWN1cml0eSkgKioqLwovKiAxMjAxOiByZXF1aXJlIHNhZmUgbmVnb3RpYXRpb24KICogQmxvY2tzIGNvbm5lY3Rpb25zIHRvIHNlcnZlcnMgdGhhdCBkb24ndCBzdXBwb3J0IFJGQyA1NzQ2IFsyXSBhcyB0aGV5J3JlIHBvdGVudGlhbGx5IHZ1bG5lcmFibGUgdG8gYQogKiBNaVRNIGF0dGFjayBbM10uIEEgc2VydmVyIHdpdGhvdXQgUkZDIDU3NDYgY2FuIGJlIHNhZmUgZnJvbSB0aGUgYXR0YWNrIGlmIGl0IGRpc2FibGVzIHJlbmVnb3RpYXRpb25zCiAqIGJ1dCB0aGUgcHJvYmxlbSBpcyB0aGF0IHRoZSBicm93c2VyIGNhbid0IGtub3cgdGhhdC4gU2V0dGluZyB0aGlzIHByZWYgdG8gdHJ1ZSBpcyB0aGUgb25seSB3YXkgZm9yIHRoZQogKiBicm93c2VyIHRvIGVuc3VyZSB0aGVyZSB3aWxsIGJlIG5vIHVuc2FmZSByZW5lZ290aWF0aW9ucyBvbiB0aGUgY2hhbm5lbCBiZXR3ZWVuIHRoZSBicm93c2VyIGFuZCB0aGUgc2VydmVyCiAqIFtTRVRVUC1XRUJdIFNTTF9FUlJPUl9VTlNBRkVfTkVHT1RJQVRJT046IGlzIGl0IHdvcnRoIG92ZXJyaWRpbmcgdGhpcyBmb3IgdGhhdCBvbmUgc2l0ZT8KICogW1NUQVRTXSBTU0wgTGFicyAoSnVseSAyMDIxKSByZXBvcnRzIG92ZXIgOTklIG9mIHRvcCBzaXRlcyBoYXZlIHNlY3VyZSByZW5lZ290aWF0aW9uIFs0XQogKiBbMV0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5OlJlbmVnb3RpYXRpb24KICogWzJdIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNTc0NgogKiBbM10gaHR0cHM6Ly9jdmUubWl0cmUub3JnL2NnaS1iaW4vY3ZlbmFtZS5jZ2k/bmFtZT1DVkUtMjAwOS0zNTU1CiAqIFs0XSBodHRwczovL3d3dy5zc2xsYWJzLmNvbS9zc2wtcHVsc2UvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wucmVxdWlyZV9zYWZlX25lZ290aWF0aW9uIiwgdHJ1ZSk7Ci8qIDEyMDY6IGRpc2FibGUgVExTMS4zIDAtUlRUIChyb3VuZC10cmlwIHRpbWUpIFtGRjUxK10KICogVGhpcyBkYXRhIGlzIG5vdCBmb3J3YXJkIHNlY3JldCwgYXMgaXQgaXMgZW5jcnlwdGVkIHNvbGVseSB1bmRlciBrZXlzIGRlcml2ZWQgdXNpbmcKICogdGhlIG9mZmVyZWQgUFNLLiBUaGVyZSBhcmUgbm8gZ3VhcmFudGVlcyBvZiBub24tcmVwbGF5IGJldHdlZW4gY29ubmVjdGlvbnMKICogWzFdIGh0dHBzOi8vZ2l0aHViLmNvbS90bHN3Zy90bHMxMy1zcGVjL2lzc3Vlcy8xMDAxCiAqIFsyXSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTAwMS5odG1sI25hbWUtcmVwbGF5LWF0dGFja3Mtd2l0aC0wLXJ0dAogKiBbM10gaHR0cHM6Ly9ibG9nLmNsb3VkZmxhcmUuY29tL3Rscy0xLTMtb3ZlcnZpZXctYW5kLXEtYW5kLWEvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS50bHMuZW5hYmxlXzBydHRfZGF0YSIsIGZhbHNlKTsKCi8qKiBPQ1NQIChPbmxpbmUgQ2VydGlmaWNhdGUgU3RhdHVzIFByb3RvY29sKQogICBbMV0gaHR0cHM6Ly9zY290dGhlbG1lLmNvLnVrL3Jldm9jYXRpb24taXMtYnJva2VuLwogICBbMl0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL3NlY3VyaXR5LzIwMTMvMDcvMjkvb2NzcC1zdGFwbGluZy1pbi1maXJlZm94LwoqKiovCi8qIDEyMTE6IGVuZm9yY2UgT0NTUCBmZXRjaGluZyB0byBjb25maXJtIGN1cnJlbnQgdmFsaWRpdHkgb2YgY2VydGlmaWNhdGVzCiAqIDA9ZGlzYWJsZWQsIDE9ZW5hYmxlZCAoZGVmYXVsdCksIDI9ZW5hYmxlZCBmb3IgRVYgY2VydGlmaWNhdGVzIG9ubHkKICogT0NTUCAobm9uLXN0YXBsZWQpIGxlYWtzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzaXRlcyB5b3UgdmlzaXQgdG8gdGhlIENBIChjZXJ0IGF1dGhvcml0eSkKICogSXQncyBhIHRyYWRlLW9mZiBiZXR3ZWVuIHNlY3VyaXR5IChjaGVja2luZykgYW5kIHByaXZhY3kgKGxlYWtpbmcgaW5mbyB0byB0aGUgQ0EpCiAqIFtOT1RFXSBUaGlzIHByZWYgb25seSBjb250cm9scyBPQ1NQIGZldGNoaW5nIGFuZCBkb2VzIG5vdCBhZmZlY3QgT0NTUCBzdGFwbGluZwogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5PlNlY3VyaXR5PkNlcnRpZmljYXRlcz5RdWVyeSBPQ1NQIHJlc3BvbmRlciBzZXJ2ZXJzLi4uCiAqIFsxXSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PY3NwICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5PQ1NQLmVuYWJsZWQiLCAxKTsgLy8gW0RFRkFVTFQ6IDFdCi8qIDEyMTI6IHNldCBPQ1NQIGZldGNoIGZhaWx1cmVzIChub24tc3RhcGxlZCwgc2VlIDEyMTEpIHRvIGhhcmQtZmFpbCBbU0VUVVAtV0VCXQogKiBXaGVuIGEgQ0EgY2Fubm90IGJlIHJlYWNoZWQgdG8gdmFsaWRhdGUgYSBjZXJ0LCBGaXJlZm94IGp1c3QgY29udGludWVzIHRoZSBjb25uZWN0aW9uICg9c29mdC1mYWlsKQogKiBTZXR0aW5nIHRoaXMgcHJlZiB0byB0cnVlIHRlbGxzIEZpcmVmb3ggdG8gaW5zdGVhZCB0ZXJtaW5hdGUgdGhlIGNvbm5lY3Rpb24gKD1oYXJkLWZhaWwpCiAqIEl0IGlzIHBvaW50bGVzcyB0byBzb2Z0LWZhaWwgd2hlbiBhbiBPQ1NQIGZldGNoIGZhaWxzOiB5b3UgY2Fubm90IGNvbmZpcm0gYSBjZXJ0IGlzIHN0aWxsIHZhbGlkIChpdAogKiBjb3VsZCBoYXZlIGJlZW4gcmV2b2tlZCkgYW5kL29yIHlvdSBjb3VsZCBiZSB1bmRlciBhdHRhY2sgKGUuZy4gbWFsaWNpb3VzIGJsb2NraW5nIG9mIE9DU1Agc2VydmVycykKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9zZWN1cml0eS8yMDEzLzA3LzI5L29jc3Atc3RhcGxpbmctaW4tZmlyZWZveC8KICogWzJdIGh0dHBzOi8vd3d3LmltcGVyaWFsdmlvbGV0Lm9yZy8yMDE0LzA0LzE5L3JldmNoZWNraW5nLmh0bWwgKioqLwp1c2VyX3ByZWYoInNlY3VyaXR5Lk9DU1AucmVxdWlyZSIsIHRydWUpOwoKLyoqIENFUlRTIC8gSFBLUCAoSFRUUCBQdWJsaWMgS2V5IFBpbm5pbmcpICoqKi8KLyogMTIyMDogZGlzYWJsZSBvciBsaW1pdCBTSEEtMSBjZXJ0aWZpY2F0ZXMKICogMCA9IGFsbG93IGFsbAogKiAxID0gYmxvY2sgYWxsCiAqIDMgPSBvbmx5IGFsbG93IGxvY2FsbHktYWRkZWQgcm9vdHMgKGUuZy4gYW50aS12aXJ1cykgKGRlZmF1bHQpCiAqIDQgPSBvbmx5IGFsbG93IGxvY2FsbHktYWRkZWQgcm9vdHMgb3IgZm9yIGNlcnRzIGluIDIwMTUgYW5kIGVhcmxpZXIKICogW1NFVFVQLUNIUk9NRV0gSWYgeW91IGhhdmUgcHJvYmxlbXMsIHVwZGF0ZSB5b3VyIHNvZnR3YXJlOiBTSEEtMSBpcyBvYnNvbGV0ZQogKiBbMV0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL3NlY3VyaXR5LzIwMTYvMTAvMTgvcGhhc2luZy1vdXQtc2hhLTEtb24tdGhlLXB1YmxpYy13ZWIvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5wa2kuc2hhMV9lbmZvcmNlbWVudF9sZXZlbCIsIDEpOwovKiAxMjIxOiBkaXNhYmxlIFdpbmRvd3MgOC4xJ3MgTWljcm9zb2Z0IEZhbWlseSBTYWZldHkgY2VydCBbRkY1MCtdIFtXSU5ET1dTXQogKiAwPWRpc2FibGUgZGV0ZWN0aW5nIEZhbWlseSBTYWZldHkgbW9kZSBhbmQgaW1wb3J0aW5nIHRoZSByb290CiAqIDE9b25seSBhdHRlbXB0IHRvIGRldGVjdCBGYW1pbHkgU2FmZXR5IG1vZGUgKGRvbid0IGltcG9ydCB0aGUgcm9vdCkKICogMj1kZXRlY3QgRmFtaWx5IFNhZmV0eSBtb2RlIGFuZCBpbXBvcnQgdGhlIHJvb3QKICogWzFdIGh0dHBzOi8vZ2l0bGFiLnRvcnByb2plY3Qub3JnL3Rwby9hcHBsaWNhdGlvbnMvdG9yLWJyb3dzZXIvLS9pc3N1ZXMvMjE2ODYgKioqLwp1c2VyX3ByZWYoInNlY3VyaXR5LmZhbWlseV9zYWZldHkubW9kZSIsIDApOwovKiAxMjIzOiBlbmFibGUgc3RyaWN0IHBpbm5pbmcKICogUEtQIChQdWJsaWMgS2V5IFBpbm5pbmcpIDA9ZGlzYWJsZWQsIDE9YWxsb3cgdXNlciBNaVRNIChzdWNoIGFzIHlvdXIgYW50aXZpcnVzKSwgMj1zdHJpY3QKICogW1NFVFVQLVdFQl0gSWYgeW91IHJlbHkgb24gYW4gQVYgKGFudGl2aXJ1cykgdG8gcHJvdGVjdCB5b3VyIHdlYiBicm93c2luZwogKiBieSBpbnNwZWN0aW5nIEFMTCB5b3VyIHdlYiB0cmFmZmljLCB0aGVuIGxlYXZlIGF0IGN1cnJlbnQgZGVmYXVsdD0xCiAqIFsxXSBodHRwczovL2dpdGxhYi50b3Jwcm9qZWN0Lm9yZy90cG8vYXBwbGljYXRpb25zL3Rvci1icm93c2VyLy0vaXNzdWVzLzE2MjA2ICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5jZXJ0X3Bpbm5pbmcuZW5mb3JjZW1lbnRfbGV2ZWwiLCAyKTsKLyogMTIyNDogZW5hYmxlIENSTGl0ZSBbRkY3MytdCiAqIDAgPSBkaXNhYmxlZAogKiAxID0gY29uc3VsdCBDUkxpdGUgYnV0IG9ubHkgY29sbGVjdCB0ZWxlbWV0cnkgKGRlZmF1bHQpCiAqIDIgPSBjb25zdWx0IENSTGl0ZSBhbmQgZW5mb3JjZSBib3RoICJSZXZva2VkIiBhbmQgIk5vdCBSZXZva2VkIiByZXN1bHRzCiAqIDMgPSBjb25zdWx0IENSTGl0ZSBhbmQgZW5mb3JjZSAiTm90IFJldm9rZWQiIHJlc3VsdHMsIGJ1dCBkZWZlciB0byBPQ1NQIGZvciAiUmV2b2tlZCIgKEZGOTkrKQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9idWdsaXN0LmNnaT9idWdfaWQ9MTQyOTgwMCwxNjcwOTg1LDE3NTMwNzEKICogWzJdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9zZWN1cml0eS90YWcvY3JsaXRlLyAqKiovCnVzZXJfcHJlZigic2VjdXJpdHkucmVtb3RlX3NldHRpbmdzLmNybGl0ZV9maWx0ZXJzLmVuYWJsZWQiLCB0cnVlKTsKdXNlcl9wcmVmKCJzZWN1cml0eS5wa2kuY3JsaXRlX21vZGUiLCAyKTsKCi8qKiBNSVhFRCBDT05URU5UICoqKi8KLyogMTI0MTogZGlzYWJsZSBpbnNlY3VyZSBwYXNzaXZlIGNvbnRlbnQgKHN1Y2ggYXMgaW1hZ2VzKSBvbiBodHRwcyBwYWdlcyBbU0VUVVAtV0VCXSAqKiovCnVzZXJfcHJlZigic2VjdXJpdHkubWl4ZWRfY29udGVudC5ibG9ja19kaXNwbGF5X2NvbnRlbnQiLCB0cnVlKTsKLyogMTI0NDogZW5hYmxlIEhUVFBTLU9ubHkgbW9kZSBpbiBhbGwgd2luZG93cyBbRkY3NitdCiAqIFdoZW4gdGhlIHRvcC1sZXZlbCBpcyBIVFRQUywgaW5zZWN1cmUgc3VicmVzb3VyY2VzIGFyZSBhbHNvIHVwZ3JhZGVkIChzaWxlbnQgZmFpbCkKICogW1NFVFRJTkddIHRvIGFkZCBzaXRlIGV4Y2VwdGlvbnM6IFBhZGxvY2s+SFRUUFMtT25seSBtb2RlPk9uIChhZnRlciAiQ29udGludWUgdG8gSFRUUCBTaXRlIikKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5IVFRQUy1Pbmx5IE1vZGUgKGFuZCBtYW5hZ2UgZXhjZXB0aW9ucykKICogW1RFU1RdIGh0dHA6Ly9leGFtcGxlLmNvbSBbdXBncmFkZV0KICogW1RFU1RdIGh0dHA6Ly9uZXZlcnNzbC5jb20vIFtubyB1cGdyYWRlXSAqKiovCnVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZSIsIHRydWUpOyAvLyBbRkY3NitdCiAgIC8vIHVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZV9wYm0iLCB0cnVlKTsgLy8gW0ZGODArXQovKiAxMjQ1OiBlbmFibGUgSFRUUFMtT25seSBtb2RlIGZvciBsb2NhbCByZXNvdXJjZXMgW0ZGNzcrXSAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZS51cGdyYWRlX2xvY2FsIiwgdHJ1ZSk7Ci8qIDEyNDY6IGRpc2FibGUgSFRUUCBiYWNrZ3JvdW5kIHJlcXVlc3RzIFtGRjgyK10KICogV2hlbiBhdHRlbXB0aW5nIHRvIHVwZ3JhZGUsIGlmIHRoZSBzZXJ2ZXIgZG9lc24ndCByZXNwb25kIHdpdGhpbiAzIHNlY29uZHMsIEZpcmVmb3ggc2VuZHMKICogYSB0b3AtbGV2ZWwgSFRUUCByZXF1ZXN0IHdpdGhvdXQgcGF0aCBpbiBvcmRlciB0byBjaGVjayBpZiB0aGUgc2VydmVyIHN1cHBvcnRzIEhUVFBTIG9yIG5vdAogKiBUaGlzIGlzIGRvbmUgdG8gYXZvaWQgd2FpdGluZyBmb3IgYSB0aW1lb3V0IHdoaWNoIHRha2VzIDkwIHNlY29uZHMKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvYnVnbGlzdC5jZ2k/YnVnX2lkPTE2NDIzODcsMTY2MDk0NSAqKiovCnVzZXJfcHJlZigiZG9tLnNlY3VyaXR5Lmh0dHBzX29ubHlfbW9kZV9zZW5kX2h0dHBfYmFja2dyb3VuZF9yZXF1ZXN0IiwgZmFsc2UpOwoKLyoqIFVJIChVc2VyIEludGVyZmFjZSkgKioqLwovKiAxMjcwOiBkaXNwbGF5IHdhcm5pbmcgb24gdGhlIHBhZGxvY2sgZm9yICJicm9rZW4gc2VjdXJpdHkiIChpZiAxMjAxIGlzIGZhbHNlKQogKiBCdWc6IHdhcm5pbmcgcGFkbG9jayBub3QgaW5kaWNhdGVkIGZvciBzdWJyZXNvdXJjZXMgb24gYSBzZWN1cmUgcGFnZSEgWzJdCiAqIFsxXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvU2VjdXJpdHk6UmVuZWdvdGlhdGlvbgogKiBbMl0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xMzUzNzA1ICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wudHJlYXRfdW5zYWZlX25lZ290aWF0aW9uX2FzX2Jyb2tlbiIsIHRydWUpOwovKiAxMjcxOiBjb250cm9sICJBZGQgU2VjdXJpdHkgRXhjZXB0aW9uIiBkaWFsb2cgb24gU1NMIHdhcm5pbmdzCiAqIDA9ZG8gbmVpdGhlciwgMT1wcmUtcG9wdWxhdGUgdXJsLCAyPXByZS1wb3B1bGF0ZSB1cmwgKyBwcmUtZmV0Y2ggY2VydCAoZGVmYXVsdCkKICogWzFdIGh0dHBzOi8vZ2l0aHViLmNvbS9weWxseXVra28vdXNlci5qcy9pc3N1ZXMvMjEwICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnNzbF9vdmVycmlkZV9iZWhhdmlvciIsIDEpOwovKiAxMjcyOiBkaXNwbGF5IGFkdmFuY2VkIGluZm9ybWF0aW9uIG9uIEluc2VjdXJlIENvbm5lY3Rpb24gd2FybmluZyBwYWdlcwogKiBvbmx5IHdvcmtzIHdoZW4gaXQncyBwb3NzaWJsZSB0byBhZGQgYW4gZXhjZXB0aW9uCiAqIGkuZS4gaXQgZG9lc24ndCB3b3JrIGZvciBIU1RTIGRpc2NyZXBhbmNpZXMgKGh0dHBzOi8vc3ViZG9tYWluLnByZWxvYWRlZC1oc3RzLmJhZHNzbC5jb20vKQogKiBbVEVTVF0gaHR0cHM6Ly9leHBpcmVkLmJhZHNzbC5jb20vICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnh1bC5lcnJvcl9wYWdlcy5leHBlcnRfYmFkX2NlcnQiLCB0cnVlKTsKCi8qKiogW1NFQ1RJT04gMTQwMF06IEZPTlRTICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTQwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBiZXJlZnQgb2YgbGlmZSEiKTsKLyogMTQwMTogZGlzYWJsZSByZW5kZXJpbmcgb2YgU1ZHIE9wZW5UeXBlIGZvbnRzICoqKi8KdXNlcl9wcmVmKCJnZnguZm9udF9yZW5kZXJpbmcub3BlbnR5cGVfc3ZnLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDE0MDI6IGxpbWl0IGZvbnQgdmlzaWJpbGl0eSAoV2luZG93cywgTWFjLCBzb21lIExpbnV4KSBbRkY5NCtdCiAqIFVzZXMgaGFyZGNvZGVkIGxpc3RzIHdpdGggdHdvIHBhcnRzOiBrQmFzZUZvbnRzICsga0xhbmdQYWNrRm9udHMgWzFdLCBidW5kbGVkIGZvbnRzIGFyZSBhdXRvLWFsbG93ZWQKICogSW4gbm9ybWFsIHdpbmRvd3M6IHVzZXMgdGhlIGZpcnN0IGFwcGxpY2FibGU6IFJGUCAoNDUwNikgb3ZlciBUUCBvdmVyIFN0YW5kYXJkCiAqIEluIFByaXZhdGUgQnJvd3Npbmcgd2luZG93czogdXNlcyB0aGUgbW9zdCByZXN0cmljdGl2ZSBiZXR3ZWVuIG5vcm1hbCBhbmQgcHJpdmF0ZQogKiAxPW9ubHkgYmFzZSBzeXN0ZW0gZm9udHMsIDI9YWxzbyBmb250cyBmcm9tIG9wdGlvbmFsIGxhbmd1YWdlIHBhY2tzLCAzPWFsc28gdXNlci1pbnN0YWxsZWQgZm9udHMKICogWzFdIGh0dHBzOi8vc2VhcmNoZm94Lm9yZy9tb3ppbGxhLWNlbnRyYWwvc2VhcmNoP3BhdGg9U3RhbmRhcmRGb250cyouaW5jICoqKi8KICAgLy8gdXNlcl9wcmVmKCJsYXlvdXQuY3NzLmZvbnQtdmlzaWJpbGl0eS5wcml2YXRlIiwgMSk7CiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LmNzcy5mb250LXZpc2liaWxpdHkuc3RhbmRhcmQiLCAxKTsKICAgLy8gdXNlcl9wcmVmKCJsYXlvdXQuY3NzLmZvbnQtdmlzaWJpbGl0eS50cmFja2luZ3Byb3RlY3Rpb24iLCAxKTsKCi8qKiogW1NFQ1RJT04gMTYwMF06IEhFQURFUlMgLyBSRUZFUkVSUwogICAgICAgICAgICAgICAgICBmdWxsIFVSSTogaHR0cHM6Ly9leGFtcGxlLmNvbTo4ODg4L2Zvby9iYXIuaHRtbD9pZD0xMjM0CiAgICAgc2NoZW1lK2hvc3QrcG9ydCtwYXRoOiBodHRwczovL2V4YW1wbGUuY29tOjg4ODgvZm9vL2Jhci5odG1sCiAgICAgICAgICBzY2hlbWUraG9zdCtwb3J0OiBodHRwczovL2V4YW1wbGUuY29tOjg4ODgKICAgWzFdIGh0dHBzOi8vZmVlZGluZy5jbG91ZC5nZWVrLm56L3Bvc3RzL3R3ZWFraW5nLXJlZmVycmVyLWZvci1wcml2YWN5LWluLWZpcmVmb3gvCioqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTYwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QgcmVzdHMgaW4gcGVhY2UhIik7Ci8qIDE2MDE6IGNvbnRyb2wgd2hlbiB0byBzZW5kIGEgY3Jvc3Mtb3JpZ2luIHJlZmVyZXIKICogMD1hbHdheXMgKGRlZmF1bHQpLCAxPW9ubHkgaWYgYmFzZSBkb21haW5zIG1hdGNoLCAyPW9ubHkgaWYgaG9zdHMgbWF0Y2gKICogW1NFVFVQLVdFQl0gQnJlYWthZ2U6IG9sZGVyIG1vZGVtcy9yb3V0ZXJzIGFuZCBzb21lIHNpdGVzIGUuZyBiYW5rcywgdmltZW8sIGljbG91ZCwgaW5zdGFncmFtCiAqIElmICIyIiBpcyB0b28gc3RyaWN0LCB0aGVuIG92ZXJyaWRlIHRvICIwIiBhbmQgdXNlIFNtYXJ0IFJlZmVyZXIgZXh0ZW5zaW9uIChTdHJpY3QgbW9kZSArIGFkZCBleGNlcHRpb25zKSAqKiovCnVzZXJfcHJlZigibmV0d29yay5odHRwLnJlZmVyZXIuWE9yaWdpblBvbGljeSIsIDIpOwovKiAxNjAyOiBjb250cm9sIHRoZSBhbW91bnQgb2YgY3Jvc3Mtb3JpZ2luIGluZm9ybWF0aW9uIHRvIHNlbmQgW0ZGNTIrXQogKiAwPXNlbmQgZnVsbCBVUkkgKGRlZmF1bHQpLCAxPXNjaGVtZStob3N0K3BvcnQrcGF0aCwgMj1zY2hlbWUraG9zdCtwb3J0ICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci5YT3JpZ2luVHJpbW1pbmdQb2xpY3kiLCAyKTsKCi8qKiogW1NFQ1RJT04gMTcwMF06IENPTlRBSU5FUlMKICAgQ2hlY2sgb3V0IFRlbXBvcmFyeSBDb250YWluZXJzIFsyXSwgcmVhZCB0aGUgYXJ0aWNsZSBbM10sIGFuZCB2aXNpdCB0aGUgd2lraS9yZXBvIFs0XQogICBbMV0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1NlY3VyaXR5L0NvbnRleHR1YWxfSWRlbnRpdHlfUHJvamVjdC9Db250YWluZXJzCiAgIFsyXSBodHRwczovL2FkZG9ucy5tb3ppbGxhLm9yZy9maXJlZm94L2FkZG9uL3RlbXBvcmFyeS1jb250YWluZXJzLwogICBbM10gaHR0cHM6Ly9tZWRpdW0uY29tL0BzdG9pY2FsbHkvZW5oYW5jZS15b3VyLXByaXZhY3ktaW4tZmlyZWZveC13aXRoLXRlbXBvcmFyeS1jb250YWluZXJzLTMzOTI1Y2Q2Y2QyMQogICBbNF0gaHR0cHM6Ly9naXRodWIuY29tL3N0b2ljYWxseS90ZW1wb3JhcnktY29udGFpbmVycy93aWtpCioqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiMTcwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBiaXQgdGhlIGR1c3QhIik7Ci8qIDE3MDE6IGVuYWJsZSBDb250YWluZXIgVGFicyBhbmQgaXRzIFVJIHNldHRpbmcgW0ZGNTArXQogKiBbU0VUVElOR10gR2VuZXJhbD5UYWJzPkVuYWJsZSBDb250YWluZXIgVGFicyAqKiovCnVzZXJfcHJlZigicHJpdmFjeS51c2VyQ29udGV4dC5lbmFibGVkIiwgdHJ1ZSk7CnVzZXJfcHJlZigicHJpdmFjeS51c2VyQ29udGV4dC51aS5lbmFibGVkIiwgdHJ1ZSk7Ci8qIDE3MDI6IHNldCBiZWhhdmlvciBvbiAiKyBUYWIiIGJ1dHRvbiB0byBkaXNwbGF5IGNvbnRhaW5lciBtZW51IG9uIGxlZnQgY2xpY2sgW0ZGNzQrXQogKiBbTk9URV0gVGhlIG1lbnUgaXMgYWx3YXlzIHNob3duIG9uIGxvbmcgcHJlc3MgYW5kIHJpZ2h0IGNsaWNrCiAqIFtTRVRUSU5HXSBHZW5lcmFsPlRhYnM+RW5hYmxlIENvbnRhaW5lciBUYWJzPlNldHRpbmdzPlNlbGVjdCBhIGNvbnRhaW5lciBmb3IgZWFjaCBuZXcgdGFiICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LnVzZXJDb250ZXh0Lm5ld1RhYkNvbnRhaW5lck9uTGVmdENsaWNrLmVuYWJsZWQiLCB0cnVlKTsKCi8qKiogW1NFQ1RJT04gMjAwMF06IFBMVUdJTlMgLyBNRURJQSAvIFdFQlJUQyAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjIwMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3Mgc251ZmZlZCBpdCEiKTsKLyogMjAwMTogZGlzYWJsZSBXZWJSVEMgKFdlYiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbikKICogRmlyZWZveCB1c2VzIG1ETlMgaG9zdG5hbWUgb2JmdXNjYXRpb24gb24gZGVza3RvcCAoZXhjZXB0IFdpbmRvd3M3LzgpIGFuZCB0aGUKICogcHJpdmF0ZSBJUCBpcyBORVZFUiBleHBvc2VkLCBleGNlcHQgaWYgcmVxdWlyZWQgaW4gVFJVU1RFRCBzY2VuYXJpb3M7IGkuZS4gYWZ0ZXIKICogeW91IGdyYW50IGRldmljZSAobWljcm9waG9uZSBvciBjYW1lcmEpIGFjY2VzcwogKiBbU0VUVVAtSEFSREVOXSBUZXN0IGZpcnN0LiBXaW5kb3dzNy84IHVzZXJzIG9ubHk6IGJlaGluZCBhIHByb3h5IHdobyBuZXZlciB1c2UgV2ViUlRDCiAqIFtURVNUXSBodHRwczovL2Jyb3dzZXJsZWFrcy5jb20vd2VicnRjCiAqIFsxXSBodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2cvZGlzY3Vzcy13ZWJydGMvYy82c3RRWGk3MkJFVS9tLzJGd1pkMjRVQVFBSgogKiBbMl0gaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9kcmFmdC1pZXRmLW1tdXNpYy1tZG5zLWljZS1jYW5kaWRhdGVzI3NlY3Rpb24tMy4xLjEgKioqLwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLnBlZXJjb25uZWN0aW9uLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDIwMDI6IGZvcmNlIFdlYlJUQyBpbnNpZGUgdGhlIHByb3h5IFtGRjcwK10gKioqLwp1c2VyX3ByZWYoIm1lZGlhLnBlZXJjb25uZWN0aW9uLmljZS5wcm94eV9vbmx5X2lmX2JlaGluZF9wcm94eSIsIHRydWUpOwovKiAyMDAzOiBmb3JjZSBhIHNpbmdsZSBuZXR3b3JrIGludGVyZmFjZSBmb3IgSUNFIGNhbmRpZGF0ZXMgZ2VuZXJhdGlvbiBbRkY0MitdCiAqIFdoZW4gdXNpbmcgYSBzeXN0ZW0td2lkZSBwcm94eSwgaXQgdXNlcyB0aGUgcHJveHkgaW50ZXJmYWNlCiAqIFsxXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUlRDSWNlQ2FuZGlkYXRlCiAqIFsyXSBodHRwczovL3dpa2kubW96aWxsYS5vcmcvTWVkaWEvV2ViUlRDL1ByaXZhY3kgKioqLwp1c2VyX3ByZWYoIm1lZGlhLnBlZXJjb25uZWN0aW9uLmljZS5kZWZhdWx0X2FkZHJlc3Nfb25seSIsIHRydWUpOwovKiAyMDA0OiBmb3JjZSBleGNsdXNpb24gb2YgcHJpdmF0ZSBJUHMgZnJvbSBJQ0UgY2FuZGlkYXRlcyBbRkY1MStdCiAqIFtTRVRVUC1IQVJERU5dIFRoaXMgd2lsbCBwcm90ZWN0IHlvdXIgcHJpdmF0ZSBJUCBldmVuIGluIFRSVVNURUQgc2NlbmFyaW9zIGFmdGVyIHlvdQogKiBncmFudCBkZXZpY2UgYWNjZXNzLCBidXQgb2Z0ZW4gcmVzdWx0cyBpbiBicmVha2FnZSBvbiB2aWRlby1jb25mZXJlbmNpbmcgcGxhdGZvcm1zICoqKi8KICAgLy8gdXNlcl9wcmVmKCJtZWRpYS5wZWVyY29ubmVjdGlvbi5pY2Uubm9faG9zdCIsIHRydWUpOwovKiAyMDIwOiBkaXNhYmxlIEdNUCAoR2Vja28gTWVkaWEgUGx1Z2lucykKICogWzFdIGh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9HZWNrb01lZGlhUGx1Z2lucyAqKiovCiAgIC8vIHVzZXJfcHJlZigibWVkaWEuZ21wLXByb3ZpZGVyLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDIwMjE6IGRpc2FibGUgd2lkZXZpbmUgQ0RNIChDb250ZW50IERlY3J5cHRpb24gTW9kdWxlKQogKiBbTk9URV0gVGhpcyBpcyBjb3ZlcmVkIGJ5IHRoZSBFTUUgbWFzdGVyIHN3aXRjaCAoMjAyMikgKioqLwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLmdtcC13aWRldmluZWNkbS5lbmFibGVkIiwgZmFsc2UpOwovKiAyMDIyOiBkaXNhYmxlIGFsbCBEUk0gY29udGVudCAoRU1FOiBFbmNyeXB0aW9uIE1lZGlhIEV4dGVuc2lvbikKICogT3B0aW9uYWxseSBoaWRlIHRoZSBzZXR0aW5nIHdoaWNoIGFsc28gZGlzYWJsZXMgdGhlIERSTSBwcm9tcHQKICogW1NFVFVQLVdFQl0gZS5nLiBOZXRmbGl4LCBBbWF6b24gUHJpbWUsIEh1bHUsIEhCTywgRGlzbmV5KywgU2hvd3RpbWUsIFN0YXJ6LCBEaXJlY3RUVgogKiBbU0VUVElOR10gR2VuZXJhbD5EUk0gQ29udGVudD5QbGF5IERSTS1jb250cm9sbGVkIGNvbnRlbnQKICogW1RFU1RdIGh0dHBzOi8vYml0bW92aW4uY29tL2RlbW9zL2RybQogKiBbMV0gaHR0cHM6Ly93d3cuZWZmLm9yZy9kZWVwbGlua3MvMjAxNy8xMC9kcm1zLWRlYWQtY2FuYXJ5LWhvdy13ZS1qdXN0LWxvc3Qtd2ViLXdoYXQtd2UtbGVhcm5lZC1pdC1hbmQtd2hhdC13ZS1uZWVkLWRvLW5leHQgKioqLwp1c2VyX3ByZWYoIm1lZGlhLmVtZS5lbmFibGVkIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuZW1lLnVpLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDIwMzA6IGRpc2FibGUgYXV0b3BsYXkgb2YgSFRNTDUgbWVkaWEgW0ZGNjMrXQogKiAwPUFsbG93IGFsbCwgMT1CbG9jayBub24tbXV0ZWQgbWVkaWEgKGRlZmF1bHQpLCA1PUJsb2NrIGFsbAogKiBbTk9URV0gWW91IGNhbiBzZXQgZXhjZXB0aW9ucyB1bmRlciBzaXRlIHBlcm1pc3Npb25zCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+UGVybWlzc2lvbnM+QXV0b3BsYXk+U2V0dGluZ3M+RGVmYXVsdCBmb3IgYWxsIHdlYnNpdGVzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJtZWRpYS5hdXRvcGxheS5kZWZhdWx0IiwgNSk7Ci8qIDIwMzE6IGRpc2FibGUgYXV0b3BsYXkgb2YgSFRNTDUgbWVkaWEgaWYgeW91IGludGVyYWN0ZWQgd2l0aCB0aGUgc2l0ZSBbRkY3OCtdCiAqIDA9c3RpY2t5IChkZWZhdWx0KSwgMT10cmFuc2llbnQsIDI9dXNlcgogKiBGaXJlZm94J3MgQXV0b3BsYXkgUG9saWN5IERvY3VtZW50YXRpb24gKFBERikgaXMgbGlua2VkIGJlbG93IHZpYSBTVU1PCiAqIFtOT1RFXSBJZiB5b3UgaGF2ZSB0cm91YmxlIHdpdGggc29tZSB2aWRlbyBzaXRlcywgdGhlbiBhZGQgYW4gZXhjZXB0aW9uICgyMDMwKQogKiBbMV0gaHR0cHM6Ly9zdXBwb3J0Lm1vemlsbGEub3JnL3F1ZXN0aW9ucy8xMjkzMjMxICoqKi8KdXNlcl9wcmVmKCJtZWRpYS5hdXRvcGxheS5ibG9ja2luZ19wb2xpY3kiLCAyKTsKCi8qKiogW1NFQ1RJT04gMjQwMF06IERPTSAoRE9DVU1FTlQgT0JKRUNUIE1PREVMKSAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjI0MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3Mga2lja2VkIHRoZSBidWNrZXQhIik7Ci8qIDI0MDE6IGRpc2FibGUgIkNvbmZpcm0geW91IHdhbnQgdG8gbGVhdmUiIGRpYWxvZyBvbiBwYWdlIGNsb3NlCiAqIERvZXMgbm90IHByZXZlbnQgSlMgbGVha3Mgb2YgdGhlIHBhZ2UgY2xvc2UgZXZlbnQKICogWzFdIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0V2ZW50cy9iZWZvcmV1bmxvYWQgKioqLwp1c2VyX3ByZWYoImRvbS5kaXNhYmxlX2JlZm9yZXVubG9hZCIsIHRydWUpOwovKiAyNDAyOiBwcmV2ZW50IHNjcmlwdHMgZnJvbSBtb3ZpbmcgYW5kIHJlc2l6aW5nIG9wZW4gd2luZG93cyAqKiovCnVzZXJfcHJlZigiZG9tLmRpc2FibGVfd2luZG93X21vdmVfcmVzaXplIiwgdHJ1ZSk7Ci8qIDI0MDM6IGJsb2NrIHBvcHVwIHdpbmRvd3MKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5QZXJtaXNzaW9ucz5CbG9jayBwb3AtdXAgd2luZG93cyAqKiovCnVzZXJfcHJlZigiZG9tLmRpc2FibGVfb3Blbl9kdXJpbmdfbG9hZCIsIHRydWUpOwovKiAyNDA0OiBsaW1pdCBldmVudHMgdGhhdCBjYW4gY2F1c2UgYSBwb3B1cCBbU0VUVVAtV0VCXSAqKiovCnVzZXJfcHJlZigiZG9tLnBvcHVwX2FsbG93ZWRfZXZlbnRzIiwgImNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBwb2ludGVyZG93biIpOwoKLyoqKiBbU0VDVElPTiAyNjAwXTogTUlTQ0VMTEFORU9VUyAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjI2MDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgcnVuIGRvd24gdGhlIGN1cnRhaW4hIik7Ci8qIDI2MDE6IHByZXZlbnQgYWNjZXNzaWJpbGl0eSBzZXJ2aWNlcyBmcm9tIGFjY2Vzc2luZyB5b3VyIGJyb3dzZXIgW1JFU1RBUlRdCiAqIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvYWNjZXNzaWJpbGl0eS1zZXJ2aWNlcyAqKiovCnVzZXJfcHJlZigiYWNjZXNzaWJpbGl0eS5mb3JjZV9kaXNhYmxlZCIsIDEpOwovKiAyNjAyOiBkaXNhYmxlIHNlbmRpbmcgYWRkaXRpb25hbCBhbmFseXRpY3MgdG8gd2ViIHNlcnZlcnMKICogWzFdIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9OYXZpZ2F0b3Ivc2VuZEJlYWNvbiAqKiovCnVzZXJfcHJlZigiYmVhY29uLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDI2MDM6IHJlbW92ZSB0ZW1wIGZpbGVzIG9wZW5lZCB3aXRoIGFuIGV4dGVybmFsIGFwcGxpY2F0aW9uCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzMwMjQzMyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5oZWxwZXJBcHBzLmRlbGV0ZVRlbXBGaWxlT25FeGl0IiwgdHJ1ZSk7Ci8qIDI2MDQ6IGRpc2FibGUgcGFnZSB0aHVtYm5haWwgY29sbGVjdGlvbiAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5wYWdldGh1bWJuYWlscy5jYXB0dXJpbmdfZGlzYWJsZWQiLCB0cnVlKTsgLy8gW0hJRERFTiBQUkVGXQovKiAyNjA2OiBkaXNhYmxlIFVJVG91ciBiYWNrZW5kIHNvIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0IGEgcmVtb3RlIHBhZ2UgY2FuIHVzZSBpdCAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci51aXRvdXIuZW5hYmxlZCIsIGZhbHNlKTsKdXNlcl9wcmVmKCJicm93c2VyLnVpdG91ci51cmwiLCAiIik7Ci8qIDI2MDc6IGRpc2FibGUgdmFyaW91cyBkZXZlbG9wZXIgdG9vbHMgaW4gYnJvd3NlciBjb250ZXh0CiAqIFtTRVRUSU5HXSBEZXZ0b29scz5BZHZhbmNlZCBTZXR0aW5ncz5FbmFibGUgYnJvd3NlciBjaHJvbWUgYW5kIGFkZC1vbiBkZWJ1Z2dpbmcgdG9vbGJveGVzCiAqIFsxXSBodHRwczovL2dpdGh1Yi5jb20vcHlsbHl1a2tvL3VzZXIuanMvaXNzdWVzLzE3OSNpc3N1ZWNvbW1lbnQtMjQ2NDY4Njc2ICoqKi8KdXNlcl9wcmVmKCJkZXZ0b29scy5jaHJvbWUuZW5hYmxlZCIsIGZhbHNlKTsKLyogMjYwODogcmVzZXQgcmVtb3RlIGRlYnVnZ2luZyB0byBkaXNhYmxlZAogKiBbMV0gaHR0cHM6Ly9naXRsYWIudG9ycHJvamVjdC5vcmcvdHBvL2FwcGxpY2F0aW9ucy90b3ItYnJvd3Nlci8tL2lzc3Vlcy8xNjIyMiAqKiovCnVzZXJfcHJlZigiZGV2dG9vbHMuZGVidWdnZXIucmVtb3RlLWVuYWJsZWQiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KLyogMjYxMTogZGlzYWJsZSBtaWRkbGUgbW91c2UgY2xpY2sgb3BlbmluZyBsaW5rcyBmcm9tIGNsaXBib2FyZAogKiBbMV0gaHR0cHM6Ly9naXRsYWIudG9ycHJvamVjdC5vcmcvdHBvL2FwcGxpY2F0aW9ucy90b3ItYnJvd3Nlci8tL2lzc3Vlcy8xMDA4OSAqKiovCnVzZXJfcHJlZigibWlkZGxlbW91c2UuY29udGVudExvYWRVUkwiLCBmYWxzZSk7Ci8qIDI2MTU6IGRpc2FibGUgd2Vic2l0ZXMgb3ZlcnJpZGluZyBGaXJlZm94J3Mga2V5Ym9hcmQgc2hvcnRjdXRzIFtGRjU4K10KICogMCAoZGVmYXVsdCkgb3IgMT1hbGxvdywgMj1ibG9jawogKiBbU0VUVElOR10gdG8gYWRkIHNpdGUgZXhjZXB0aW9uczogQ3RybCtJPlBlcm1pc3Npb25zPk92ZXJyaWRlIEtleWJvYXJkIFNob3J0Y3V0cyAqKiovCiAgIC8vIHVzZXJfcHJlZigicGVybWlzc2lvbnMuZGVmYXVsdC5zaG9ydGN1dHMiLCAyKTsKLyogMjYxNjogcmVtb3ZlIHNwZWNpYWwgcGVybWlzc2lvbnMgZm9yIGNlcnRhaW4gbW96aWxsYSBkb21haW5zIFtGRjM1K10KICogWzFdIHJlc291cmNlOi8vYXBwL2RlZmF1bHRzL3Blcm1pc3Npb25zICoqKi8KdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5tYW5hZ2VyLmRlZmF1bHRzVXJsIiwgIiIpOwovKiAyNjE3OiByZW1vdmUgd2ViY2hhbm5lbCB3aGl0ZWxpc3QgKioqLwp1c2VyX3ByZWYoIndlYmNoYW5uZWwuYWxsb3dPYmplY3QudXJsV2hpdGVsaXN0IiwgIiIpOwovKiAyNjE5OiB1c2UgUHVueWNvZGUgaW4gSW50ZXJuYXRpb25hbGl6ZWQgRG9tYWluIE5hbWVzIHRvIGVsaW1pbmF0ZSBwb3NzaWJsZSBzcG9vZmluZwogKiBbU0VUVVAtV0VCXSBNaWdodCBiZSB1bmRlc2lyYWJsZSBmb3Igbm9uLWxhdGluIGFscGhhYmV0IHVzZXJzIHNpbmNlIGxlZ2l0aW1hdGUgSUROJ3MgYXJlIGFsc28gcHVueWNvZGVkCiAqIFtURVNUXSBodHRwczovL3d3dy54bi0tODBhazZhYTkyZS5jb20vICh3d3cuYXBwbGUuY29tKQogKiBbMV0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL0lETl9EaXNwbGF5X0FsZ29yaXRobQogKiBbMl0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUROX2hvbW9ncmFwaF9hdHRhY2sKICogWzNdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1wdW55Y29kZStmaXJlZm94CiAqIFs0XSBodHRwczovL3d3dy54dWRvbmd6LmNvbS9ibG9nLzIwMTcvaWRuLXBoaXNoaW5nLyAqKiovCnVzZXJfcHJlZigibmV0d29yay5JRE5fc2hvd19wdW55Y29kZSIsIHRydWUpOwovKiAyNjIwOiBlbmZvcmNlIFBERkpTLCBkaXNhYmxlIFBERkpTIHNjcmlwdGluZyBbU0VUVVAtQ0hST01FXQogKiBUaGlzIHNldHRpbmcgY29udHJvbHMgaWYgdGhlIG9wdGlvbiAiRGlzcGxheSBpbiBGaXJlZm94IiBpcyBhdmFpbGFibGUgaW4gdGhlIHNldHRpbmcgYmVsb3cKICogICBhbmQgYnkgZWZmZWN0IGNvbnRyb2xzIHdoZXRoZXIgUERGcyBhcmUgaGFuZGxlZCBpbi1icm93c2VyIG9yIGV4dGVybmFsbHkgKCJBc2siIG9yICJPcGVuIFdpdGgiKQogKiBQUk9TOiBwZGZqcyBpcyBsaWdodHdlaWdodCwgb3BlbiBzb3VyY2UsIGFuZCBtb3JlIHNlY3VyZS92ZXR0ZWQgdGhhbiBtb3N0CiAqICAgRXhwbG9pdHMgYXJlIHJhcmUgKG9uZSBzZXJpb3VzIGNhc2UgaW4gc2V2ZW4geWVhcnMpLCB0cmVhdGVkIHNlcmlvdXNseSBhbmQgcGF0Y2hlZCBxdWlja2x5LgogKiAgIEl0IGRvZXNuJ3QgYnJlYWsgInN0YXRlIHNlcGFyYXRpb24iIG9mIGJyb3dzZXIgY29udGVudCAoYnkgbm90IHNoYXJpbmcgd2l0aCBPUywgaW5kZXBlbmRlbnQgYXBwcykuCiAqICAgSXQgbWFpbnRhaW5zIGRpc2sgYXZvaWRhbmNlIGFuZCBhcHBsaWNhdGlvbiBkYXRhIGlzb2xhdGlvbi4gSXQncyBjb252ZW5pZW50LiBZb3UgY2FuIHN0aWxsIHNhdmUgdG8gZGlzay4KICogQ09OUzogWW91IG1heSBwcmVmZXIgYSBkaWZmZXJlbnQgcGRmIHJlYWRlciBmb3Igc2VjdXJpdHkgcmVhc29ucwogKiBDQVZFQVQ6IEpTIGNhbiBzdGlsbCBmb3JjZSBhIHBkZiB0byBvcGVuIGluLWJyb3dzZXIgYnkgYnVuZGxpbmcgaXRzIG93biBjb2RlCiAqIFtTRVRUSU5HXSBHZW5lcmFsPkFwcGxpY2F0aW9ucz5Qb3J0YWJsZSBEb2N1bWVudCBGb3JtYXQgKFBERikgKioqLwp1c2VyX3ByZWYoInBkZmpzLmRpc2FibGVkIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCnVzZXJfcHJlZigicGRmanMuZW5hYmxlU2NyaXB0aW5nIiwgZmFsc2UpOyAvLyBbRkY4NitdCi8qIDI2MjE6IGRpc2FibGUgbGlua3MgbGF1bmNoaW5nIFdpbmRvd3MgU3RvcmUgb24gV2luZG93cyA4LzguMS8xMCBbV0lORE9XU10gKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsucHJvdG9jb2wtaGFuZGxlci5leHRlcm5hbC5tcy13aW5kb3dzLXN0b3JlIiwgZmFsc2UpOwovKiAyNjIzOiBkaXNhYmxlIHBlcm1pc3Npb25zIGRlbGVnYXRpb24gW0ZGNzMrXQogKiBDdXJyZW50bHkgYXBwbGllcyB0byBjcm9zcy1vcmlnaW4gZ2VvbG9jYXRpb24sIGNhbWVyYSwgbWljIGFuZCBzY3JlZW4tc2hhcmluZwogKiBwZXJtaXNzaW9ucywgYW5kIGZ1bGxzY3JlZW4gcmVxdWVzdHMuIERpc2FibGluZyBkZWxlZ2F0aW9uIG1lYW5zIGFueSBwcm9tcHRzCiAqIGZvciB0aGVzZSB3aWxsIHNob3cvdXNlIHRoZWlyIGNvcnJlY3QgM3JkIHBhcnR5IG9yaWdpbgogKiBbMV0gaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIXRvcGljL21vemlsbGEuZGV2LnBsYXRmb3JtL0JkRk9NQXVDR1c4L2Rpc2N1c3Npb24gKioqLwp1c2VyX3ByZWYoInBlcm1pc3Npb25zLmRlbGVnYXRpb24uZW5hYmxlZCIsIGZhbHNlKTsKCi8qKiBET1dOTE9BRFMgKioqLwovKiAyNjUxOiBlbmFibGUgdXNlciBpbnRlcmFjdGlvbiBmb3Igc2VjdXJpdHkgYnkgYWx3YXlzIGFza2luZyB3aGVyZSB0byBkb3dubG9hZAogKiBbU0VUVVAtQ0hST01FXSBPbiBBbmRyb2lkIHRoaXMgYmxvY2tzIGxvbmd0YXBwaW5nIGFuZCBzYXZpbmcgaW1hZ2VzCiAqIFtTRVRUSU5HXSBHZW5lcmFsPkRvd25sb2Fkcz5BbHdheXMgYXNrIHlvdSB3aGVyZSB0byBzYXZlIGZpbGVzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmRvd25sb2FkLnVzZURvd25sb2FkRGlyIiwgZmFsc2UpOwovKiAyNjUyOiBkaXNhYmxlIGRvd25sb2FkcyBwYW5lbCBvcGVuaW5nIG9uIGV2ZXJ5IGRvd25sb2FkIFtGRjk2K10gKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuZG93bmxvYWQuYWx3YXlzT3BlblBhbmVsIiwgZmFsc2UpOwovKiAyNjUzOiBkaXNhYmxlIGFkZGluZyBkb3dubG9hZHMgdG8gdGhlIHN5c3RlbSdzICJyZWNlbnQgZG9jdW1lbnRzIiBsaXN0ICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmRvd25sb2FkLm1hbmFnZXIuYWRkVG9SZWNlbnREb2NzIiwgZmFsc2UpOwoKLyoqIEVYVEVOU0lPTlMgKioqLwovKiAyNjYwOiBsb2NrIGRvd24gYWxsb3dlZCBleHRlbnNpb24gZGlyZWN0b3JpZXMKICogW1NFVFVQLUNIUk9NRV0gVGhpcyB3aWxsIGJyZWFrIGV4dGVuc2lvbnMsIGxhbmd1YWdlIHBhY2tzLCB0aGVtZXMgYW5kIGFueSBvdGhlcgogKiBYUEkgZmlsZXMgd2hpY2ggYXJlIGluc3RhbGxlZCBvdXRzaWRlIG9mIHByb2ZpbGUgYW5kIGFwcGxpY2F0aW9uIGRpcmVjdG9yaWVzCiAqIFsxXSBodHRwczovL21pa2Uua2FwbHkuY29tLzIwMTIvMDIvMjEvdW5kZXJzdGFuZGluZy1hZGQtb24tc2NvcGVzLwogKiBbMV0gaHR0cHM6Ly9hcmNoaXZlLmlzL0RZakFNIChhcmNoaXZlZCkgKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMuZW5hYmxlZFNjb3BlcyIsIDUpOyAvLyBbSElEREVOIFBSRUZdCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy5hdXRvRGlzYWJsZVNjb3BlcyIsIDE1KTsgLy8gW0RFRkFVTFQ6IDE1XQovKiAyNjYxOiBkaXNhYmxlIGJ5cGFzc2luZyAzcmQgcGFydHkgZXh0ZW5zaW9uIGluc3RhbGwgcHJvbXB0cyBbRkY4MitdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL2J1Z2xpc3QuY2dpP2J1Z19pZD0xNjU5NTMwLDE2ODEzMzEgKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMucG9zdERvd25sb2FkVGhpcmRQYXJ0eVByb21wdCIsIGZhbHNlKTsKLyogMjY2MjogZGlzYWJsZSB3ZWJleHRlbnNpb24gcmVzdHJpY3Rpb25zIG9uIGNlcnRhaW4gbW96aWxsYSBkb21haW5zICh5b3UgYWxzbyBuZWVkIDQ1MDMpIFtGRjYwK10KICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvYnVnbGlzdC5jZ2k/YnVnX2lkPTEzODQzMzAsMTQwNjc5NSwxNDE1NjQ0LDE0NTM5ODggKioqLwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMud2ViZXh0ZW5zaW9ucy5yZXN0cmljdGVkRG9tYWlucyIsICIiKTsKCi8qKiogW1NFQ1RJT04gMjcwMF06IEVUUCAoRU5IQU5DRUQgVFJBQ0tJTkcgUFJPVEVDVElPTikgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICIyNzAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGpvaW5lZCB0aGUgYmxlZWRpbicgY2hvaXIgaW52aXNpYmxlISIpOwovKiAyNzAxOiBlbmFibGUgRVRQIFN0cmljdCBNb2RlIFtGRjg2K10KICogRVRQIFN0cmljdCBNb2RlIGVuYWJsZXMgVG90YWwgQ29va2llIFByb3RlY3Rpb24gKFRDUCkKICogW05PVEVdIEFkZGluZyBzaXRlIGV4Y2VwdGlvbnMgZGlzYWJsZXMgYWxsIEVUUCBwcm90ZWN0aW9ucyBmb3IgdGhhdCBzaXRlIGFuZCBpbmNyZWFzZXMgdGhlIHJpc2sgb2YKICogY3Jvc3Mtc2l0ZSBzdGF0ZSB0cmFja2luZyBlLmcuIGV4Y2VwdGlvbnMgZm9yIFNpdGVBIGFuZCBTaXRlQiBtZWFucyBQYXJ0eUMgb24gYm90aCBzaXRlcyBpcyBzaGFyZWQKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9zZWN1cml0eS8yMDIxLzAyLzIzL3RvdGFsLWNvb2tpZS1wcm90ZWN0aW9uLwogKiBbU0VUVElOR10gdG8gYWRkIHNpdGUgZXhjZXB0aW9uczogVXJsYmFyPkVUUCBTaGllbGQKICogW1NFVFRJTkddIHRvIG1hbmFnZSBzaXRlIGV4Y2VwdGlvbnM6IE9wdGlvbnM+UHJpdmFjeSAmIFNlY3VyaXR5PkVuaGFuY2VkIFRyYWNraW5nIFByb3RlY3Rpb24+TWFuYWdlIEV4Y2VwdGlvbnMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuY29udGVudGJsb2NraW5nLmNhdGVnb3J5IiwgInN0cmljdCIpOwovKiAyNzAyOiBkaXNhYmxlIEVUUCB3ZWIgY29tcGF0IGZlYXR1cmVzIFtGRjkzK10KICogW1NFVFVQLUhBUkRFTl0gSW5jbHVkZXMgc2tpcCBsaXN0cywgaGV1cmlzdGljcyAoU21hcnRCbG9jaykgYW5kIGF1dG9tYXRpYyBncmFudHMKICogT3BlbmVyIEhldXJpc3RpY3MgYXJlIGdyYW50ZWQgZm9yIDMwIGRheXMgYW5kIFJlZGlyZWN0IEhldXJpc3RpY3MgZm9yIDE1IG1pbnV0ZXMsIHNlZSBbM10KICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9zZWN1cml0eS8yMDIxLzA3LzEzL3NtYXJ0YmxvY2stdjIvCiAqIFsyXSBodHRwczovL2hnLm1vemlsbGEub3JnL21vemlsbGEtY2VudHJhbC9yZXYvZTU0ODNmZDQ2OWFiI2w0LjEyCiAqIFszXSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9Qcml2YWN5L1N0YXRlX1BhcnRpdGlvbmluZyNzdG9yYWdlX2FjY2Vzc19oZXVyaXN0aWNzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmFudGl0cmFja2luZy5lbmFibGVXZWJjb21wYXQiLCBmYWxzZSk7Ci8qIDI3MTA6IGVuYWJsZSBzdGF0ZSBwYXJ0aXRpb25pbmcgb2Ygc2VydmljZSB3b3JrZXJzIFtGRjk2K10gKioqLwp1c2VyX3ByZWYoInByaXZhY3kucGFydGl0aW9uLnNlcnZpY2VXb3JrZXJzIiwgdHJ1ZSk7CgovKioqIFtTRUNUSU9OIDI4MDBdOiBTSFVURE9XTiAmIFNBTklUSVpJTkcgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICIyODAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGJsZWVkaW4nIGRlbWlzZWQhIik7Ci8qKiBDT09LSUVTICsgU0lURSBEQVRBIDogQUxMT1dTIEVYQ0VQVElPTlMgKioqLwovKiAyODAxOiBkZWxldGUgY29va2llcyBhbmQgc2l0ZSBkYXRhIG9uIGV4aXQKICogMD1rZWVwIHVudGlsIHRoZXkgZXhwaXJlIChkZWZhdWx0KSwgMj1rZWVwIHVudGlsIHlvdSBjbG9zZSBGaXJlZm94CiAqIFtOT1RFXSBBICJjb29raWUiIGJsb2NrIHBlcm1pc3Npb24gYWxzbyBjb250cm9scyBsb2NhbFN0b3JhZ2Uvc2Vzc2lvblN0b3JhZ2UsIGluZGV4ZWREQiwKICogc2hhcmVkV29ya2VycyBhbmQgc2VydmljZVdvcmtlcnMuIHNlcnZpY2VXb3JrZXJzIHJlcXVpcmUgYW4gIkFsbG93IiBwZXJtaXNzaW9uCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+Q29va2llcyBhbmQgU2l0ZSBEYXRhPkRlbGV0ZSBjb29raWVzIGFuZCBzaXRlIGRhdGEgd2hlbiBGaXJlZm94IGlzIGNsb3NlZAogKiBbU0VUVElOR10gdG8gYWRkIHNpdGUgZXhjZXB0aW9uczogQ3RybCtJPlBlcm1pc3Npb25zPkNvb2tpZXM+QWxsb3cKICogW1NFVFRJTkddIHRvIG1hbmFnZSBzaXRlIGV4Y2VwdGlvbnM6IE9wdGlvbnM+UHJpdmFjeSAmIFNlY3VyaXR5PlBlcm1pc3Npb25zPlNldHRpbmdzICoqKi8KdXNlcl9wcmVmKCJuZXR3b3JrLmNvb2tpZS5saWZldGltZVBvbGljeSIsIDIpOwovKiAyODAyOiBkZWxldGUgY2FjaGUgb24gZXhpdCBbRkY5NitdCiAqIFtOT1RFXSBXZSBhbHJlYWR5IGRpc2FibGUgZGlzayBjYWNoZSAoMTAwMSkgYW5kIGNsZWFyIG9uIGV4aXQgKDI4MTEpIHdoaWNoIGlzIG1vcmUgcm9idXN0CiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE2NzExODIgKioqLwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJzaXRlZGF0YS5jYWNoZS5lbmFibGVkIiwgdHJ1ZSk7Ci8qIDI4MDM6IHNldCB0aGlyZC1wYXJ0eSBjb29raWVzIHRvIHNlc3Npb24tb25seQogKiBbTk9URV0gLnNlc3Npb25Pbmx5IG92ZXJyaWRlcyAubm9uc2VjdXJlU2Vzc2lvbk9ubHkgZXhjZXB0IHdoZW4gLnNlc3Npb25Pbmx5PWZhbHNlIGFuZAogKiAubm9uc2VjdXJlU2Vzc2lvbk9ubHk9dHJ1ZS4gVGhpcyBhbGxvd3MgeW91IHRvIGtlZXAgSFRUUFMgY29va2llcywgYnV0IHNlc3Npb24tb25seSBIVFRQIG9uZXMKICogWzFdIGh0dHBzOi8vZmVlZGluZy5jbG91ZC5nZWVrLm56L3Bvc3RzL3R3ZWFraW5nLWNvb2tpZXMtZm9yLXByaXZhY3ktaW4tZmlyZWZveC8gKioqLwp1c2VyX3ByZWYoIm5ldHdvcmsuY29va2llLnRoaXJkcGFydHkuc2Vzc2lvbk9ubHkiLCB0cnVlKTsKdXNlcl9wcmVmKCJuZXR3b3JrLmNvb2tpZS50aGlyZHBhcnR5Lm5vbnNlY3VyZVNlc3Npb25Pbmx5IiwgdHJ1ZSk7IC8vIFtGRjU4K10KCi8qKiBTQU5JVElaRSBPTiBTSFVURE9XTiA6IEFMTCBPUiBOT1RISU5HICoqKi8KLyogMjgxMDogZW5hYmxlIEZpcmVmb3ggdG8gY2xlYXIgaXRlbXMgb24gc2h1dGRvd24gKDI4MTEpCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+SGlzdG9yeT5DdXN0b20gU2V0dGluZ3M+Q2xlYXIgaGlzdG9yeSB3aGVuIEZpcmVmb3ggY2xvc2VzICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LnNhbml0aXplLnNhbml0aXplT25TaHV0ZG93biIsIHRydWUpOwovKiAyODExOiBzZXQvZW5mb3JjZSB3aGF0IGl0ZW1zIHRvIGNsZWFyIG9uIHNodXRkb3duIChpZiAyODEwIGlzIHRydWUpIFtTRVRVUC1DSFJPTUVdCiAqIFRoZXNlIGl0ZW1zIGRvIG5vdCB1c2UgZXhjZXB0aW9ucywgaXQgaXMgYWxsIG9yIG5vdGhpbmcgKDE2ODE3MDEpCiAqIFtOT1RFXSBJZiAiaGlzdG9yeSIgaXMgdHJ1ZSwgZG93bmxvYWRzIHdpbGwgYWxzbyBiZSBjbGVhcmVkCiAqIFtOT1RFXSAic2Vzc2lvbnMiOiBBY3RpdmUgTG9naW5zOiByZWZlcnMgdG8gSFRUUCBCYXNpYyBBdXRoZW50aWNhdGlvbiBbMV0sIG5vdCBsb2dpbnMgdmlhIGNvb2tpZXMKICogW05PVEVdICJvZmZsaW5lQXBwcyI6IE9mZmxpbmUgV2Vic2l0ZSBEYXRhOiBsb2NhbFN0b3JhZ2UsIHNlcnZpY2Ugd29ya2VyIGNhY2hlLCBRdW90YU1hbmFnZXIgKEluZGV4ZWREQiwgYXNtLWNhY2hlKQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5Pkhpc3Rvcnk+Q3VzdG9tIFNldHRpbmdzPkNsZWFyIGhpc3Rvcnkgd2hlbiBGaXJlZm94IGNsb3Nlcz5TZXR0aW5ncwogKiBbMV0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzaWNfYWNjZXNzX2F1dGhlbnRpY2F0aW9uICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LmNsZWFyT25TaHV0ZG93bi5jYWNoZSIsIHRydWUpOyAgICAgLy8gW0RFRkFVTFQ6IHRydWVdCnVzZXJfcHJlZigicHJpdmFjeS5jbGVhck9uU2h1dGRvd24uZG93bmxvYWRzIiwgdHJ1ZSk7IC8vIFtERUZBVUxUOiB0cnVlXQp1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJPblNodXRkb3duLmZvcm1kYXRhIiwgdHJ1ZSk7ICAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNsZWFyT25TaHV0ZG93bi5oaXN0b3J5IiwgdHJ1ZSk7ICAgLy8gW0RFRkFVTFQ6IHRydWVdCnVzZXJfcHJlZigicHJpdmFjeS5jbGVhck9uU2h1dGRvd24uc2Vzc2lvbnMiLCB0cnVlKTsgIC8vIFtERUZBVUxUOiB0cnVlXQp1c2VyX3ByZWYoInByaXZhY3kuY2xlYXJPblNodXRkb3duLm9mZmxpbmVBcHBzIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCnVzZXJfcHJlZigicHJpdmFjeS5jbGVhck9uU2h1dGRvd24uY29va2llcyIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmNsZWFyT25TaHV0ZG93bi5zaXRlU2V0dGluZ3MiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KLyogMjgxMjogcmVzZXQgZGVmYXVsdCBpdGVtcyB0byBjbGVhciB3aXRoIEN0cmwtU2hpZnQtRGVsICh0byBtYXRjaCAyODExKSBbU0VUVVAtQ0hST01FXQogKiBUaGlzIGRpYWxvZyBjYW4gYWxzbyBiZSBhY2Nlc3NlZCBmcm9tIHRoZSBtZW51IEhpc3Rvcnk+Q2xlYXIgUmVjZW50IEhpc3RvcnkKICogRmlyZWZveCByZW1lbWJlcnMgeW91ciBsYXN0IGNob2ljZXMuIFRoaXMgd2lsbCByZXNldCB0aGVtIHdoZW4geW91IHN0YXJ0IEZpcmVmb3gKICogW05PVEVdIFJlZ2FyZGxlc3Mgb2Ygd2hhdCB5b3Ugc2V0ICJkb3dubG9hZHMiIHRvLCBhcyBzb29uIGFzIHRoZSBkaWFsb2cKICogZm9yICJDbGVhciBSZWNlbnQgSGlzdG9yeSIgaXMgb3BlbmVkLCBpdCBpcyBzeW5jZWQgdG8gdGhlIHNhbWUgYXMgImhpc3RvcnkiICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5jYWNoZSIsIHRydWUpOyAgICAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5mb3JtZGF0YSIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5oaXN0b3J5IiwgdHJ1ZSk7ICAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5zZXNzaW9ucyIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KdXNlcl9wcmVmKCJwcml2YWN5LmNwZC5vZmZsaW5lQXBwcyIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQp1c2VyX3ByZWYoInByaXZhY3kuY3BkLmNvb2tpZXMiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5jcGQuZG93bmxvYWRzIiwgdHJ1ZSk7IC8vIG5vdCB1c2VkLCBzZWUgbm90ZSBhYm92ZQogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuY3BkLnBhc3N3b3JkcyIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXSBub3QgbGlzdGVkCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5jcGQuc2l0ZVNldHRpbmdzIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCi8qIDI4MTM6IGNsZWFyIFNlc3Npb24gUmVzdG9yZSBkYXRhIHdoZW4gc2FuaXRpemluZyBvbiBzaHV0ZG93biBvciBtYW51YWxseSBbRkYzNCtdCiAqIFtOT1RFXSBOb3QgbmVlZGVkIGlmIFNlc3Npb24gUmVzdG9yZSBpcyBub3QgdXNlZCAoMDEwMikgb3IgaXQgaXMgYWxyZWFkeSBjbGVhcmVkIHdpdGggaGlzdG9yeSAoMjgxMSkKICogW05PVEVdIHByaXZhY3kuY2xlYXJPblNodXRkb3duLm9wZW5XaW5kb3dzIHByZXZlbnRzIHJlc3VtaW5nIGZyb20gY3Jhc2hlcyAoYWxzbyBzZWUgNTAwOCkKICogW05PVEVdIHByaXZhY3kuY3BkLm9wZW5XaW5kb3dzIGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBhbiBhZGRpdGlvbmFsIHdpbmRvdyB0byBvcGVuICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmNsZWFyT25TaHV0ZG93bi5vcGVuV2luZG93cyIsIHRydWUpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuY3BkLm9wZW5XaW5kb3dzIiwgdHJ1ZSk7Ci8qIDI4MTQ6IHJlc2V0IGRlZmF1bHQgIlRpbWUgcmFuZ2UgdG8gY2xlYXIiIGZvciAiQ2xlYXIgUmVjZW50IEhpc3RvcnkiICgyODEyKQogKiBGaXJlZm94IHJlbWVtYmVycyB5b3VyIGxhc3QgY2hvaWNlLiBUaGlzIHdpbGwgcmVzZXQgdGhlIHZhbHVlIHdoZW4geW91IHN0YXJ0IEZpcmVmb3gKICogMD1ldmVyeXRoaW5nLCAxPWxhc3QgaG91ciwgMj1sYXN0IHR3byBob3VycywgMz1sYXN0IGZvdXIgaG91cnMsIDQ9dG9kYXkKICogW05PVEVdIFZhbHVlcyA1IChsYXN0IDUgbWludXRlcykgYW5kIDYgKGxhc3QgMjQgaG91cnMpIGFyZSBub3QgbGlzdGVkIGluIHRoZSBkcm9wZG93biwKICogd2hpY2ggd2lsbCBkaXNwbGF5IGEgYmxhbmsgdmFsdWUsIGFuZCBhcmUgbm90IGd1YXJhbnRlZWQgdG8gd29yayAqKiovCnVzZXJfcHJlZigicHJpdmFjeS5zYW5pdGl6ZS50aW1lU3BhbiIsIDApOwoKLyoqKiBbU0VDVElPTiA0NTAwXTogUkZQIChSRVNJU1QgRklOR0VSUFJJTlRJTkcpCiAgIFJGUCBjb3ZlcnMgYSB3aWRlIHJhbmdlIG9mIG9uZ29pbmcgZmluZ2VycHJpbnRpbmcgc29sdXRpb25zLgogICBJdCBpcyBhbiBhbGwtb3Itbm90aGluZyBidXkgaW46IHlvdSBjYW5ub3QgcGljayBhbmQgY2hvb3NlIHdoYXQgcGFydHMgeW91IHdhbnQKCiAgIFtXQVJOSU5HXSBETyBOT1QgVVNFIGV4dGVuc2lvbnMgdG8gYWx0ZXIgUkZQIHByb3RlY3RlZCBtZXRyaWNzCgogICAgNDE4OTg2IC0gbGltaXQgd2luZG93LnNjcmVlbiAmIENTUyBtZWRpYSBxdWVyaWVzIChGRjQxKQogICAgICBbVEVTVF0gaHR0cHM6Ly9hcmtlbmZveC5naXRodWIuaW8vVFpQL3R6cC5odG1sI3NjcmVlbgogICAxMjgxOTQ5IC0gc3Bvb2Ygc2NyZWVuIG9yaWVudGF0aW9uIChGRjUwKQogICAxMjgxOTYzIC0gaGlkZSB0aGUgY29udGVudHMgb2YgbmF2aWdhdG9yLnBsdWdpbnMgYW5kIG5hdmlnYXRvci5taW1lVHlwZXMgKEZGNTApCiAgICAgIEZGNTM6IGZpeGVzIEdldFN1cHBvcnRlZE5hbWVzIGluIG5zTWltZVR5cGVBcnJheSBhbmQgbnNQbHVnaW5BcnJheSAoMTMyNDA0NCkKICAgMTMzMDg5MCAtIHNwb29mIHRpbWV6b25lIGFzIFVUQzAgKEZGNTUpCiAgIDEzNjAwMzkgLSBzcG9vZiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSBhcyAyIChGRjU1KQogICAxMjE3MjM4IC0gcmVkdWNlIHByZWNpc2lvbiBvZiB0aW1lIGV4cG9zZWQgYnkgamF2YXNjcmlwdCAoRkY1NSkKIEZGNTYKICAgMTM2OTMwMyAtIHNwb29mL2Rpc2FibGUgcGVyZm9ybWFuY2UgQVBJCiAgIDEzMzM2NTEgLSBzcG9vZiBVc2VyIEFnZW50ICYgTmF2aWdhdG9yIEFQSQogICAgICBKUzogdGhlIHZlcnNpb24gaXMgc3Bvb2ZlZCBhcyBFU1IsIGFuZCB0aGUgT1MgYXMgV2luZG93cyAxMCwgT1MgMTAuMTUsIEFuZHJvaWQgMTAsIG9yIExpbnV4CiAgICAgIEhUVFAgSGVhZGVyczogc3Bvb2ZlZCBhcyBXaW5kb3dzIG9yIEFuZHJvaWQKICAgMTM2OTMxOSAtIGRpc2FibGUgZGV2aWNlIHNlbnNvciBBUEkKICAgMTM2OTM1NyAtIGRpc2FibGUgc2l0ZSBzcGVjaWZpYyB6b29tCiAgIDEzMzcxNjEgLSBoaWRlIGdhbWVwYWRzIGZyb20gY29udGVudAogICAxMzcyMDcyIC0gc3Bvb2YgbmV0d29yayBpbmZvcm1hdGlvbiBBUEkgYXMgInVua25vd24iIHdoZW4gZG9tLm5ldGluZm8uZW5hYmxlZCA9IHRydWUKICAgMTMzMzY0MSAtIHJlZHVjZSBmaW5nZXJwcmludGluZyBpbiBXZWJTcGVlY2ggQVBJCiBGRjU3CiAgIDEzNjkzMDkgLSBzcG9vZiBtZWRpYSBzdGF0aXN0aWNzCiAgIDEzODI0OTkgLSByZWR1Y2Ugc2NyZWVuIGNvLW9yZGluYXRlIGZpbmdlcnByaW50aW5nIGluIFRvdWNoIEFQSQogICAxMjE3MjkwICYgMTQwOTY3NyAtIGVuYWJsZSBzb21lIGZpbmdlcnByaW50aW5nIHJlc2lzdGFuY2UgZm9yIFdlYkdMCiAgIDEzODI1NDUgLSByZWR1Y2UgZmluZ2VycHJpbnRpbmcgaW4gQW5pbWF0aW9uIEFQSQogICAxMzU0NjMzIC0gbGltaXQgTWVkaWFFcnJvci5tZXNzYWdlIHRvIGEgd2hpdGVsaXN0CiBGRjU4LTkwCiAgICA5Njc4OTUgLSBzcG9vZiBjYW52YXMgYW5kIGVuYWJsZSBzaXRlIHBlcm1pc3Npb24gcHJvbXB0IChGRjU4KQogICAxMzcyMDczIC0gc3Bvb2YvYmxvY2sgZmluZ2VycHJpbnRpbmcgaW4gTWVkaWFEZXZpY2VzIEFQSSAoRkY1OSkKICAgICAgU3Bvb2Y6IGVudW1lcmF0ZSBkZXZpY2VzIGFzIG9uZSAiSW50ZXJuYWwgQ2FtZXJhIiBhbmQgb25lICJJbnRlcm5hbCBNaWNyb3Bob25lIgogICAgICBCbG9jazogc3VwcHJlc3NlcyB0aGUgb25kZXZpY2VjaGFuZ2UgZXZlbnQKICAgMTAzOTA2OSAtIHdhcm4gd2hlbiBsYW5ndWFnZSBwcmVmcyBhcmUgbm90IHNldCB0byAiZW4qIiAoYWxzbyBzZWUgMDIxMCwgMDIxMSkgKEZGNTkpCiAgIDEyMjIyODUgJiAxNDMzNTkyIC0gc3Bvb2Yga2V5Ym9hcmQgZXZlbnRzIGFuZCBzdXBwcmVzcyBrZXlib2FyZCBtb2RpZmllciBldmVudHMgKEZGNTkpCiAgICAgIFNwb29maW5nIG1pbWljcyB0aGUgY29udGVudCBsYW5ndWFnZSBvZiB0aGUgZG9jdW1lbnQuIEN1cnJlbnRseSBpdCBvbmx5IHN1cHBvcnRzIGVuLVVTLgogICAgICBNb2RpZmllciBldmVudHMgc3VwcHJlc3NlZCBhcmUgU0hJRlQgYW5kIGJvdGggQUxUIGtleXMuIENocm9tZSBpcyBub3QgYWZmZWN0ZWQuCiAgIDEzMzcxNTcgLSBkaXNhYmxlIFdlYkdMIGRlYnVnIHJlbmRlcmVyIGluZm8gKEZGNjApCiAgIDE0NTkwODkgLSBkaXNhYmxlIE9TIGxvY2FsZSBpbiBIVFRQIEFjY2VwdC1MYW5ndWFnZSBoZWFkZXJzIChBTkRST0lEKSAoRkY2MikKICAgMTQ3OTIzOSAtIHJldHVybiAibm8tcHJlZmVyZW5jZSIgd2l0aCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uIChGRjYzKQogICAxMzYzNTA4IC0gc3Bvb2Yvc3VwcHJlc3MgUG9pbnRlciBFdmVudHMgKEZGNjQpCiAgIDE0OTI3NjYgLSBzcG9vZiBwb2ludGVyRXZlbnQucG9pbnRlcmlkIChGRjY1KQogICAxNDg1MjY2IC0gZGlzYWJsZSBleHBvc3VyZSBvZiBzeXN0ZW0gY29sb3JzIHRvIENTUyBvciBjYW52YXMgKEZGNjcpCiAgIDE0OTQwMzQgLSByZXR1cm4gImxpZ2h0IiB3aXRoIHByZWZlcnMtY29sb3Itc2NoZW1lIChGRjY3KQogICAxNTY0NDIyIC0gc3Bvb2YgYXVkaW9Db250ZXh0IG91dHB1dExhdGVuY3kgKEZGNzApCiAgIDE1OTU4MjMgLSByZXR1cm4gYXVkaW9Db250ZXh0IHNhbXBsZVJhdGUgYXMgNDQxMDAgKEZGNzIpCiAgIDE2MDczMTYgLSBzcG9vZiBwb2ludGVyIGFzIGNvYXJzZSBhbmQgaG92ZXIgYXMgbm9uZSAoQU5EUk9JRCkgKEZGNzQpCiAgIDE2MjE0MzMgLSByYW5kb21pemUgY2FudmFzIChwcmV2aW91c2x5IEZGNTgrIHJldHVybmVkIGFuIGFsbC13aGl0ZSBjYW52YXMpIChGRjc4KQogICAxNjUzOTg3IC0gbGltaXQgZm9udCB2aXNpYmlsaXR5IHRvIGJ1bmRsZWQgYW5kICJCYXNlIEZvbnRzIiAoV2luZG93cywgTWFjLCBzb21lIExpbnV4KSAoRkY4MCkKICAgMTQ2MTQ1NCAtIHNwb29mIHNtb290aD10cnVlIGFuZCBwb3dlckVmZmljaWVudD1mYWxzZSBmb3Igc3VwcG9ydGVkIG1lZGlhIGluIE1lZGlhQ2FwYWJpbGl0aWVzIChGRjgyKQogRkY5MSsKICAgIDUzMTkxNSAtIHVzZSBmZGxpYm0ncyBzaW4sIGNvcyBhbmQgdGFuIGluIGpzbWF0aCAoRkY5MywgRVNSOTEuMSkKKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI0NTAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIHBvcHBlZCAnaXMgY2xvZ3MiKTsKLyogNDUwMTogZW5hYmxlIHByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmcgW0ZGNDErXQogKiBbU0VUVVAtV0VCXSBSRlAgY2FuIGNhdXNlIHNvbWUgd2Vic2l0ZSBicmVha2FnZTogbWFpbmx5IGNhbnZhcywgdXNlIGEgc2l0ZSBleGNlcHRpb24gdmlhIHRoZSB1cmxiYXIKICogUkZQIGFsc28gaGFzIGEgZmV3IHNpZGUgZWZmZWN0czogbWFpbmx5IHRpbWV6b25lIGlzIFVUQzAsIGFuZCB3ZWJzaXRlcyB3aWxsIHByZWZlciBsaWdodCB0aGVtZQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy80MTg5ODYgKioqLwp1c2VyX3ByZWYoInByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmciLCB0cnVlKTsKLyogNDUwMjogc2V0IG5ldyB3aW5kb3cgc2l6ZSByb3VuZGluZyBtYXggdmFsdWVzIFtGRjU1K10KICogW1NFVFVQLUNIUk9NRV0gc2l6ZXMgcm91bmQgZG93biBpbiBodW5kcmVkczogd2lkdGggdG8gMjAwcyBhbmQgaGVpZ2h0IHRvIDEwMHMsIHRvIGZpdCB5b3VyIHNjcmVlbgogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xMzMwODgyICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LndpbmRvdy5tYXhJbm5lcldpZHRoIiwgMTYwMCk7CnVzZXJfcHJlZigicHJpdmFjeS53aW5kb3cubWF4SW5uZXJIZWlnaHQiLCA5MDApOwovKiA0NTAzOiBkaXNhYmxlIG1vekFkZG9uTWFuYWdlciBXZWIgQVBJIFtGRjU3K10KICogW05PVEVdIFRvIGFsbG93IGV4dGVuc2lvbnMgdG8gd29yayBvbiBBTU8sIHlvdSBhbHNvIG5lZWQgMjY2MgogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9idWdsaXN0LmNnaT9idWdfaWQ9MTM4NDMzMCwxNDA2Nzk1LDE0MTU2NDQsMTQ1Mzk4OCAqKiovCnVzZXJfcHJlZigicHJpdmFjeS5yZXNpc3RGaW5nZXJwcmludGluZy5ibG9ja19tb3pBZGRvbk1hbmFnZXIiLCB0cnVlKTsgLy8gW0hJRERFTiBQUkVGXQovKiA0NTA0OiBlbmFibGUgUkZQIGxldHRlcmJveGluZyBbRkY2NytdCiAqIER5bmFtaWNhbGx5IHJlc2l6ZXMgdGhlIGlubmVyIHdpbmRvdyBieSBhcHBseWluZyBtYXJnaW5zIGluIHN0ZXBwZWQgcmFuZ2VzIFsyXQogKiBJZiB5b3UgdXNlIHRoZSBkaW1lbnNpb24gcHJlZiwgdGhlbiBpdCB3aWxsIG9ubHkgYXBwbHkgdGhvc2UgcmVzb2x1dGlvbnMuCiAqIFRoZSBmb3JtYXQgaXMgIndpZHRoMXhoZWlnaHQxLCB3aWR0aDJ4aGVpZ2h0MiwgLi4uIiAoZS5nLiAiODAweDYwMCwgMTAwMHgxMDAwIikKICogW1NFVFVQLVdFQl0gVGhpcyBpcyBpbmRlcGVuZGVudCBvZiBSRlAgKDQ1MDEpLiBJZiB5b3UncmUgbm90IHVzaW5nIFJGUCwgb3IgeW91IGFyZSBidXQKICogZGlzbGlrZSB0aGUgbWFyZ2lucywgdGhlbiBmbGlwIHRoaXMgcHJlZiwga2VlcGluZyBpbiBtaW5kIHRoYXQgaXQgaXMgZWZmZWN0aXZlbHkgZmluZ2VycHJpbnRhYmxlCiAqIFtXQVJOSU5HXSBETyBOT1QgVVNFOiB0aGUgZGltZW5zaW9uIHByZWYgaXMgb25seSBtZWFudCBmb3IgdGVzdGluZwogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNDA3MzY2CiAqIFsyXSBodHRwczovL2hnLm1vemlsbGEub3JnL21vemlsbGEtY2VudHJhbC9yZXYvNmQyZDc4NTZlNDY4I2wyLjMyICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LnJlc2lzdEZpbmdlcnByaW50aW5nLmxldHRlcmJveGluZyIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS5yZXNpc3RGaW5nZXJwcmludGluZy5sZXR0ZXJib3hpbmcuZGltZW5zaW9ucyIsICIiKTsgLy8gW0hJRERFTiBQUkVGXQovKiA0NTA1OiBleHBlcmltZW50YWwgUkZQIFtGRjkxK10KICogW1dBUk5JTkddIERPIE5PVCBVU0UgdW5sZXNzIHRlc3RpbmcsIHNlZSBbMV0gY29tbWVudCAxMgogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNjM1NjAzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LnJlc2lzdEZpbmdlcnByaW50aW5nLmV4ZW1wdGVkRG9tYWlucyIsICIqLmV4YW1wbGUuaW52YWxpZCIpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kucmVzaXN0RmluZ2VycHJpbnRpbmcudGVzdEdyYW51bGFyaXR5TWFzayIsIDApOwovKiA0NTA2OiBzZXQgUkZQJ3MgZm9udCB2aXNpYmlsaXR5IGxldmVsICgxNDAyKSBbRkY5NCtdICoqKi8KICAgLy8gdXNlcl9wcmVmKCJsYXlvdXQuY3NzLmZvbnQtdmlzaWJpbGl0eS5yZXNpc3RGaW5nZXJwcmludGluZyIsIDEpOyAvLyBbREVGQVVMVDogMV0KLyogNDUwNzogZGlzYWJsZSBzaG93aW5nIGFib3V0OmJsYW5rIGFzIHNvb24gYXMgcG9zc2libGUgZHVyaW5nIHN0YXJ0dXAgW0ZGNjArXQogKiBXaGVuIGRlZmF1bHQgdHJ1ZSB0aGlzIG5vIGxvbmdlciBtYXNrcyB0aGUgUkZQIGNocm9tZSByZXNpemluZyBhY3Rpdml0eQogKiBbMV0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy8xNDQ4NDIzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLnN0YXJ0dXAuYmxhbmtXaW5kb3ciLCBmYWxzZSk7Ci8qIDQ1MTA6IGRpc2FibGUgdXNpbmcgc3lzdGVtIGNvbG9ycwogKiBbU0VUVElOR10gR2VuZXJhbD5MYW5ndWFnZSBhbmQgQXBwZWFyYW5jZT5Gb250cyBhbmQgQ29sb3JzPkNvbG9ycz5Vc2Ugc3lzdGVtIGNvbG9ycyAqKiovCnVzZXJfcHJlZigiYnJvd3Nlci5kaXNwbGF5LnVzZV9zeXN0ZW1fY29sb3JzIiwgZmFsc2UpOyAvLyBbREVGQVVMVCBmYWxzZSBOT04tV0lORE9XU10KLyogNDUxMTogZW5mb3JjZSBub24tbmF0aXZlIHdpZGdldCB0aGVtZQogKiBTZWN1cml0eTogcmVtb3Zlcy9yZWR1Y2VzIHN5c3RlbSBBUEkgY2FsbHMsIGUuZy4gd2luMzJrIEFQSSBbMV0KICogRmluZ2VycHJpbnRpbmc6IHByb3ZpZGVzIGEgdW5pZm9ybSBsb29rIGFuZCBmZWVsIGFjcm9zcyBwbGF0Zm9ybXMgWzJdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzEzODE5MzgKICogWzJdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTQxMTQyNSAqKiovCnVzZXJfcHJlZigid2lkZ2V0Lm5vbi1uYXRpdmUtdGhlbWUuZW5hYmxlZCIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KLyogNDUxMjogZW5mb3JjZSBsaW5rcyB0YXJnZXRpbmcgbmV3IHdpbmRvd3MgdG8gb3BlbiBpbiBhIG5ldyB0YWIgaW5zdGVhZAogKiAxPW1vc3QgcmVjZW50IHdpbmRvdyBvciB0YWIsIDI9bmV3IHdpbmRvdywgMz1uZXcgdGFiCiAqIFN0b3BzIG1hbGljaW91cyB3aW5kb3cgc2l6ZXMgYW5kIHNvbWUgc2NyZWVuIHJlc29sdXRpb24gbGVha3MuCiAqIFlvdSBjYW4gc3RpbGwgcmlnaHQtY2xpY2sgYSBsaW5rIGFuZCBvcGVuIGluIGEgbmV3IHdpbmRvdwogKiBbU0VUVElOR10gR2VuZXJhbD5UYWJzPk9wZW4gbGlua3MgaW4gdGFicyBpbnN0ZWFkIG9mIG5ldyB3aW5kb3dzCiAqIFtURVNUXSBodHRwczovL2Fya2VuZm94LmdpdGh1Yi5pby9UWlAvdHpwLmh0bWwjc2NyZWVuCiAqIFsxXSBodHRwczovL2dpdGxhYi50b3Jwcm9qZWN0Lm9yZy90cG8vYXBwbGljYXRpb25zL3Rvci1icm93c2VyLy0vaXNzdWVzLzk4ODEgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubGluay5vcGVuX25ld3dpbmRvdyIsIDMpOyAvLyBbREVGQVVMVDogM10KLyogNDUxMzogc2V0IGFsbCBvcGVuIHdpbmRvdyBtZXRob2RzIHRvIGFiaWRlIGJ5ICJicm93c2VyLmxpbmsub3Blbl9uZXd3aW5kb3ciICg0NTEyKQogKiBbMV0gaHR0cHM6Ly9zZWFyY2hmb3gub3JnL21vemlsbGEtY2VudHJhbC9zb3VyY2UvZG9tL3Rlc3RzL2Jyb3dzZXIvYnJvd3Nlcl90ZXN0X25ld193aW5kb3dfZnJvbV9jb250ZW50LmpzICoqKi8KdXNlcl9wcmVmKCJicm93c2VyLmxpbmsub3Blbl9uZXd3aW5kb3cucmVzdHJpY3Rpb24iLCAwKTsKLyogNDUyMDogZGlzYWJsZSBXZWJHTCAoV2ViIEdyYXBoaWNzIExpYnJhcnkpCiAqIFtTRVRVUC1XRUJdIElmIHlvdSBuZWVkIGl0IHRoZW4gb3ZlcnJpZGUgaXQuIFJGUCBzdGlsbCByYW5kb21pemVzIGNhbnZhcyBmb3IgbmFpdmUgc2NyaXB0cyAqKiovCnVzZXJfcHJlZigid2ViZ2wuZGlzYWJsZWQiLCB0cnVlKTsKCi8qKiogW1NFQ1RJT04gNTAwMF06IE9QVElPTkFMIE9QU0VDCiAgIERpc2sgYXZvaWRhbmNlLCBhcHBsaWNhdGlvbiBkYXRhIGlzb2xhdGlvbiwgZXllYmFsbHMuLi4KKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI1MDAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIHRha2VuICdpcyBsYXN0IGJvdyIpOwovKiA1MDAxOiBzdGFydCBGaXJlZm94IGluIFBCIChQcml2YXRlIEJyb3dzaW5nKSBtb2RlCiAqIFtOT1RFXSBJbiB0aGlzIG1vZGUgYWxsIHdpbmRvd3MgYXJlICJwcml2YXRlIHdpbmRvd3MiIGFuZCB0aGUgUEIgbW9kZSBpY29uIGlzIG5vdCBkaXNwbGF5ZWQKICogW05PVEVdIFRoZSBQIGluIFBCIG1vZGUgY2FuIGJlIG1pc2xlYWRpbmc6IGl0IG1lYW5zIG5vICJwZXJzaXN0ZW50IiBkaXNrIHN0YXRlIHN1Y2ggYXMgaGlzdG9yeSwKICogY2FjaGVzLCBzZWFyY2hlcywgY29va2llcywgbG9jYWxTdG9yYWdlLCBJbmRleGVkREIgZXRjICh3aGljaCB5b3UgY2FuIGFjaGlldmUgaW4gbm9ybWFsIG1vZGUpLgogKiBJbiBmYWN0LCBQQiBtb2RlIGxpbWl0cyBvciByZW1vdmVzIHRoZSBhYmlsaXR5IHRvIGNvbnRyb2wgc29tZSBvZiB0aGVzZSwgYW5kIHlvdSBuZWVkIHRvIHF1aXQKICogRmlyZWZveCB0byBjbGVhciB0aGVtLiBQQiBpcyBiZXN0IHVzZWQgYXMgYSBvbmUgb2ZmIHdpbmRvdyAoTWVudT5OZXcgUHJpdmF0ZSBXaW5kb3cpIHRvIHByb3ZpZGUKICogYSB0ZW1wb3Jhcnkgc2VsZi1jb250YWluZWQgbmV3IHNlc3Npb24uIENsb3NlIGFsbCBQcml2YXRlIFdpbmRvd3MgdG8gY2xlYXIgdGhlIFBCIG1vZGUgc2Vzc2lvbi4KICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5IaXN0b3J5PkN1c3RvbSBTZXR0aW5ncz5BbHdheXMgdXNlIHByaXZhdGUgYnJvd3NpbmcgbW9kZQogKiBbMV0gaHR0cHM6Ly93aWtpLm1vemlsbGEub3JnL1ByaXZhdGVfQnJvd3NpbmcKICogWzJdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi9jb21tb24tbXl0aHMtYWJvdXQtcHJpdmF0ZS1icm93c2luZyAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5wcml2YXRlYnJvd3NpbmcuYXV0b3N0YXJ0IiwgdHJ1ZSk7Ci8qIDUwMDI6IGRpc2FibGUgbWVtb3J5IGNhY2hlCiAqIGNhcGFjaXR5OiAtMT1kZXRlcm1pbmUgZHluYW1pY2FsbHkgKGRlZmF1bHQpLCAwPW5vbmUsIG49bWVtb3J5IGNhcGFjaXR5IGluIGtpYmlieXRlcyAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5jYWNoZS5tZW1vcnkuZW5hYmxlIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuY2FjaGUubWVtb3J5LmNhcGFjaXR5IiwgMCk7Ci8qIDUwMDM6IGRpc2FibGUgc2F2aW5nIHBhc3N3b3JkcwogKiBbTk9URV0gVGhpcyBkb2VzIG5vdCBjbGVhciBhbnkgcGFzc3dvcmRzIGFscmVhZHkgc2F2ZWQKICogW1NFVFRJTkddIFByaXZhY3kgJiBTZWN1cml0eT5Mb2dpbnMgYW5kIFBhc3N3b3Jkcz5Bc2sgdG8gc2F2ZSBsb2dpbnMgYW5kIHBhc3N3b3JkcyBmb3Igd2Vic2l0ZXMgKioqLwogICAvLyB1c2VyX3ByZWYoInNpZ25vbi5yZW1lbWJlclNpZ25vbnMiLCBmYWxzZSk7Ci8qIDUwMDQ6IGRpc2FibGUgcGVybWlzc2lvbnMgbWFuYWdlciBmcm9tIHdyaXRpbmcgdG8gZGlzayBbRkY0MStdIFtSRVNUQVJUXQogKiBbTk9URV0gVGhpcyBtZWFucyBhbnkgcGVybWlzc2lvbiBjaGFuZ2VzIGFyZSBzZXNzaW9uIG9ubHkKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvOTY3ODEyICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5tZW1vcnlfb25seSIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCi8qIDUwMDU6IGRpc2FibGUgaW50ZXJtZWRpYXRlIGNlcnRpZmljYXRlIGNhY2hpbmcgW0ZGNDErXSBbUkVTVEFSVF0KICogW05PVEVdIFRoaXMgYWZmZWN0cyBsb2dpbi9jZXJ0L2tleSBkYnMuIFRoZSBlZmZlY3QgaXMgYWxsIGNyZWRlbnRpYWxzIGFyZSBzZXNzaW9uLW9ubHkuCiAqIFNhdmVkIGxvZ2lucyBhbmQgcGFzc3dvcmRzIGFyZSBub3QgYXZhaWxhYmxlLiBSZXNldCB0aGUgcHJlZiBhbmQgcmVzdGFydCB0byByZXR1cm4gdGhlbSAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkubm9jZXJ0ZGIiLCB0cnVlKTsgLy8gW0hJRERFTiBQUkVGXQovKiA1MDA2OiBkaXNhYmxlIGZhdmljb25zIGluIGhpc3RvcnkgYW5kIGJvb2ttYXJrcwogKiBbTk9URV0gU3RvcmVkIGFzIGRhdGEgYmxvYnMgaW4gZmF2aWNvbnMuc3FsaXRlLCB0aGVzZSBkb24ndCByZXZlYWwgYW55dGhpbmcgdGhhdCB5b3VyCiAqIGFjdHVhbCBoaXN0b3J5IChhbmQgYm9va21hcmtzKSBhbHJlYWR5IGRvLiBZb3VyIGhpc3RvcnkgaXMgbW9yZSBkZXRhaWxlZCwgc28KICogY29udHJvbCB0aGF0IGluc3RlYWQ7IGUuZy4gZGlzYWJsZSBoaXN0b3J5LCBjbGVhciBoaXN0b3J5IG9uIGV4aXQsIHVzZSBQQiBtb2RlCiAqIFtOT1RFXSBmYXZpY29ucy5zcWxpdGUgaXMgc2FuaXRpemVkIG9uIEZpcmVmb3ggY2xvc2UgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuY2hyb21lLnNpdGVfaWNvbnMiLCBmYWxzZSk7Ci8qIDUwMDc6IGV4Y2x1ZGUgIlVuZG8gQ2xvc2VkIFRhYnMiIGluIFNlc3Npb24gUmVzdG9yZSAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zZXNzaW9uc3RvcmUubWF4X3RhYnNfdW5kbyIsIDApOwovKiA1MDA4OiBkaXNhYmxlIHJlc3VtaW5nIHNlc3Npb24gZnJvbSBjcmFzaCAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5zZXNzaW9uc3RvcmUucmVzdW1lX2Zyb21fY3Jhc2giLCBmYWxzZSk7Ci8qIDUwMDk6IGRpc2FibGUgIm9wZW4gd2l0aCIgaW4gZG93bmxvYWQgZGlhbG9nIFtGRjUwK10KICogQXBwbGljYXRpb24gZGF0YSBpc29sYXRpb24gWzFdCiAqIFsxXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzEyODE5NTkgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuZG93bmxvYWQuZm9yYmlkX29wZW5fd2l0aCIsIHRydWUpOwovKiA1MDEwOiBkaXNhYmxlIGxvY2F0aW9uIGJhciBzdWdnZXN0aW9uIHR5cGVzCiAqIFtTRVRUSU5HXSBQcml2YWN5ICYgU2VjdXJpdHk+QWRkcmVzcyBCYXI+V2hlbiB1c2luZyB0aGUgYWRkcmVzcyBiYXIsIHN1Z2dlc3QgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLnN1Z2dlc3QuaGlzdG9yeSIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LmJvb2ttYXJrIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLnN1Z2dlc3Qub3BlbnBhZ2UiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIuc3VnZ2VzdC50b3BzaXRlcyIsIGZhbHNlKTsgLy8gW0ZGNzgrXQovKiA1MDExOiBkaXNhYmxlIGxvY2F0aW9uIGJhciBkcm9wZG93bgogKiBUaGlzIHZhbHVlIGNvbnRyb2xzIHRoZSB0b3RhbCBudW1iZXIgb2YgZW50cmllcyB0byBhcHBlYXIgaW4gdGhlIGxvY2F0aW9uIGJhciBkcm9wZG93biAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci51cmxiYXIubWF4UmljaFJlc3VsdHMiLCAwKTsKLyogNTAxMjogZGlzYWJsZSBsb2NhdGlvbiBiYXIgYXV0b2ZpbGwKICogWzFdIGh0dHBzOi8vc3VwcG9ydC5tb3ppbGxhLm9yZy9rYi9hZGRyZXNzLWJhci1hdXRvY29tcGxldGUtZmlyZWZveCN3X3VybC1hdXRvY29tcGxldGUgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudXJsYmFyLmF1dG9GaWxsIiwgZmFsc2UpOwovKiA1MDEzOiBkaXNhYmxlIGJyb3dzaW5nIGFuZCBkb3dubG9hZCBoaXN0b3J5CiAqIFtOT1RFXSBXZSBhbHNvIGNsZWFyIGhpc3RvcnkgYW5kIGRvd25sb2FkcyBvbiBleGl0ICgyODExKQogKiBbU0VUVElOR10gUHJpdmFjeSAmIFNlY3VyaXR5Pkhpc3Rvcnk+Q3VzdG9tIFNldHRpbmdzPlJlbWVtYmVyIGJyb3dzaW5nIGFuZCBkb3dubG9hZCBoaXN0b3J5ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJwbGFjZXMuaGlzdG9yeS5lbmFibGVkIiwgZmFsc2UpOwovKiA1MDE0OiBkaXNhYmxlIFdpbmRvd3MganVtcGxpc3QgW1dJTkRPV1NdICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIubGlzdHMuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIubGlzdHMuZnJlcXVlbnQuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIubGlzdHMucmVjZW50LmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci50YXNrYmFyLmxpc3RzLnRhc2tzLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDUwMTU6IGRpc2FibGUgV2luZG93cyB0YXNrYmFyIHByZXZpZXcgW1dJTkRPV1NdICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnRhc2tiYXIucHJldmlld3MuZW5hYmxlIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2VdCi8qIDUwMTY6IGRpc2NvdXJhZ2UgZG93bmxvYWRpbmcgdG8gZGVza3RvcAogKiAwPWRlc2t0b3AsIDE9ZG93bmxvYWRzIChkZWZhdWx0KSwgMj1sYXN0IHVzZWQKICogW1NFVFRJTkddIFRvIHNldCB5b3VyIGRlZmF1bHQgImRvd25sb2FkcyI6IEdlbmVyYWw+RG93bmxvYWRzPlNhdmUgZmlsZXMgdG8gKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuZG93bmxvYWQuZm9sZGVyTGlzdCIsIDIpOwoKLyoqKiBbU0VDVElPTiA1NTAwXTogT1BUSU9OQUwgSEFSREVOSU5HCiAgIE5vdCByZWNvbW1lbmRlZC4gT3ZlcnJpZGluZyB0aGVzZSBjYW4gY2F1c2UgYnJlYWthZ2UgYW5kIHBlcmZvcm1hbmNlIGlzc3VlcywKICAgdGhleSBhcmUgbW9zdGx5IGZpbmdlcnByaW50YWJsZSwgYW5kIHRoZSB0aHJlYXQgbW9kZWwgaXMgcHJhY3RpY2FsbHkgbm9uZXhpc3RlbnQKKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI1NTAwIHN5bnRheCBlcnJvcjogdGhpcyBpcyBhbiBleC1wYXJyb3QhIik7Ci8qIDU1MDE6IGRpc2FibGUgTWF0aE1MIChNYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlKSBbRkY1MStdCiAqIFsxXSBodHRwczovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVrZXkuY2dpP2tleXdvcmQ9bWF0aG1sICoqKi8KICAgLy8gdXNlcl9wcmVmKCJtYXRobWwuZGlzYWJsZWQiLCB0cnVlKTsgLy8gMTE3MzE5OQovKiA1NTAyOiBkaXNhYmxlIGluLWNvbnRlbnQgU1ZHIChTY2FsYWJsZSBWZWN0b3IgR3JhcGhpY3MpIFtGRjUzK10KICogWzFdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1maXJlZm94K3N2ZyAqKiovCiAgIC8vIHVzZXJfcHJlZigic3ZnLmRpc2FibGVkIiwgdHJ1ZSk7IC8vIDEyMTY4OTMKLyogNTUwMzogZGlzYWJsZSBncmFwaGl0ZQogKiBbMV0gaHR0cHM6Ly9jdmUubWl0cmUub3JnL2NnaS1iaW4vY3Zla2V5LmNnaT9rZXl3b3JkPWZpcmVmb3grZ3JhcGhpdGUKICogWzJdIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dyYXBoaXRlXyhTSUwpICoqKi8KICAgLy8gdXNlcl9wcmVmKCJnZnguZm9udF9yZW5kZXJpbmcuZ3JhcGhpdGUuZW5hYmxlZCIsIGZhbHNlKTsKLyogNTUwNDogZGlzYWJsZSBhc20uanMgW0ZGMjIrXQogKiBbMV0gaHR0cDovL2FzbWpzLm9yZy8KICogWzJdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1hc20uanMKICogWzNdIGh0dHBzOi8vcmgwZGV2LmdpdGh1Yi5pby9ibG9nLzIwMTcvdGhlLXJldHVybi1vZi10aGUtaml0LyAqKiovCiAgIC8vIHVzZXJfcHJlZigiamF2YXNjcmlwdC5vcHRpb25zLmFzbWpzIiwgZmFsc2UpOwovKiA1NTA1OiBkaXNhYmxlIElvbiBhbmQgYmFzZWxpbmUgSklUIHRvIGhhcmRlbiBhZ2FpbnN0IEpTIGV4cGxvaXRzCiAqIFtOT1RFXSBXaGVuIGJvdGggSW9uIGFuZCBKSVQgYXJlIGRpc2FibGVkLCBhbmQgdHJ1c3RlZHByaW5jaXBhbHMKICogaXMgZW5hYmxlZCwgdGhlbiBJb24gY2FuIHN0aWxsIGJlIHVzZWQgYnkgZXh0ZW5zaW9ucyAoMTU5OTIyNikKICogWzFdIGh0dHBzOi8vY3ZlLm1pdHJlLm9yZy9jZ2ktYmluL2N2ZWtleS5jZ2k/a2V5d29yZD1maXJlZm94K2ppdAogKiBbMl0gaHR0cHM6Ly9taWNyb3NvZnRlZGdlLmdpdGh1Yi5pby9lZGdldnIvcG9zdHMvU3VwZXItRHVwZXItU2VjdXJlLU1vZGUvICoqKi8KICAgLy8gdXNlcl9wcmVmKCJqYXZhc2NyaXB0Lm9wdGlvbnMuaW9uIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImphdmFzY3JpcHQub3B0aW9ucy5iYXNlbGluZWppdCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJqYXZhc2NyaXB0Lm9wdGlvbnMuaml0X3RydXN0ZWRwcmluY2lwYWxzIiwgdHJ1ZSk7IC8vIFtGRjc1K10gW0hJRERFTiBQUkVGXQovKiA1NTA2OiBkaXNhYmxlIFdlYkFzc2VtYmx5IFtGRjUyK10KICogVnVsbmVyYWJpbGl0aWVzIFsxXSBoYXZlIGluY3JlYXNpbmdseSBiZWVuIGZvdW5kLCBpbmNsdWRpbmcgdGhvc2Uga25vd24gYW5kIGZpeGVkCiAqIGluIG5hdGl2ZSBwcm9ncmFtcyB5ZWFycyBhZ28gWzJdLiBXQVNNIGhhcyBwb3dlcmZ1bCBsb3ctbGV2ZWwgYWNjZXNzLCBtYWtpbmcKICogY2VydGFpbiBhdHRhY2tzIChicnV0ZS1mb3JjZSkgYW5kIHZ1bG5lcmFiaWxpdGllcyBtb3JlIHBvc3NpYmxlCiAqIFtTVEFUU10gfjAuMiUgb2Ygd2Vic2l0ZXMsIGFib3V0IGhhbGYgb2Ygd2hpY2ggYXJlIGZvciBjcnl0b3BtaW5pbmcgLyBtYWx2ZXJ0aXNpbmcgWzJdWzNdCiAqIFsxXSBodHRwczovL2N2ZS5taXRyZS5vcmcvY2dpLWJpbi9jdmVrZXkuY2dpP2tleXdvcmQ9d2FzbQogKiBbMl0gaHR0cHM6Ly9zcGVjdHJ1bS5pZWVlLm9yZy90ZWNoLXRhbGsvdGVsZWNvbS9zZWN1cml0eS9tb3JlLXdvcnJpZXMtb3Zlci10aGUtc2VjdXJpdHktb2Ytd2ViLWFzc2VtYmx5CiAqIFszXSBodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9oYWxmLW9mLXRoZS13ZWJzaXRlcy11c2luZy13ZWJhc3NlbWJseS11c2UtaXQtZm9yLW1hbGljaW91cy1wdXJwb3NlcyAqKiovCiAgIC8vIHVzZXJfcHJlZigiamF2YXNjcmlwdC5vcHRpb25zLndhc20iLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDYwMDBdOiBET04nVCBUT1VDSCAqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjYwMDAgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3MgJ2lzdG9yeSEiKTsKLyogNjAwMTogZW5mb3JjZSBGaXJlZm94IGJsb2NrbGlzdAogKiBbV0hZXSBJdCBpbmNsdWRlcyB1cGRhdGVzIGZvciAicmV2b2tlZCBjZXJ0aWZpY2F0ZXMiCiAqIFsxXSBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvc2VjdXJpdHkvMjAxNS8wMy8wMy9yZXZva2luZy1pbnRlcm1lZGlhdGUtY2VydGlmaWNhdGVzLWludHJvZHVjaW5nLW9uZWNybC8gKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMuYmxvY2tsaXN0LmVuYWJsZWQiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCi8qIDYwMDI6IGVuZm9yY2Ugbm8gcmVmZXJlciBzcG9vZmluZwogKiBbV0hZXSBTcG9vZmluZyBjYW4gYWZmZWN0IENTUkYgKENyb3NzLVNpdGUgUmVxdWVzdCBGb3JnZXJ5KSBwcm90ZWN0aW9ucyAqKiovCnVzZXJfcHJlZigibmV0d29yay5odHRwLnJlZmVyZXIuc3Bvb2ZTb3VyY2UiLCBmYWxzZSk7IC8vIFtERUZBVUxUOiBmYWxzZV0KLyogNjAwMzogZW5mb3JjZSBDU1AgKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KQogKiBbMV0gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9DU1AgKioqLwp1c2VyX3ByZWYoInNlY3VyaXR5LmNzcC5lbmFibGUiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCi8qIDYwMDQ6IGVuZm9yY2UgYSBzZWN1cml0eSBkZWxheSBvbiBzb21lIGNvbmZpcm1hdGlvbiBkaWFsb2dzIHN1Y2ggYXMgaW5zdGFsbCwgb3Blbi9zYXZlCiAqIFsxXSBodHRwczovL3d3dy5zcXVhcmVmcmVlLmNvbS8yMDA0LzA3LzAxL3JhY2UtY29uZGl0aW9ucy1pbi1zZWN1cml0eS1kaWFsb2dzLyAqKiovCnVzZXJfcHJlZigic2VjdXJpdHkuZGlhbG9nX2VuYWJsZV9kZWxheSIsIDEwMDApOyAvLyBbREVGQVVMVDogMTAwMF0KLyogNjAwNTogZW5mb3JjZSB3aW5kb3cub3BlbmVyIHByb3RlY3Rpb24gW0ZGNjUrXQogKiBNYWtlcyByZWw9bm9vcGVuZXIgaW1wbGljaXQgZm9yIHRhcmdldD1fYmxhbmsgaW4gYW5jaG9yIGFuZCBhcmVhIGVsZW1lbnRzIHdoZW4gbm8gcmVsIGF0dHJpYnV0ZSBpcyBzZXQgKioqLwp1c2VyX3ByZWYoImRvbS50YXJnZXRCbGFua05vT3BlbmVyLmVuYWJsZWQiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCi8qIDYwMDY6IGVuZm9yY2UgIndpbmRvdy5uYW1lIiBwcm90ZWN0aW9uIFtGRjgyK10KICogSWYgYSBuZXcgcGFnZSBmcm9tIGFub3RoZXIgZG9tYWluIGlzIGxvYWRlZCBpbnRvIGEgdGFiLCB0aGVuIHdpbmRvdy5uYW1lIGlzIHNldCB0byBhbiBlbXB0eSBzdHJpbmcuIFRoZSBvcmlnaW5hbAogKiBzdHJpbmcgaXMgcmVzdG9yZWQgaWYgdGhlIHRhYiByZXZlcnRzIGJhY2sgdG8gdGhlIG9yaWdpbmFsIHBhZ2UuIFRoaXMgY2hhbmdlIHByZXZlbnRzIHNvbWUgY3Jvc3Mtc2l0ZSBhdHRhY2tzCiAqIFtURVNUXSBodHRwczovL2Fya2VuZm94LmdpdGh1Yi5pby9UWlAvdGVzdHMvd2luZG93bmFtZWEuaHRtbCAqKiovCnVzZXJfcHJlZigicHJpdmFjeS53aW5kb3cubmFtZS51cGRhdGUuZW5hYmxlZCIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KLyogNjAwNzogZW5mb3JjZSBMb2NhbCBTdG9yYWdlIE5leHQgR2VuZXJhdGlvbiAoTFNORykgW0ZGNjUrXSAqKiovCnVzZXJfcHJlZigiZG9tLnN0b3JhZ2UubmV4dF9nZW4iLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWUgRkY5MitdCi8qIDYwMDg6IGVuZm9yY2Ugbm8gRmlyc3QgUGFydHkgSXNvbGF0aW9uIFtGRjUxK10KICogW1dBUk5JTkddIFJlcGxhY2VkIHdpdGggbmV0d29yayBwYXJ0aXRpb25pbmcgKEZGODUrKSBhbmQgVENQICgyNzAxKSwKICogYW5kIGVuYWJsaW5nIEZQSSBkaXNhYmxlcyB0aG9zZS4gRlBJIGlzIG5vIGxvbmdlciBtYWludGFpbmVkICoqKi8KdXNlcl9wcmVmKCJwcml2YWN5LmZpcnN0cGFydHkuaXNvbGF0ZSIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQovKiA2MDA5OiBlbmZvcmNlIFNtYXJ0QmxvY2sgc2hpbXMgW0ZGODErXQogKiBJbiBGRjk2KyB0aGVzZSBhcmUgbGlzdGVkIGluIGFib3V0OmNvbXBhdAogKiBbMV0gaHR0cHM6Ly9ibG9nLm1vemlsbGEub3JnL3NlY3VyaXR5LzIwMjEvMDMvMjMvaW50cm9kdWNpbmctc21hcnRibG9jay8gKioqLwp1c2VyX3ByZWYoImV4dGVuc2lvbnMud2ViY29tcGF0LmVuYWJsZV9zaGltcyIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KLyogNjAxMDogZW5mb3JjZS9yZXNldCBUTFMgMS4wLzEuMSBkb3duZ3JhZGVzIHRvIHNlc3Npb24gb25seQogKiBbTk9URV0gSW4gRkY5NysgdGhlIFRMUyAxLjAvMS4xIGRvd25ncmFkZSBVWCB3YXMgcmVtb3ZlZAogKiBbVEVTVF0gaHR0cHM6Ly90bHMtdjEtMS5iYWRzc2wuY29tOjEwMTAvICoqKi8KdXNlcl9wcmVmKCJzZWN1cml0eS50bHMudmVyc2lvbi5lbmFibGUtZGVwcmVjYXRlZCIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQovKiA2MDExOiBlbmZvcmNlIGRpc2FibGluZyBvZiBXZWIgQ29tcGF0aWJpbGl0eSBSZXBvcnRlciBbRkY1NitdCiAqIFdlYiBDb21wYXRpYmlsaXR5IFJlcG9ydGVyIGFkZHMgYSAiUmVwb3J0IFNpdGUgSXNzdWUiIGJ1dHRvbiB0byBzZW5kIGRhdGEgdG8gTW96aWxsYQogKiBbV0hZXSBUbyBwcmV2ZW50IHdhc3RpbmcgTW96aWxsYSdzIHRpbWUgd2l0aCBhIGN1c3RvbSBzZXR1cCAqKiovCnVzZXJfcHJlZigiZXh0ZW5zaW9ucy53ZWJjb21wYXQtcmVwb3J0ZXIuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlXQovKiA2MDUwOiBwcmVmc0NsZWFuZXI6IHJlc2V0IGl0ZW1zIHJlbW92ZWQgZnJvbSBhcmtlbmZveCBGRjkyKyAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLmNhY2hlcy5lbmFibGVkIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImRvbS5zdG9yYWdlTWFuYWdlci5lbmFibGVkIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoImRvbS5zdG9yYWdlX2FjY2Vzcy5lbmFibGVkIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuZmlyc3RwYXJ0eS5pc29sYXRlLmJsb2NrX3Bvc3RfbWVzc2FnZSIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LmZpcnN0cGFydHkuaXNvbGF0ZS5yZXN0cmljdF9vcGVuZXJfYWNjZXNzIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuZmlyc3RwYXJ0eS5pc29sYXRlLnVzZV9zaXRlIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5Lmluc2VjdXJlX2Nvbm5lY3Rpb25fdGV4dC5lbmFibGVkIiwgIiIpOwoKLyoqKiBbU0VDVElPTiA3MDAwXTogRE9OJ1QgQk9USEVSICoqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiNzAwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBwdXNoaW5nIHVwIGRhaXNpZXMhIik7Ci8qIDcwMDE6IGRpc2FibGUgQVBJcwogKiBMb2NhdGlvbi1Bd2FyZSBCcm93c2luZywgRnVsbCBTY3JlZW4sIG9mZmxpbmUgY2FjaGUgKGFwcENhY2hlKSwgVmlydHVhbCBSZWFsaXR5CiAqIFtXSFldIFRoZSBBUEkgc3RhdGUgaXMgZWFzaWx5IGZpbmdlcnByaW50YWJsZS4gR2VvIGFuZCBWUiBhcmUgYmVoaW5kIHByb21wdHMgKDcwMDIpLgogKiBhcHBDYWNoZSBzdG9yYWdlIGNhcGFiaWxpdHkgd2FzIHJlbW92ZWQgaW4gRkY5MC4gRnVsbCBzY3JlZW4gcmVxdWlyZXMgdXNlciBpbnRlcmFjdGlvbiAqKiovCiAgIC8vIHVzZXJfcHJlZigiZ2VvLmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiZnVsbC1zY3JlZW4tYXBpLmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5jYWNoZS5vZmZsaW5lLmVuYWJsZSIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJkb20udnIuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0RFRkFVTFQ6IGZhbHNlIEZGOTcrXQovKiA3MDAyOiBzZXQgZGVmYXVsdCBwZXJtaXNzaW9ucwogKiBMb2NhdGlvbiwgQ2FtZXJhLCBNaWNyb3Bob25lLCBOb3RpZmljYXRpb25zIFtGRjU4K10gVmlydHVhbCBSZWFsaXR5IFtGRjczK10KICogMD1hbHdheXMgYXNrIChkZWZhdWx0KSwgMT1hbGxvdywgMj1ibG9jawogKiBbV0hZXSBUaGVzZSBhcmUgZmluZ2VycHJpbnRhYmxlIHZpYSBQZXJtaXNzaW9ucyBBUEksIGV4Y2VwdCBWUi4gSnVzdCBhZGQgc2l0ZQogKiBleGNlcHRpb25zIGFzIGFsbG93L2Jsb2NrIGZvciBmcmVxdWVudGx5IHZpc2l0ZWQvYW5ub3lpbmcgc2l0ZXM6IGkuZS4gbm90IGdsb2JhbAogKiBbU0VUVElOR10gdG8gYWRkIHNpdGUgZXhjZXB0aW9uczogQ3RybCtJPlBlcm1pc3Npb25zPgogKiBbU0VUVElOR10gdG8gbWFuYWdlIHNpdGUgZXhjZXB0aW9uczogT3B0aW9ucz5Qcml2YWN5ICYgU2VjdXJpdHk+UGVybWlzc2lvbnM+U2V0dGluZ3MgKioqLwogICAvLyB1c2VyX3ByZWYoInBlcm1pc3Npb25zLmRlZmF1bHQuZ2VvIiwgMCk7CiAgIC8vIHVzZXJfcHJlZigicGVybWlzc2lvbnMuZGVmYXVsdC5jYW1lcmEiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5kZWZhdWx0Lm1pY3JvcGhvbmUiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJwZXJtaXNzaW9ucy5kZWZhdWx0LmRlc2t0b3Atbm90aWZpY2F0aW9uIiwgMCk7CiAgIC8vIHVzZXJfcHJlZigicGVybWlzc2lvbnMuZGVmYXVsdC54ciIsIDApOyAvLyBWaXJ0dWFsIFJlYWxpdHkKLyogNzAwMzogZGlzYWJsZSBub24tbW9kZXJuIGNpcGhlciBzdWl0ZXMgWzFdCiAqIFtXSFldIFBhc3NpdmUgZmluZ2VycHJpbnRpbmcuIE1pbmltYWwvbm9uLWV4aXN0ZW50IHRocmVhdCBvZiBkb3duZ3JhZGUgYXR0YWNrcwogKiBbMV0gaHR0cHM6Ly9icm93c2VybGVha3MuY29tL3NzbCAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsMy5lY2RoZV9lY2RzYV9hZXNfMjU2X3NoYSIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wzLmVjZGhlX2VjZHNhX2Flc18xMjhfc2hhIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnNzbDMuZWNkaGVfcnNhX2Flc18xMjhfc2hhIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnNzbDMuZWNkaGVfcnNhX2Flc18yNTZfc2hhIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnNzbDMucnNhX2Flc18xMjhfZ2NtX3NoYTI1NiIsIGZhbHNlKTsgLy8gbm8gUEZTCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsMy5yc2FfYWVzXzI1Nl9nY21fc2hhMzg0IiwgZmFsc2UpOyAvLyBubyBQRlMKICAgLy8gdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wzLnJzYV9hZXNfMTI4X3NoYSIsIGZhbHNlKTsgLy8gbm8gUEZTCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsMy5yc2FfYWVzXzI1Nl9zaGEiLCBmYWxzZSk7IC8vIG5vIFBGUwovKiA3MDA0OiBjb250cm9sIFRMUyB2ZXJzaW9ucwogKiBbV0hZXSBQYXNzaXZlIGZpbmdlcnByaW50aW5nIGFuZCBzZWN1cml0eSAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkudGxzLnZlcnNpb24ubWluIiwgMyk7IC8vIFtERUZBVUxUOiAzXQogICAvLyB1c2VyX3ByZWYoInNlY3VyaXR5LnRscy52ZXJzaW9uLm1heCIsIDQpOwovKiA3MDA1OiBkaXNhYmxlIFNTTCBzZXNzaW9uIElEcyBbRkYzNitdCiAqIFtXSFldIFBhc3NpdmUgZmluZ2VycHJpbnRpbmcgYW5kIHBlcmYgY29zdHMuIFRoZXNlIGFyZSBzZXNzaW9uLW9ubHkKICogYW5kIGlzb2xhdGVkIHdpdGggbmV0d29yayBwYXJ0aXRpb25pbmcgKEZGODUrKSBhbmQvb3IgY29udGFpbmVycyAqKiovCiAgIC8vIHVzZXJfcHJlZigic2VjdXJpdHkuc3NsLmRpc2FibGVfc2Vzc2lvbl9pZGVudGlmaWVycyIsIHRydWUpOyAvLyBbSElEREVOIFBSRUZdCi8qIDcwMDY6IG9uaW9ucwogKiBbV0hZXSBGaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCBoaWRkZW4gc2VydmljZXMuIFVzZSBUb3IgQnJvd3NlciAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLnNlY3VyZWNvbnRleHQuYWxsb3dsaXN0X29uaW9ucyIsIHRydWUpOyAvLyBbRkY5NytdIDEzODIzNTkvMTc0NDAwNgogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5yZWZlcmVyLmhpZGVPbmlvblNvdXJjZSIsIHRydWUpOyAvLyAxMzA1MTQ0Ci8qIDcwMDc6IHJlZmVyZXJzCiAqIFtXSFldIE9ubHkgY3Jvc3Mtb3JpZ2luIHJlZmVyZXJzICgxNjAwcykgbmVlZCBjb250cm9sICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuc2VuZFJlZmVyZXJIZWFkZXIiLCAyKTsKICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci50cmltbWluZ1BvbGljeSIsIDApOwovKiA3MDA4OiBzZXQgdGhlIGRlZmF1bHQgUmVmZXJyZXIgUG9saWN5IFtGRjU5K10KICogMD1uby1yZWZlcmVyLCAxPXNhbWUtb3JpZ2luLCAyPXN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4sIDM9bm8tcmVmZXJyZXItd2hlbi1kb3duZ3JhZGUKICogW1dIWV0gRGVmYXVsdHMgYXJlIGZpbmUuIFRoZXkgY2FuIGJlIG92ZXJyaWRkZW4gYnkgYSBzaXRlLWNvbnRyb2xsZWQgUmVmZXJyZXIgUG9saWN5ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci5kZWZhdWx0UG9saWN5IiwgMik7IC8vIFtERUZBVUxUOiAyXQogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5yZWZlcmVyLmRlZmF1bHRQb2xpY3kucGJtb2RlIiwgMik7IC8vIFtERUZBVUxUOiAyXQovKiA3MDA5OiBkaXNhYmxlIEhUVFAyCiAqIFtXSFldIFBhc3NpdmUgZmluZ2VycHJpbnRpbmcuIH41MCUgb2Ygc2l0ZXMgdXNlIEhUVFAyIFsxXQogKiBbMV0gaHR0cHM6Ly93M3RlY2hzLmNvbS90ZWNobm9sb2dpZXMvZGV0YWlscy9jZS1odHRwMi9hbGwvYWxsICoqKi8KICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuc3BkeS5lbmFibGVkIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5zcGR5LmVuYWJsZWQuZGVwcyIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuc3BkeS5lbmFibGVkLmh0dHAyIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5zcGR5LndlYnNvY2tldHMiLCBmYWxzZSk7IC8vIFtGRjY1K10KLyogNzAxMDogZGlzYWJsZSBIVFRQIEFsdGVybmF0aXZlIFNlcnZpY2VzIFtGRjM3K10KICogW1dIWV0gQWxyZWFkeSBpc29sYXRlZCB3aXRoIG5ldHdvcmsgcGFydGl0aW9uaW5nIChGRjg1KykgKioqLwogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsuaHR0cC5hbHRzdmMuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAuYWx0c3ZjLm9lIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2UgRkY5NCtdCi8qIDcwMTE6IGRpc2FibGUgd2Vic2l0ZSBjb250cm9sIG92ZXIgYnJvd3NlciByaWdodC1jbGljayBjb250ZXh0IG1lbnUKICogW1dIWV0gSnVzdCB1c2UgU2hpZnQtUmlnaHQtQ2xpY2sgKioqLwogICAvLyB1c2VyX3ByZWYoImRvbS5ldmVudC5jb250ZXh0bWVudS5lbmFibGVkIiwgZmFsc2UpOwovKiA3MDEyOiBkaXNhYmxlIGljb24gZm9udHMgKGdseXBocykgYW5kIGxvY2FsIGZhbGxiYWNrIHJlbmRlcmluZwogKiBbV0hZXSBCcmVha2FnZSwgZm9udCBmYWxsYmFjayBpcyBlcXVpdmFsZW5jeSwgYWxzbyBSRlAKICogWzFdIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvNzg5Nzg4CiAqIFsyXSBodHRwczovL2dpdGxhYi50b3Jwcm9qZWN0Lm9yZy9sZWdhY3kvdHJhYy8tL2lzc3Vlcy84NDU1ICoqKi8KICAgLy8gdXNlcl9wcmVmKCJnZnguZG93bmxvYWRhYmxlX2ZvbnRzLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjQxK10KICAgLy8gdXNlcl9wcmVmKCJnZnguZG93bmxvYWRhYmxlX2ZvbnRzLmZhbGxiYWNrX2RlbGF5IiwgLTEpOwovKiA3MDEzOiBkaXNhYmxlIENsaXBib2FyZCBBUEkKICogW1dIWV0gRmluZ2VycHJpbnRhYmxlLiBCcmVha2FnZS4gQ3V0L2NvcHkvcGFzdGUgcmVxdWlyZSB1c2VyCiAqIGludGVyYWN0aW9uLCBhbmQgcGFzdGUgaXMgbGltaXRlZCB0byBmb2N1c2VkIGVkaXRhYmxlIGZpZWxkcyAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLmV2ZW50LmNsaXBib2FyZGV2ZW50cy5lbmFibGVkIiwgZmFsc2UpOwovKiA3MDE0OiBkaXNhYmxlIFN5c3RlbSBBZGQtb24gdXBkYXRlcwogKiBbV0hZXSBJdCBjYW4gY29tcHJvbWlzZSBzZWN1cml0eS4gU3lzdGVtIGFkZG9ucyBzaGlwIHdpdGggcHJlZnMsIHVzZSB0aG9zZSAqKiovCiAgIC8vIHVzZXJfcHJlZigiZXh0ZW5zaW9ucy5zeXN0ZW1BZGRvbi51cGRhdGUuZW5hYmxlZCIsIGZhbHNlKTsgLy8gW0ZGNjIrXQogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMuc3lzdGVtQWRkb24udXBkYXRlLnVybCIsICIiKTsgLy8gW0ZGNDQrXQovKiA3MDE1OiBlbmFibGUgdGhlIEROVCAoRG8gTm90IFRyYWNrKSBIVFRQIGhlYWRlcgogKiBbV0hZXSBETlQgaXMgZW5mb3JjZWQgd2l0aCBUcmFja2luZyBQcm90ZWN0aW9uIHdoaWNoIGlzIHVzZWQgaW4gRVRQIFN0cmljdCAoMjcwMSkgKioqLwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kuZG9ub3R0cmFja2hlYWRlci5lbmFibGVkIiwgdHJ1ZSk7Ci8qIDcwMTY6IGN1c3RvbWl6ZSBFVFAgc2V0dGluZ3MKICogW1dIWV0gQXJrZW5mb3ggb25seSBzdXBwb3J0cyBzdHJpY3QgKDI3MDEpIHdoaWNoIHNldHMgdGhlc2UgYXQgcnVudGltZSAqKiovCiAgIC8vIHVzZXJfcHJlZigibmV0d29yay5jb29raWUuY29va2llQmVoYXZpb3IiLCA1KTsKICAgLy8gdXNlcl9wcmVmKCJuZXR3b3JrLmh0dHAucmVmZXJlci5kaXNhbGxvd0Nyb3NzU2l0ZVJlbGF4aW5nRGVmYXVsdCIsIHRydWUpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kucGFydGl0aW9uLm5ldHdvcmtfc3RhdGUub2NzcF9jYWNoZSIsIHRydWUpOwogICAvLyB1c2VyX3ByZWYoInByaXZhY3kudHJhY2tpbmdwcm90ZWN0aW9uLmVuYWJsZWQiLCB0cnVlKTsKICAgLy8gdXNlcl9wcmVmKCJwcml2YWN5LnRyYWNraW5ncHJvdGVjdGlvbi5zb2NpYWx0cmFja2luZy5lbmFibGVkIiwgdHJ1ZSk7CiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS50cmFja2luZ3Byb3RlY3Rpb24uY3J5cHRvbWluaW5nLmVuYWJsZWQiLCB0cnVlKTsgLy8gW0RFRkFVTFQ6IHRydWVdCiAgIC8vIHVzZXJfcHJlZigicHJpdmFjeS50cmFja2luZ3Byb3RlY3Rpb24uZmluZ2VycHJpbnRpbmcuZW5hYmxlZCIsIHRydWUpOyAvLyBbREVGQVVMVDogdHJ1ZV0KLyogNzAxNzogZGlzYWJsZSBzZXJ2aWNlIHdvcmtlcnMKICogW1dIWV0gQWxyZWFkeSBpc29sYXRlZCAoRkY5NispIHdpdGggVENQICgyNzAxKSBiZWhpbmQgYSBwcmVmICgyNzEwKQogKiBvciBibG9ja2VkIHdpdGggVENQIGluIDNyZCBwYXJ0aWVzIChGRjk1IG9yIGxvd2VyKSAqKiovCiAgIC8vIHVzZXJfcHJlZigiZG9tLnNlcnZpY2VXb3JrZXJzLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDcwMTg6IGRpc2FibGUgV2ViIE5vdGlmaWNhdGlvbnMKICogW1dIWV0gV2ViIE5vdGlmaWNhdGlvbnMgYXJlIGJlaGluZCBhIHByb21wdCAoNzAwMikKICogWzFdIGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy9lbi9wcm9kdWN0cy9maXJlZm94L2Jsb2NrLW5vdGlmaWNhdGlvbi1yZXF1ZXN0cy8gKioqLwogICAvLyB1c2VyX3ByZWYoImRvbS53ZWJub3RpZmljYXRpb25zLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjIyK10KICAgLy8gdXNlcl9wcmVmKCJkb20ud2Vibm90aWZpY2F0aW9ucy5zZXJ2aWNld29ya2VyLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFtGRjQ0K10KLyogNzAxOTogZGlzYWJsZSBQdXNoIE5vdGlmaWNhdGlvbnMgW0ZGNDQrXQogKiBbV0hZXSBQdXNoIHJlcXVpcmVzIHN1YnNjcmlwdGlvbgogKiBbTk9URV0gVG8gcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zLCByZXNldCAiZG9tLnB1c2gudXNlckFnZW50SUQiCiAqIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvcHVzaC1ub3RpZmljYXRpb25zLWZpcmVmb3ggKioqLwogICAvLyB1c2VyX3ByZWYoImRvbS5wdXNoLmVuYWJsZWQiLCBmYWxzZSk7CgovKioqIFtTRUNUSU9OIDgwMDBdOiBET04nVCBCT1RIRVI6IEZJTkdFUlBSSU5USU5HCiAgIFtXSFldIFRoZXkgYXJlIGluc3VmZmljaWVudCB0byBoZWxwIGFudGktZmluZ2VycHJpbnRpbmcgYW5kIGRvIG1vcmUgaGFybSB0aGFuIGdvb2QKICAgW1dBUk5JTkddIERPIE5PVCBVU0Ugd2l0aCBSRlAuIFJGUCBhbHJlYWR5IGNvdmVycyB0aGVzZSBhbmQgdGhleSBjYW4gaW50ZXJmZXJlCioqKi8KdXNlcl9wcmVmKCJfdXNlci5qcy5wYXJyb3QiLCAiODAwMCBzeW50YXggZXJyb3I6IHRoZSBwYXJyb3QncyBjcm9zc2VkIHRoZSBKb3JkYW4iKTsKLyogODAwMTogZGlzYWJsZSBBUElzICoqKi8KICAgLy8gdXNlcl9wcmVmKCJkZXZpY2Uuc2Vuc29ycy5lbmFibGVkIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImRvbS5lbmFibGVfcGVyZm9ybWFuY2UiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiZG9tLmVuYWJsZV9yZXNvdXJjZV90aW1pbmciLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiZG9tLmdhbWVwYWQuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJkb20ubmV0aW5mby5lbmFibGVkIiwgZmFsc2UpOyAvLyBbREVGQVVMVDogZmFsc2UgTk9OLUFORFJPSUQ6IGZhbHNlIEFORFJPSUQgRkY5OStdCiAgIC8vIHVzZXJfcHJlZigiZG9tLndlYmF1ZGlvLmVuYWJsZWQiLCBmYWxzZSk7Ci8qIDgwMDI6IGRpc2FibGUgb3RoZXIgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIuZGlzcGxheS51c2VfZG9jdW1lbnRfZm9udHMiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnpvb20uc2l0ZVNwZWNpZmljIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImRvbS53M2NfdG91Y2hfZXZlbnRzLmVuYWJsZWQiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJtZWRpYS5uYXZpZ2F0b3IuZW5hYmxlZCIsIGZhbHNlKTsKICAgLy8gdXNlcl9wcmVmKCJtZWRpYS5vbmRldmljZWNoYW5nZS5lbmFibGVkIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoIm1lZGlhLnZpZGVvX3N0YXRzLmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigibWVkaWEud2Vic3BlZWNoLnN5bnRoLmVuYWJsZWQiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigid2ViZ2wuZW5hYmxlLWRlYnVnLXJlbmRlcmVyLWluZm8iLCBmYWxzZSk7Ci8qIDgwMDM6IHNwb29mICoqKi8KICAgLy8gdXNlcl9wcmVmKCJkb20ubWF4SGFyZHdhcmVDb25jdXJyZW5jeSIsIDIpOwogICAvLyB1c2VyX3ByZWYoImZvbnQuc3lzdGVtLndoaXRlbGlzdCIsICIiKTsgLy8gW0hJRERFTiBQUkVGXQogICAvLyB1c2VyX3ByZWYoImdlbmVyYWwuYXBwbmFtZS5vdmVycmlkZSIsICIiKTsgLy8gW0hJRERFTiBQUkVGXQogICAvLyB1c2VyX3ByZWYoImdlbmVyYWwuYXBwdmVyc2lvbi5vdmVycmlkZSIsICIiKTsgLy8gW0hJRERFTiBQUkVGXQogICAvLyB1c2VyX3ByZWYoImdlbmVyYWwuYnVpbGRJRC5vdmVycmlkZSIsICIiKTsgLy8gW0hJRERFTiBQUkVGXQogICAvLyB1c2VyX3ByZWYoImdlbmVyYWwub3NjcHUub3ZlcnJpZGUiLCAiIik7IC8vIFtISURERU4gUFJFRl0KICAgLy8gdXNlcl9wcmVmKCJnZW5lcmFsLnBsYXRmb3JtLm92ZXJyaWRlIiwgIiIpOyAvLyBbSElEREVOIFBSRUZdCiAgIC8vIHVzZXJfcHJlZigiZ2VuZXJhbC51c2VyYWdlbnQub3ZlcnJpZGUiLCAiIik7IC8vIFtISURERU4gUFJFRl0KICAgLy8gdXNlcl9wcmVmKCJ1aS51c2Vfc3RhbmRpbnNfZm9yX25hdGl2ZV9jb2xvcnMiLCB0cnVlKTsKCi8qKiogW1NFQ1RJT04gOTAwMF06IFBFUlNPTkFMCiAgIE5vbi1wcm9qZWN0IHJlbGF0ZWQgYnV0IHVzZWZ1bC4gSWYgYW55IGludGVyZXN0IHlvdSwgYWRkIHRoZW0gdG8geW91ciBvdmVycmlkZXMKKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICI5MDAwIHN5bnRheCBlcnJvcjogdGhlIHBhcnJvdCdzIGNhc2hlZCBpbiAnaXMgY2hpcHMhIik7Ci8qIFdFTENPTUUgJiBXSEFUJ1MgTkVXIE5PVElDRVMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIuc3RhcnR1cC5ob21lcGFnZV9vdmVycmlkZS5tc3RvbmUiLCAiaWdub3JlIik7IC8vIG1hc3RlciBzd2l0Y2gKICAgLy8gdXNlcl9wcmVmKCJzdGFydHVwLmhvbWVwYWdlX3dlbGNvbWVfdXJsIiwgIiIpOwogICAvLyB1c2VyX3ByZWYoInN0YXJ0dXAuaG9tZXBhZ2Vfd2VsY29tZV91cmwuYWRkaXRpb25hbCIsICIiKTsKICAgLy8gdXNlcl9wcmVmKCJzdGFydHVwLmhvbWVwYWdlX292ZXJyaWRlX3VybCIsICIiKTsgLy8gV2hhdCdzIE5ldyBwYWdlIGFmdGVyIHVwZGF0ZXMKLyogV0FSTklOR1MgKioqLwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudGFicy53YXJuT25DbG9zZSIsIGZhbHNlKTsgLy8gW0RFRkFVTFQgZmFsc2UgRkY5NCtdCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci50YWJzLndhcm5PbkNsb3NlT3RoZXJUYWJzIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIudGFicy53YXJuT25PcGVuIiwgZmFsc2UpOwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIud2Fybk9uUXVpdFNob3J0Y3V0IiwgZmFsc2UpOyAvLyBbRkY5NCtdCiAgIC8vIHVzZXJfcHJlZigiZnVsbC1zY3JlZW4tYXBpLndhcm5pbmcuZGVsYXkiLCAwKTsKICAgLy8gdXNlcl9wcmVmKCJmdWxsLXNjcmVlbi1hcGkud2FybmluZy50aW1lb3V0IiwgMCk7Ci8qIFVQREFURVMgKioqLwogICAvLyB1c2VyX3ByZWYoImFwcC51cGRhdGUuYXV0byIsIGZhbHNlKTsgLy8gW05PTi1XSU5ET1dTXSBkaXNhYmxlIGF1dG8gYXBwIHVwZGF0ZXMKICAgICAgLy8gW05PVEVdIFlvdSB3aWxsIHN0aWxsIGdldCBwcm9tcHRzIHRvIHVwZGF0ZSwgYW5kIHNob3VsZCBkbyBzbyBpbiBhIHRpbWVseSBtYW5uZXIKICAgICAgLy8gW1NFVFRJTkddIEdlbmVyYWw+RmlyZWZveCBVcGRhdGVzPkNoZWNrIGZvciB1cGRhdGVzIGJ1dCBsZXQgeW91IGNob29zZSB0byBpbnN0YWxsIHRoZW0KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnNlYXJjaC51cGRhdGUiLCBmYWxzZSk7IC8vIGRpc2FibGUgc2VhcmNoIGVuZ2luZSB1cGRhdGVzIChlLmcuIE9wZW5TZWFyY2gpCiAgICAgIC8vIFtOT1RFXSBUaGlzIGRvZXMgbm90IGFmZmVjdCBNb3ppbGxhJ3MgYnVpbHQtaW4gb3IgV2ViIEV4dGVuc2lvbiBzZWFyY2ggZW5naW5lcwogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMudXBkYXRlLmVuYWJsZWQiLCBmYWxzZSk7IC8vIGRpc2FibGUgZXh0ZW5zaW9uIGFuZCB0aGVtZSB1cGRhdGUgY2hlY2tzCiAgIC8vIHVzZXJfcHJlZigiZXh0ZW5zaW9ucy51cGRhdGUuYXV0b1VwZGF0ZURlZmF1bHQiLCBmYWxzZSk7IC8vIGRpc2FibGUgaW5zdGFsbGluZyBleHRlbnNpb24gYW5kIHRoZW1lIHVwZGF0ZXMKICAgICAgLy8gW1NFVFRJTkddIGFib3V0OmFkZG9ucz5FeHRlbnNpb25zPltjb2ctd2hlZWwtaWNvbl0+VXBkYXRlIEFkZC1vbnMgQXV0b21hdGljYWxseSAodG9nZ2xlKQogICAvLyB1c2VyX3ByZWYoImV4dGVuc2lvbnMuZ2V0QWRkb25zLmNhY2hlLmVuYWJsZWQiLCBmYWxzZSk7IC8vIGRpc2FibGUgZXh0ZW5zaW9uIG1ldGFkYXRhIChleHRlbnNpb24gZGV0YWlsIHRhYikKLyogQVBQRUFSQU5DRSAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5kb3dubG9hZC5hdXRvaGlkZUJ1dHRvbiIsIGZhbHNlKTsgLy8gW0ZGNTcrXQogICAvLyB1c2VyX3ByZWYoInRvb2xraXQubGVnYWN5VXNlclByb2ZpbGVDdXN0b21pemF0aW9ucy5zdHlsZXNoZWV0cyIsIHRydWUpOyAvLyBbRkY2OCtdIGFsbG93IHVzZXJDaHJvbWUvdXNlckNvbnRlbnQKICAgLy8gdXNlcl9wcmVmKCJ1aS5wcmVmZXJzUmVkdWNlZE1vdGlvbiIsIDEpOyAvLyBkaXNhYmxlIGNocm9tZSBhbmltYXRpb25zIFtGRjc3K10gW1JFU1RBUlRdIFtISURERU4gUFJFRl0KICAgICAgLy8gMD1uby1wcmVmZXJlbmNlLCAxPXJlZHVjZTogd2l0aCBSRlAgdGhpcyBvbmx5IGFmZmVjdHMgY2hyb21lCiAgIC8vIHVzZXJfcHJlZigidWkuc3lzdGVtVXNlc0RhcmtUaGVtZSIsIDEpOyAvLyBbRkY2NytdIFtISURERU4gUFJFRl0KICAgICAgLy8gMD1saWdodCwgMT1kYXJrOiB3aXRoIFJGUCB0aGlzIG9ubHkgYWZmZWN0cyBjaHJvbWUKLyogQ09OVEVOVCBCRUhBVklPUiAqKiovCiAgIC8vIHVzZXJfcHJlZigiYWNjZXNzaWJpbGl0eS50eXBlYWhlYWRmaW5kIiwgdHJ1ZSk7IC8vIGVuYWJsZSAiRmluZCBBcyBZb3UgVHlwZSIKICAgLy8gdXNlcl9wcmVmKCJjbGlwYm9hcmQuYXV0b2NvcHkiLCBmYWxzZSk7IC8vIGRpc2FibGUgYXV0b2NvcHkgZGVmYXVsdCBbTElOVVhdCiAgIC8vIHVzZXJfcHJlZigibGF5b3V0LnNwZWxsY2hlY2tEZWZhdWx0IiwgMik7IC8vIDA9bm9uZSwgMS1tdWx0aS1saW5lLCAyPW11bHRpLWxpbmUgJiBzaW5nbGUtbGluZQovKiBVWCBCRUhBVklPUiAqKiovCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci5iYWNrc3BhY2VfYWN0aW9uIiwgMik7IC8vIDA9cHJldmlvdXMgcGFnZSwgMT1zY3JvbGwgdXAsIDI9ZG8gbm90aGluZwogICAvLyB1c2VyX3ByZWYoImJyb3dzZXIucXVpdFNob3J0Y3V0LmRpc2FibGVkIiwgdHJ1ZSk7IC8vIGRpc2FibGUgQ3RybC1RIHF1aXQgc2hvcnRjdXQgW0xJTlVYXSBbTUFDXSBbRkY4NytdCiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci50YWJzLmNsb3NlV2luZG93V2l0aExhc3RUYWIiLCBmYWxzZSk7CiAgIC8vIHVzZXJfcHJlZigiYnJvd3Nlci50YWJzLmxvYWRCb29rbWFya3NJblRhYnMiLCB0cnVlKTsgLy8gb3BlbiBib29rbWFya3MgaW4gYSBuZXcgdGFiIFtGRjU3K10KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5kZWNvZGVVUkxzT25Db3B5IiwgdHJ1ZSk7IC8vIHNlZSBidWd6aWxsYSAxMzIwMDYxIFtGRjUzK10KICAgLy8gdXNlcl9wcmVmKCJnZW5lcmFsLmF1dG9TY3JvbGwiLCBmYWxzZSk7IC8vIG1pZGRsZS1jbGljayBlbmFibGluZyBhdXRvLXNjcm9sbGluZyBbREVGQVVMVDogZmFsc2Ugb24gTGludXhdCiAgIC8vIHVzZXJfcHJlZigidWkua2V5Lm1lbnVBY2Nlc3NLZXkiLCAwKTsgLy8gZGlzYWJsZSBhbHQga2V5IHRvZ2dsaW5nIHRoZSBtZW51IGJhciBbUkVTVEFSVF0KICAgLy8gdXNlcl9wcmVmKCJ2aWV3X3NvdXJjZS50YWIiLCBmYWxzZSk7IC8vIHZpZXcgInBhZ2Uvc2VsZWN0aW9uIHNvdXJjZSIgaW4gYSBuZXcgd2luZG93IFtGRjY4K10KLyogVVggRkVBVFVSRVMgKioqLwp1c2VyX3ByZWYoImJyb3dzZXIubWVzc2FnaW5nLXN5c3RlbS53aGF0c05ld1BhbmVsLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFdoYXQncyBOZXcgdG9vbGJhciBpY29uIFtGRjY5K10KICAgLy8gdXNlcl9wcmVmKCJleHRlbnNpb25zLnBvY2tldC5lbmFibGVkIiwgZmFsc2UpOyAvLyBQb2NrZXQgQWNjb3VudCBbRkY0NitdCiAgIC8vIHVzZXJfcHJlZigiZXh0ZW5zaW9ucy5zY3JlZW5zaG90cy5kaXNhYmxlZCIsIHRydWUpOyAvLyBbRkY1NStdCiAgIC8vIHVzZXJfcHJlZigiaWRlbnRpdHkuZnhhY2NvdW50cy5lbmFibGVkIiwgZmFsc2UpOyAvLyBGaXJlZm94IEFjY291bnRzICYgU3luYyBbRkY2MCtdIFtSRVNUQVJUXQogICAvLyB1c2VyX3ByZWYoInJlYWRlci5wYXJzZS1vbi1sb2FkLmVuYWJsZWQiLCBmYWxzZSk7IC8vIFJlYWRlciBWaWV3Ci8qIE9USEVSICoqKi8KICAgLy8gdXNlcl9wcmVmKCJicm93c2VyLmJvb2ttYXJrcy5tYXhfYmFja3VwcyIsIDIpOwp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uYXNyb3V0ZXIudXNlcnByZWZzLmNmci5hZGRvbnMiLCBmYWxzZSk7IC8vIGRpc2FibGUgQ0ZSIFtGRjY3K10KICAgICAgLy8gW1NFVFRJTkddIEdlbmVyYWw+QnJvd3Npbmc+UmVjb21tZW5kIGV4dGVuc2lvbnMgYXMgeW91IGJyb3dzZQp1c2VyX3ByZWYoImJyb3dzZXIubmV3dGFicGFnZS5hY3Rpdml0eS1zdHJlYW0uYXNyb3V0ZXIudXNlcnByZWZzLmNmci5mZWF0dXJlcyIsIGZhbHNlKTsgLy8gZGlzYWJsZSBDRlIgW0ZGNjcrXQogICAgICAvLyBbU0VUVElOR10gR2VuZXJhbD5Ccm93c2luZz5SZWNvbW1lbmQgZmVhdHVyZXMgYXMgeW91IGJyb3dzZQogICAvLyB1c2VyX3ByZWYoIm5ldHdvcmsubWFuYWdlLW9mZmxpbmUtc3RhdHVzIiwgZmFsc2UpOyAvLyBzZWUgYnVnemlsbGEgNjIwNDcyCiAgIC8vIHVzZXJfcHJlZigieHBpbnN0YWxsLnNpZ25hdHVyZXMucmVxdWlyZWQiLCBmYWxzZSk7IC8vIGVuZm9yY2VkIGV4dGVuc2lvbiBzaWduaW5nIChOaWdodGx5L0VTUikKCi8qKiogW1NFQ1RJT04gOTk5OV06IERFUFJFQ0FURUQgLyBSRU1PVkVEIC8gTEVHQUNZIC8gUkVOQU1FRAogICBEb2N1bWVudGF0aW9uIGRlbm90ZWQgYXMgWy1dLiBJdGVtcyBkZXByZWNhdGVkIHByaW9yIHRvIEZGOTEgaGF2ZSBiZWVuIGFyY2hpdmVkIGF0IFsxXQogICBbMV0gaHR0cHM6Ly9naXRodWIuY29tL2Fya2VuZm94L3VzZXIuanMvaXNzdWVzLzEyMwoqKiovCnVzZXJfcHJlZigiX3VzZXIuanMucGFycm90IiwgIjk5OTkgc3ludGF4IGVycm9yOiB0aGUgcGFycm90J3Mgc2h1ZmZsZWQgb2ZmICdpcyBtb3J0YWwgY29pbCEiKTsKLyogRVNSOTEueCBzdGlsbCB1c2VzIGFsbCB0aGUgZm9sbG93aW5nIHByZWZzCi8vIFtOT1RFXSByZXBsYWNlIHRoZSAqIHdpdGggYSBzbGFzaCBpbiB0aGUgbGluZSBhYm92ZSB0byByZS1lbmFibGUgdGhlbQovLyBGRjkzCi8vIDcwMDM6IGRpc2FibGUgbm9uLW1vZGVybiBjaXBoZXIgc3VpdGVzCiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE3MjQwNzIKICAgLy8gdXNlcl9wcmVmKCJzZWN1cml0eS5zc2wzLnJzYV9kZXNfZWRlM19zaGEiLCBmYWxzZSk7IC8vIDNERVMKLy8gRkY5NAovLyAxNDAyOiBsaW1pdCBmb250IHZpc2liaWxpdHkgKFdpbmRvd3MsIE1hYywgc29tZSBMaW51eCkgW0ZGNzkrXSAtIHJlcGxhY2VkIGJ5IG5ldyAxNDAyCiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE3MTU1MDcKICAgLy8gdXNlcl9wcmVmKCJsYXlvdXQuY3NzLmZvbnQtdmlzaWJpbGl0eS5sZXZlbCIsIDEpOwovLyBGRjk1Ci8vIDA4MDc6IGRpc2FibGUgbG9jYXRpb24gYmFyIGNvbnRleHR1YWwgc3VnZ2VzdGlvbnMgW0ZGOTIrXSAtIHJlcGxhY2VkIGJ5IG5ldyAwODA3CiAgIC8vIFstXSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnLzE3MzU5NzYKdXNlcl9wcmVmKCJicm93c2VyLnVybGJhci5zdWdnZXN0LnF1aWNrc3VnZ2VzdCIsIGZhbHNlKTsKLy8gRkY5NgovLyAwMzAyOiBkaXNhYmxlIGF1dG8tSU5TVEFMTElORyBGaXJlZm94IHVwZGF0ZXMgdmlhIGEgYmFja2dyb3VuZCBzZXJ2aWNlICsgaGlkZSB0aGUgc2V0dGluZyBbRkY5MCtdIFtXSU5ET1dTXQogICAvLyBbU0VUVElOR10gR2VuZXJhbD5GaXJlZm94IFVwZGF0ZXM+QXV0b21hdGljYWxseSBpbnN0YWxsIHVwZGF0ZXM+V2hlbiBGaXJlZm94IGlzIG5vdCBydW5uaW5nCiAgIC8vIFsxXSBodHRwczovL3N1cHBvcnQubW96aWxsYS5vcmcva2IvZW5hYmxlLWJhY2tncm91bmQtdXBkYXRlcy1maXJlZm94LXdpbmRvd3MKICAgLy8gWy1dIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTczODk4Mwp1c2VyX3ByZWYoImFwcC51cGRhdGUuYmFja2dyb3VuZC5zY2hlZHVsaW5nLmVuYWJsZWQiLCBmYWxzZSk7Ci8vIEZGOTcKLy8gNzAwNjogb25pb25zIC0gcmVwbGFjZWQgYnkgbmV3IDcwMDYgImFsbG93bGlzdCIKICAgLy8gWy1dIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvMTc0NDAwNgogICAvLyB1c2VyX3ByZWYoImRvbS5zZWN1cmVjb250ZXh0LndoaXRlbGlzdF9vbmlvbnMiLCB0cnVlKTsgLy8gMTM4MjM1OQovLyAqKiovCgovKiBFTkQ6IGludGVybmFsIGN1c3RvbSBwcmVmIHRvIHRlc3QgZm9yIHN5bnRheCBlcnJvcnMgKioqLwp1c2VyX3ByZWYoIl91c2VyLmpzLnBhcnJvdCIsICJTVUNDRVNTOiBObyBubyBoZSdzIG5vdCBkZWFkLCBoZSdzLCBoZSdzIHJlc3RpbichIik7Cg=="
